{"version":3,"sources":["src/repl.sibilant","include/macros.sibilant","src/helpers.sibilant"],"names":[],"mappings":"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","sourcesContent":["(|> \"source-map-support\" require .install)\n(source-mapping-url \"../maps/repl.map\")\n\n(require! sibilant: \"./sibilant\",\n          'cardinal, 'util, 'vm)\n\n(var input      (process.open-stdin)\n     output     process.stdout\n     readline   (|> 'readline require (.create-interface input output))\n     context    undefined\n     cmd-buffer \"\")\n\n(def create-context ()\n     (var context (vm.create-context))\n     (set module 'filename (|> (process.cwd) (concat \"/exec\")))\n     (set context\n          '*sibilant sibilant\n          'module  module\n          'require require)\n     (each-key key global (set context key (get global key)))\n     context)\n\n(assign context (create-context))\n\n(def display-prompt ()\n     (var open (|> cmd-buffer (.split (regex \"[\\\\{\\\\[\\\\(]\" 'g)) length)\n          closed (|> cmd-buffer (.split (regex \"[\\\\}\\\\]\\\\)]\" 'g)) length)\n          indentation \"\")\n\n     (while (> open closed)\n            (assign indentation (\"  \" indentation))\n            (decr open))\n\n     (readline.set-prompt (if (empty? cmd-buffer)\n                              \"sibilant> \"\n                              (\"          \" indentation)))\n;;                              \"            \"))\n     (readline.prompt))\n\n(def handle-line (cmd)\n     (var js-line \"\")\n\n     (try\n      (do\n       (assign cmd-buffer (concat cmd-buffer cmd)\n               {js} (sibilant cmd-buffer))\n\n       (var safe-js (if (= (first js) \"{\")\n                        (pipe js\n                              ((sibilant.resolve-macro 'scoped))\n                              sibilant.transpile\n                              sibilant.output-formatter)\n                        js))\n\n       (try\n        (|> js cardinal.highlight console.log)\n        (console.dir js))\n\n       (var result (vm.run-in-context safe-js context \"sibilant-repl\"))\n       (set readline.history 0 cmd-buffer)\n       (when (defined? result)\n             (output.write (\"result: \"\n                            (util.inspect result { colors true }) \"\\n\")))\n       (set context \"_\" result)\n       (assign cmd-buffer \"\"))\n      (do\n       (if (match-regex? e.message \"unclosed node\")\n           (do\n            (assign cmd-buffer (concat cmd-buffer \"\\n\"))\n            (readline.history.shift))\n           (do\n            (set readline.history 0 cmd-buffer)\n            (output.write (concat e.stack \"\\n\"))\n            (assign  cmd-buffer \"\")))))\n     (display-prompt))\n\n(readline.on 'line handle-line)\n\n(readline.on 'close (#>\n                     (output.write \"\\nexiting\")\n                     (input.destroy)))\n\n(display-prompt)\n",null,null]}