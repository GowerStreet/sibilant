{"version":3,"sources":["/Users/jbr/code/sibilant/src/sibilant.sibilant","/Users/jbr/code/sibilant/include/macros.sibilant","/Users/jbr/code/sibilant/src/node.sibilant","/Users/jbr/code/sibilant/src/colors.sibilant","/Users/jbr/code/sibilant/src/pretty-printer.sibilant","/Users/jbr/code/sibilant/src/output-formatter.sibilant","/Users/jbr/code/sibilant/src/sourcemap.sibilant","/Users/jbr/code/sibilant/include/functional.sibilant","/Users/jbr/code/sibilant/src/parser.sibilant","/Users/jbr/code/sibilant/src/restructurer.sibilant","/Users/jbr/code/sibilant/src/macros.sibilant","/Users/jbr/code/sibilant/src/helpers.sibilant","/Users/jbr/code/sibilant/src/core.sibilant","/Users/jbr/code/sibilant/src/transpiler.sibilant","/Users/jbr/code/sibilant/src/docs.sibilant","/Users/jbr/code/sibilant/src/require-and-include.sibilant"],"names":[],"mappings":"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","sourcesContent":["(|> \"source-map-support\" require .install)\n(source-mapping-url \"../maps/sibilant.map\")\n\n(include \"./node\"\n         \"./pretty-printer\"\n         \"./output-formatter\"\n         \"./sourcemap\"\n         \"../include/functional\"\n         \"./parser\"\n         \"./restructurer\"\n         \"./macros\"\n         \"./helpers\"\n         \"./core\"\n         \"./transpiler\"\n         \"./docs\"\n         \"./require-and-include\")\n","(namespace core)\n\n(docs \"the simplest way to conditionally execute code.\"\n      example (ternary (< 50 100)\n                       \"fifty is less than 100\"\n                       \"fifty is more than 100\"))\n\n(macro ternary (cond if-true if-false)\n       [\"(\" (transpile cond) \") ? \"\n            (transpile if-true) \" : \"\n            (transpile if-false)])\n\n\n\n\n\n;; nodoc\n(macro set (arr ...kv-pairs)\n       (interleave \"\\n\" (bulk-map kv-pairs\n                                  (#(k v)\n                                    (as-statement [\"(\" (transpile arr) \")\"\n                                                    \"[\" (transpile k) \"] = \" (transpile v) ])))))\n;; nodoc\n(macro var (...pairs)\n       (as-statement\n        [\"var \"\n         (interleave \",\\n    \"\n               (bulk-map pairs\n                         (#(name value)\n                           [ (transpile name) \" = \" (transpile value) ])))\n         ]))\n\n;; nodoc\n(macro get (obj ...keys)\n       [\"(\" (transpile obj) \")\" (map keys (#(key)\n                                            [\"[\" (transpile key) \"]\"]))])\n\n\n\n\n\n(docs \"stores a duplicate copy of `current-macro-name` as\n`new-macro-name` in current namespace.  No output.\")\n\n(macro alias-macro (current-macro-name new-macro-name)\n       (var current-macro-name (output-formatter (transpile current-macro-name))\n            new-macro-name (output-formatter (transpile new-macro-name)))\n       (set sibilant.macros.namespace\n            new-macro-name (get sibilant.macros.namespace current-macro-name))\n       null)\n\n\n\n\n\n(docs \"calls the `method` on `object` as a function with `args` as the arguments\"\n      example (send object method first-argument second-argument third-argument))\n\n(macro send (object method ...args)\n       [(transpile object) \".\" (transpile method)\n               \"(\" (interleave \", \" (map args transpile)) \")\"])\n\n\n\n\n\n(docs \"calls the function `fn` with arguments passed as an array in `arglist`\"\n      example (apply my-function [ first-arg second-arg third-arg ]))\n\n(macro apply (fn arglist)\n       '(.apply @fn this @arglist))\n\n\n\n\n(docs \"builds an array with `first` as the zeroth index and the\nelements provided by array `rest` as the subsequent elements, as\nsiblings with `first`.  deprecated\"\n      example (cons 1 [ 2 3 4 ]))\n\n(macro cons (first rest)\n       [\"[ \" (transpile first) \" ].concat(\" (transpile rest) \")\"])\n\n\n\n\n(docs \"adds `additional` elements onto the right-side (tail) of `list`. deprecated\"\nexample (append [ 1 2 3 ] 4 5 6))\n(macro append (list ...additional)\n       '(.concat @list (list ...@additional)))\n\n\n(docs \"fetches length attribute from `arr`\"\n      example (length [ 1 2 3 ]))\n(macro length (arr)\n       '(get @arr 'length))\n\n(docs \"executes the `body` inside of a self-executing function. The\nlast statement/expression of the body is returned.\"\n      examples [(scoped true) (scoped (var a 1) (+ a 2))])\n\n(macro scoped (...body)\n       '(.call (lambda @{node this args []} ...@body) this))\n\n;;nodoc\n(macro *scoped-without-source (...body)\n       [\"(function() {\" (indent '(do ...@body)) \"}).call(this)\"])\n\n(macro *number-words (...number-words)\n       (.for-each number-words (#(word index)\n                                 `(docs @(\"fetches the \"(output-formatter (transpile word))\" element from `arr`\")\n                                        example (@word my-array))\n                                 `(macro @word (arr) (var index @index) `(get @arr @index)))))\n(*number-words first second third fourth fifth sixth seventh eighth ninth)\n(delete-macro *number-words)\n\n\n(docs \"fetches all but the first item of `arr`\"\n      example (rest [ 1 2 3 ]))\n(macro rest (arr) '(.slice @arr 1))\n\n(docs \"fetches just the last element of `arr` by slicing.\"\n      example (last [ 1 2 3 ]))\n(macro last (arr) '(first (.slice @arr -1)))\n\n;;nodoc\n(macro = (a b) [ (transpile a) \" === \" (transpile b) ])\n\n(docs \"adds `args` using the javascript `+` operator. Since javascript\noverloads this for string concatenation, this macro can be used for\nthis as well.\"\n      examples [ (+ 1 2 3) (+ 'hello 'world) ])\n(macro +   (...args)\n       [\"(\" (interleave \" + \" (map args transpile)) \")\"])\n\n\n(docs \"subtracts each subsequent element of `args`\"\n      examples [ (- 2 1) (- 10 5 1) ])\n(macro -   (...args)\n       [\"(\" (interleave \" - \" (map args transpile)) \")\"])\n\n(docs \"multiplies elements of `args`\"\n      example (* 3 4 5))\n(macro *   (...args)\n       [\"(\" (interleave \" * \" (map args transpile)) \")\"])\n\n(docs \"divides each subsequent element of `args`\"\n      examples [ (/ 1 2)\n                 (/ 1 2 3) ])\n(macro /   (...args)\n           [\"(\" (interleave \" / \" (map args transpile)) \")\"])\n\n\n(docs \"short circuiting operator returns the first element of `args` that evaluates to be truthy\"\n      example (or (= 1 2) (string? []) \"one is not two and an array is not a string\"))\n(macro or  (...args)\n       [\"(\" (interleave \" || \" (map args transpile)) \")\"])\n\n\n(docs \"returns the last element if all elements of `args` are truthy, or the\nfirst non-truthy element if it exists\"\n      example (and (string? \"string\") (number? 10) (= 1 1)))\n(macro and (...args)\n       (ternary (= 1 (length args)) (transpile (first args))\n                [\"(\" (interleave \" && \" (map args transpile)) \")\"]))\n\n(docs \"modulus operator\" example (mod 10 2))\n(macro mod (...args)\n       [\"(\" (interleave \" % \" (map args transpile)) \")\"])\n\n\n\n\n\n\n\n\n(macro *def-infix (macro-name word js-comparator)\n       (var docstring (\"compares `args` from left to right, \"\n                       \"returning true if each element is \"\n                       (.slice word.token 1 -1)\n                       \" than the next\"))\n       \n       `(docs @docstring examples [ (@macro-name a b c) (@macro-name a b) ])\n       \n       `(macro @macro-name (...args)\n               (var js-comparator @(or js-comparator [\"\\\"\" macro-name \"\\\"\"]))\n               `(and ...@(map (args.slice 0 -1)\n                              (#(item index)\n                                [ item \" \" js-comparator \" \"\n                                  (get args (+ 1 index)) ])))))\n\n(*def-infix > \"greater than\")\n(*def-infix <  \"less than\")\n(*def-infix <= \"less than or equal\")\n(*def-infix >= \"greater than or equal\")\n(*def-infix != \"not equal (using threequals)\" \"!==\")\n(*def-infix = \"equal (using threequals)\" \"===\")\n\n(delete-macro *def-infix)\n\n\n\n\n\n\n\n\n(docs \"increments `item` by `increment`\"\n      example (incr-by n 5))\n(macro incr-by (item increment)\n       [ (transpile item) \" += \" (transpile increment)])\n\n\n\n\n(docs \"increments item by 1\", example: (incr i))\n(macro incr (item)\n       [\"((\" (transpile item) \")++)\"])\n\n\n\n\n\n(docs \"decrements item by 1\", example: (decr i))\n(macro decr (item) [\"((\" (transpile item) \")--)\"])\n\n(docs \"uses the javascript new keyword to construct an object using\n      `constructor`, with `args` passed as arguments to the constructor.\"\n      example (new RegExp \"hello\" 'g))\n\n(macro new (constructor ...args)\n       [\"(new \" '(call @constructor ...@args) \")\"])\n\n\n\n(docs \"builds a regex using `pattern` and `flags` as arguments to the RegExp constructor\"\n      examples [ (regex \"[0-9]+\") (regex \"0x[0-9a-f]+\" 'i)])\n(macro regex (pattern flags)\n       '(new RegExp @pattern @(or flags 'undefined)))\n\n\n\n(docs \"predicate to test for equality with zero\"\n      example: (zero? n))\n(macro zero? (item) '(= @item 0))\n\n\n(docs \"returns true if the array `arr` has a length of zero\"\n      example: (empty? []))\n(macro empty? (arr)\n       `(= 0 (length @arr)))\n\n\n(docs \"returns true if `number` is not divisible by 2\"\n      example (odd? 5))\n(macro odd? (number)\n       '(= 1 (mod @number 2)))\n\n\n(docs \"returns true if `number` is divisible by 2 with no remainder\"\n      example (even? 10))\n(macro even? (number)\n       '(= 0 (mod @number 2)))\n\n\n(docs \"exposes the javascript typeof operator. most often, predicates\nsuch as `string?`, `function?`, `number?`, etc are preferred.\"\n      example: (typeof 5))\n(macro typeof (thing) [\"typeof \" (transpile thing)])\n\n\n(docs \"returns true if all of the `things` are javascript strings\"\n      examples: [ (string? test-object) (string? 'yes 'yes 'yes) ])\n(macro string? (...things)\n       '(and ...@(map things (#(thing) '(= (typeof @thing) 'string)))))\n\n\n(docs \"returns true if all of the `things` are functions\"\n      examples: [ (function? fn) (function? err cb) ])\n(macro function? (...things)\n       '(and ...@(map things (#(thing) '(= (typeof @thing) 'function)))))\n\n\n(docs \"returns true if all of the `things` are undefined, as tested\nwith `typeof`, not equality with literal undefined. This is the\ninverse of `defined?`\"\n      examples: [ (undefined? argument)\n                  (undefined? 1 2 undefined) ])\n(macro undefined? (...things)\n       '(and ...@(map things (#(thing) '(= (typeof @thing) 'undefined)))))\n\n\n(docs \"returns true if none of the `things` are undefined, as tested\nwith `typeof`. This is the inverse of `defined?`\"\n      examples: [ (defined? variable)\n                  (defined? var1 var2 var3) ])\n(macro defined? (...things)\n       '(and ...@(map things (#(thing) '(!= (typeof @thing) 'undefined)))))\n\n\n(docs \"returns true if all of the `things` are numbers, as tested\nwith `typeof`\"\n      examples: [ (number? 1) (number? 1 2 3) ])\n(macro number? (...things)\n       '(and ...@(map things (#(thing) '(= (typeof @thing) 'number)))))\n\n\n;;nodoc\n(macro if (arg truebody falsebody)\n       [\"(function() {\"\n        (indent [\"if (\" (transpile arg) \") {\"\n                        (indent '(do ...@truebody))\n                        \"} else {\"\n                        (indent '(do ...@falsebody))\n                        \"}\"])\n         \"}).call(this)\"])\n\n\n(docs \"inserts the result of each subsequent call in `calls` as the\nsecond argument to the next macro. This is very much akin to clojure's thread-first arrow or elixir's pipe operator\"\n      examples: [\n                 (pipe \"a b c d\"\n                     .to-upper-case\n                     (.replace \"A\" \"X\")\n                     (.split \" \")\n                     first\n                     (concat \" marks the spot\"))\n\n                  (pipe \"{\\\"a\\\": {\\\"b\\\": [ 1, 2, 3 ]}}\"\n                        JSON.parse\n                        (get 'a)\n                        JSON.stringify)\n                  ]\n     references: [ \"https://clojuredocs.org/clojure.core/-%3E\"\n                   \"http://elixir-lang.org/docs/v1.0/elixir/Kernel.html#|>/2\" ])\n(macro pipe (...calls)\n       (inject undefined calls\n               (#(value item)\n                 (if (undefined? value) item\n                     (scoped\n                      (var cloned (if (node? item 'literal 'dots)\n                                      (get `(@item) 'source)\n                                      (clone item)))\n                     \n                      (merge-into cloned\n                                  { contents [ (first cloned.contents)\n                                               value\n                                               ...(rest cloned.contents) ] }))))))\n\n(alias-macro pipe |>)\n\n\n(docs \"inserts `contents` transpiled to javascript as a comment in the\noutput file, removing it from execution.\"\n      example (comment (scoped 1)))\n(macro comment (...contents)\n       (map contents (#(content)\n                       [\"// \"(recurse-map (transpile content)\n                                    (#(item)\n                                      (ternary item\n                                               (pipe item transpile output-formatter\n                                                     (.replace (regex \"\\n\" 'g) \"\\n// \"))\n                                               null)))])))\n\n\n;; (docs \"checks if `first-thing` is equal to all of the `other-things`.\n;; Most of the time, there is only one other thing. Javascript threequals\n;; is always used.  Please note that if evaluating `first-thing` has\n;; side-effects, they will be called `(length other-things)` times.\"\n;;       examples [ (= 1 2)\n;;                  (= 10 (+ 5 5) (- 15 5)) ])\n\n\n(docs \"returns true if `thing` is an array in javascript. aliased as\n`list?`.\"\n      example: (array? arr))\n\n(macro array? (thing)\n       (var transpiled (transpile thing))\n       [\"((\" transpiled \") && typeof (\" transpiled \") === \\\"object\\\" && (\"\n               transpiled \").constructor.name === \\\"Array\\\")\"])\n(alias-macro array? list?)\n\n\n(docs \"evaluates statements in `body` if `condition` is true. `body`\n      is `scoped` in a self-evaluating function to support having a\n      return value from the if statement.\"\n      example: (when (< 3 i) (console.log i) (get arr i)))\n\n(macro when (condition ...body)\n       [\"(function() {\"\n        (indent [\"if (\" (transpile condition) \") {\"\n                        (indent '(do ...@body))\n                        \"}\"])\n        \"}).call(this)\"])\n\n\n\n(docs \"boolean negation, as determined by javascript truthiness\"\n      example: (not (string? 1))\n      references: [ \"https://developer.mozilla.org/en-US/docs/Glossary/Truthy\"\n                    \"https://developer.mozilla.org/en-US/docs/Glossary/Falsy\" ])\n(macro not (exp)\n       [\"!(\" (transpile exp) \")\"])\n\n\n\n\n\n(docs \"evaluates statements in `body` if `condition` is falsy. `body`\n      is `scoped` in a self-evaluating function to support having a\n      return value from the if statement.\"\n      example: (unless (< 3 i) (console.log i) (get arr i)))\n\n(macro unless (condition ...body)\n       [\"(function() {\"\n        (indent [\"if (\" '(not @condition) \") {\"\n                        (indent '(do ...@body))\n                        \"}\"])\n        \"}).call(this)\"])\n\n(docs \"assigns alternating keys and values in `args`.  This works much\nlike `var`, but without the var keyword.  It is important to\nunderstand variable scope in javascript in order to use this macro safely.\nnote that this macro does not currently support destructuring like `var` does\"\n      examples [ (assign a 1) (assign a 1 b 2) ])\n\n(macro assign (...args)\n       (interleave \"\\n\"\n             (bulk-map args (#(name value)\n                              (as-statement [ (transpile name) \" = \"\n                                                    (transpile value)])))))\n\n\n\n(docs \"outputs debug information about `arg`.  If `label` is\nomitted (only one argument is provided), the name of the variable or\nexpression of that first expression will be logged. Aliased as `pretty-log`\"\n      examples: [ (log-pretty 'my-label value)\n                  (log-pretty (+ 1 2)) ])\n(macro log-pretty (label arg)\n       (var node this)\n       (when (undefined? arg)\n             (assign arg label\n                     label [\"\\\"\" (prettify label false) \"\\\"\"]))\n       `(console.log (concat @[\"\\\"\" node.file \":\" node.line \"\\\"\"] \" \" @label \" = \" (prettify @arg))))\n(alias-macro log-pretty pretty-log)\n\n(docs \"iterates over `array`, evaluating `body` once for each value in\n`array`.  If `item` is a literal name, that will be the variable into\nwhich the `array` element is yielded (current value).  If `item` is an expression, it\ncan contain the current value, the index, and the `array`.\"\n      references [\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach\"]\n      examples [ (each number [ 1 2 3 ] (console.log number))\n                 (each (letter index) `[ a b c d ]\n                       (set letters letter index)\n                       (pipe letter (.to-upper-case) (console.log))) ])\n                \n(macro each (item array ...body)\n       '(.for-each @array\n                   (lambda @{ node this\n                              args (if (node? item 'expression) item [item]) }\n                           ...@body)))\n\n\n\n\n\n\n\n\n;;nodoc\n;;deprecated\n(macro macro-expand (name)\n       (var macro (get macros (output-formatter (transpile name))))\n       (if macro\n           (macro.to-string)\n           \"undefined\"))\n\n\n\n\n(docs \"throws a new javascript error with arguments as the string\"\n      example (throw (new Error \"could not find matching socks\")))\n\n(macro throw (error)\n       [\"throw \" (transpile error)])\n\n\n\n\n\n(docs \"double-negates `expr`, converting it to a boolean\"\n      examples: [ (as-boolean 0) (as-boolean true) ])\n(macro as-boolean (expr)\n       [\"(!!(\" (transpile expr) \"))\"])\n\n\n;;nodoc because this needs attention\n;;todo\n(macro try (tryblock catchblock)\n       [\"(function() {\"\n        (indent [\"try {\"\n                 (indent '(do @tryblock))\n                 \"} catch (e) {\"\n                 (indent '(do @catchblock))\n                 \"}\"])\n         \"}).call(this)\"])\n\n\n\n\n\n;; (docs \"sets or gets sibilant state. If one arg is provided, this macro\n;; gets the value.  If more than two args are provided, sibilant state is\n;; set in pairs.  deprecated. internal.\")\n\n(macro state (...pairs)\n       (if (= 1 (length pairs))\n           (get sibilant.state (output-formatter (transpile (first pairs))))\n           (do (bulk-map pairs (#(k v) (set sibilant.state (output-formatter (transpile k)) (eval (output-formatter (transpile v))))))\n               null)))\n\n\n;;nodoc\n;;internal\n(macro symbol ()\n       (var symbol-count (or (get sibilant.state 'symbol-count) 0)\n            new-symbol-count (+ 1 symbol-count))\n       (^state 'symbol-count new-symbol-count)\n       [\"$_symbol\" new-symbol-count \"_$\"])\n\n\n\n\n\n(docs \"evaluates the `body` as long as `condition` is truthy,\nreturning the value of the last expression in `block` when `condition`\nceases to be truthy. See also `until`\"\n      example: (while (> 5 i) (console.log i) (decr i)))\n(macro while (condition ...body)\n       (var symbol (^symbol))\n       '(*scoped-without-source\n         (var @symbol)\n         @[\"while (\" (transpile condition) \") {\"\n           (indent '(assign @symbol (*scoped-without-source ...@body)))\n            \"}\"]\n         @symbol))\n\n\n\n\n(docs \"evaluates the `body` as long as `condition` is falsy,\nreturning the value of the last expression in `block` when `condition`\nceases to be falsy. See also `while`\"\n      example: (until (< 5 i) (console.log i) (incr i)))\n\n(macro until (condition ...body)\n       '(while (not @condition) ...@body))\n\n\n\n\n(docs \"returns true if the `string` matches `regexp`.  Deprecated in\n      preference to `.match` (`send` dot-invocation).\"\n      example: (match? (regex \"^[a-z]+$\" 'i) 'word))\n(macro match? (regexp string)\n       '(.match @string @regexp))\n\n(docs \"similar to `match?` but builds a regex out of the `pattern` and `flags`.\"\n      example (match-regex? 'word \"^[a-z]+$\" 'i))\n(macro match-regex? (string pattern flags)\n       '(match? (regex @pattern @flags) @string))\n\n\n(docs \"replaces the first occurance of `pattern` (as a regex) with `replacement`\"\n      example: (replace \"hello world\" \"l+o\" \"y there,\"))\n(macro replace (string pattern replacement)\n       '(.replace @string\n              (regex @pattern)\n              @replacement))\n\n(docs \"replaces all occurrances of `pattern` (as a regex) with `replacement`\"\n      example: (replace-all \"503-555-1212\" \"[0-9]\" \"#\"))\n(macro replace-all (string pattern replacement)\n       '(.replace @string (regex @pattern 'g) @replacement))\n\n\n\n\n\n\n(docs \"most often called as its alias, `#>`, thunk creates a function\nwith no named arguments. To refer to arguments anonymously, use #n,\nsuch as #0 for the first argument.\"\n      examples: [ (.map [ 1 2 3 ] (#> (+ 1 #0)))\n                  (window.set-timeout (#> (console.log 'here)) 10) ])\n(macro thunk (...body)\n       '(lambda @{ node this args [] }\n       ...@(map-node body\n                 (#(node)\n                   (if (node? node 'arg-placeholder)\n                       '(argument @(replace node.token \"^#\" \"\"))\n                       node)))))\n(alias-macro thunk #>)\n\n\n\n\n\n(docs \"most often called as its alias, `#->`, pipe-thunk applies a pipe chain to the argument of a function and returns the result\"\n      examples [ (.map `[ a b c ] (#-> (.to-upper-case) (concat \" is a letter\"))) ])\n(macro pipe-thunk (...calls) `(thunk (pipe #0 ...@calls)))\n(alias-macro pipe-thunk #->)\n\n\n\n\n\n\n(docs \"returns the property names of `obj`.\"\n      references: [ \"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/keys\" ]\n      example (keys { a 1 b 2 }))\n(macro keys (obj)\n       '(Object.keys @obj))\n\n\n\n\n\n\n(docs \"uses the javascript delete keyword on any number of `objects`.\n      Use in conjunction with `get` or dotted literal notation (a.b).\"\n      examples [ (delete object.a object.b)\n                 (delete (get object attribute) (get object \"other attribute\")) ])\n(macro delete (...objects)\n       (interleave \"\\n\" (map objects (#(obj)\n                                 (as-statement [\"delete \" (transpile obj)])))))\n\n\n\n\n\n\n\n(docs \"deletes each macro name in `macro-names` from the current namespace. Use carefully\")\n(macro delete-macro (...macro-names)\n       (each macro-name macro-names\n             (delete (get sibilant.macros.namespace (output-formatter (transpile macro-name)))))\n       null)\n(alias-macro delete-macro delmacro)\n\n\n\n\n\n\n(docs \"moves macro from `current-macro-name` to `new-macro-name`. Use carefully\")\n(macro rename-macro (current-macro-name new-macro-name)\n       (^alias-macro current-macro-name new-macro-name)\n       (^delete-macro current-macro-name)\n       null)\n\n\n\n\n\n\n\n\n(docs \"transforms function arguments into an array, using the Array prototype's slice\"\n      example (arguments))\n(macro arguments ()\n       [\"(Array.prototype.slice.apply(arguments))\"])\n\n\n\n\n\n\n\n(docs \"`get`s the argument at `index` in the current function context\"\n      example (argument 3))\n(macro argument (index)\n       '(get arguments @index))\n\n\n\n\n(docs \"iterates over each attribute in `obj`\"\n      example (each-key key { a 1 b 2 } (console.log key)))\n(macro each-key (as obj ...body)\n       `(pipe @obj (keys)\n              (.for-each (lambda @{ args: (if (node? as 'expression) as [as])\n                                    node: this }\n                                 ...@body))))\n\n\n\n\n\n\n\n(docs \"uses the javascript switch construction to test equality.  documentation todo: needs better description\"\n      examples: [\n                 (switch char\n                         ('a \"it was an a\")\n                         ('b (console.log \"found a b!\")\n                             \"it was a b\")\n                         ([1 2 3 4 5] \"it was an integer from one to five\")\n                         (default \"not sure\"))\n                 ])\n\n(macro switch (obj ...cases)\n       [\"(function() {\"\n         (indent [\"switch(\" (transpile obj) \") {\"\n                   (map cases (#(case-def)\n                                (var case-name-node (first case-def.contents)\n                                     case-labels (if (node? case-name-node 'expression 'bracket)\n                                                     case-name-node.contents\n                                                     [case-name-node])\n                                     case-string (interleave \"\\n\"\n                                                             (map case-labels (#(c)\n                                                                                (if (= 'default c.token)\n                                                                                    \"default:\"\n                                                                                    [\"case \" (transpile c) \":\"])))))\n                                [\"\\n\" case-string (indent '(do ...@(rest case-def.contents)))]))\n                   \"}\"])\n         \"}).call(this)\"])\n\n\n\n\n\n\n\n\n\n\n\n(docs \"tests any number of `alternating-conditions-and-branches`.  If\n      an odd number of branches are supplied, the final branch is a\n      default else clause.  To evaluate more than one expression as a\n      branch, use the `do` macro, as shown in the examples:\"\n      examples [ (if true (console.log 'here))\n                 (if (= 1 arguments.length) (console.log \"one argument\")\n                     (= 'blue favorite-color) (console.log \"blue\")\n                     (assign examples 'difficult))\n                 (if (foo?) (do (a b)\n                                (c))\n                     (bar?) (do (baz)\n                                (wibble))\n                     (do (d e)\n                         (console.log 'default))) ])\n\n\n\n(macro if (...alternating-conditions-and-branches)\n       [\"(function() {\"\n        (indent\n         (interleave \" else \"\n               (bulk-map alternating-conditions-and-branches\n                         (#(cond val)\n                           (if (!= (typeof val) 'undefined)\n                                 [\"if (\" (transpile cond) \") {\"\n                                   (indent '(do @val))\n                                   \"}\"]\n                                 [\"{\" (indent '(do @cond)) \"}\"])))))\n        \"}).call(this)\"])\n\n\n\n\n\n\n\n\n\n\n\n\n(docs \"similar to `pipe`, this macro allows function calls to be applied\nin sequence, as is common in fluent interfaces. deprecated in preference to `pipe`\"\n      example (chain a (b c d) (e) (f g)))\n      \n\n(macro chain (object ...calls)\n       (if (= 0 calls.length) (transpile object)\n           (= 1 calls.length) '(send @object ...@(get (first calls) 'contents))\n           (do\n            (var lines (map calls (#(call index)\n                                    [\".\" (transpile (first call.contents))\n                                         \"(\" (interleave \", \" (map (rest call.contents) transpile)) \")\"])))\n\n            [ (transpile object)\n              (first lines)\n              \"\\n  \"\n              (recurse-indent\n               (interleave \"\\n\" (rest lines)))])))\n\n\n\n\n\n\n\n;;nodoc, deprecated\n(macro chainable (...names)\n       (each (name) names\n             '(macro @name (target ...calls)\n                     '(chain (call @name @target) ...@calls))))\n\n\n\n\n(docs \"uses the javascript `instanceof` operator to check if `item` is of `type`.\"\n      example (instance-of? (new Date) Date))\n(macro instance-of? (item type)\n       [\"(\" (transpile item) \" instanceof \" (transpile type) \")\"])\n\n\n\n\n\n\n(docs \"returns true if `haystack` includes `needle`.  `haystack` can be a string or array/list.\"\n      examples [ (includes? 'hello 'h) (includes? `[ Veni vidi vici] 'vidi) ])\n(macro includes? (haystack needle)\n       '(pipe @haystack (.index-of @needle) (!= -1)))\n\n\n\n\n\n\n\n(docs \"returns true if `haystack` does NOT include `needle`.\n`haystack` can be a string or array/list\"\n      examples [ (excludes? 'hello 10) (excludes? `[ Veni vidi vici] 'attenti) ])\n(macro excludes? (haystack needle)\n       `(pipe @haystack (.index-of @needle) (= -1)))\n\n\n\n\n\n\n(docs \"similar to the javascript truthiness predicate `as-boolean`, returns true unless the `thing` is undefined or null\"\n      example (exists? window))\n(macro exists? (thing)\n       `(and (defined? @thing) (!= @thing null)))\n\n\n\n\n\n(macro with-state (k v ...body)\n       (var before (^state k))\n       (^state k v)\n       (var return-value\n            (interleave \"\\n\" (map body transpile)))\n       (^state k before)\n       return-value)\n\n\n\n\n\n\n(docs \"combines elements of array `arr` into a string, inserting\n`glue` string between each element.  if `glue` is omitted (only one\nargument provided), the elements of `arr` are joined with an empty\nstring\"\n\n      examples [ (join `[ a few words ]  \", \" )\n                 (join `[ several more words ]) ])\n\n(macro join (arr glue)\n       (if (and (defined? glue) (undefined? arr))\n           (assign arr glue glue undefined))\n       `(.join @arr @(or glue \"\\\"\\\"\")))\n\n\n(docs \"registers variables in `pairs` inside of the current scope using the javascript var keyword.\ndestructuring from arrays and objects is also supported, as shown in the examples\"\n      examples: [ (var a 1 b 2)\n                  (var a 1)\n                  (var a)\n                  (var {a} {a 1 b 2} c 3)\n                  (var a 1 [b c] [2 3]) ])\n\n(macro var (...pairs)\n       (var destructured [])\n       (bulk-map pairs (#(lhs rhs)\n                         (switch lhs.type\n                                 ('bracket\n                                  (var symbol (^symbol))\n                                  (destructured.push [symbol (transpile rhs)])\n                                  (each (item index) lhs.contents\n                                        (destructured.push [(transpile item) '(get @symbol @index)]))\n                                  (destructured.push [symbol 'undefined]))\n                                 ('brace\n                                  (var symbol (^symbol))\n                                  (destructured.push [symbol (transpile rhs)])\n                                  (each (item index) lhs.contents\n                                        (var tr-item (transpile item))\n                                        (destructured.push [tr-item '(get @symbol @[\"\\\"\" tr-item \"\\\"\"])]))\n                                  (destructured.push [symbol 'undefined]))\n\n                                 (default\n                                  (destructured.push [(transpile lhs)\n                                                       (if rhs (transpile rhs) 'undefined)])))))\n\n       (as-statement\n        [\"var \" (interleave \",\\n    \"\n           (map destructured\n                (#(pair)\n                  [(first pair) \" = \" (second pair)]\n                  )))]))\n\n(docs \"sets default values for variables in current scope. `pairs` are\nalternating variable names and default values\"\n      example (default a 10 b 20))\n(macro default (...pairs)\n       (interleave \"\\n\" (bulk-map pairs (#(name value)\n                                  '(assign @name (ternary (defined? @name) @name @value))))))\n\n\n(macro import-namespace (namespace)\n       (var namespace-as-string (output-formatter (transpile namespace)))\n       (unless (sibilant.macros.namespaces.has-own-property namespace-as-string)\n               (set sibilant.macros.namespaces namespace-as-string {}))\n       (sibilant.macros.search-path.unshift namespace-as-string)\n       undefined)\n\n\n(macro namespace (namespace)\n       `(import-namespace @namespace)\n       (set sibilant.macros 'namespace (get sibilant.macros.namespaces (output-formatter (transpile namespace))))\n       undefined)\n\n\n\n\n\n\n(docs \"checks if `object` has property `key`.  returns true or false.\"\n      example (has-key? object 'a))\n\n(macro has-key? (object key)\n       `(.has-own-property @object @key))\n\n\n\n\n\n\n\n(docs \"retreives object properties, potentially deeply. If more than one `keys` are provided,\n`get` fetches deeply into nested objects or arrays.\nWhen javascript dot notation can be used (`a.b = 3`), it is.\nOtherwise, bracket notation is used.\"\n      examples [ (get an-object 'static-attribute-name)\n                 (get object dynamic-attribute-name)\n                 (get object \"these attributes\" \"can't be dotted\")\n                 (get array 0)\n                 (get object 'a 'b c)\n                 (get array 0 1 2) ])\n\n\n(macro get (obj ...keys)\n       [(transpile obj)\n         (map keys (#(key)\n                     (var transpiled (transpile key)\n                          output (output-formatter transpiled))\n\n                     (if (match-regex? output \"^\\\"[a-zA-Z0-9]+\\\"$\")\n                         [\".\" (replace-all output \"\\\"\" \"\") ]\n                         [\"[\" transpiled \"]\"])))])\n\n\n\n\n\n\n\n\n\n\n(docs \"assigns object properties to `arr` in pairs, alternating between keys and values.\nWhen javascript dot notation can be used (`a.b = 3`), it is.  Otherwise, bracket notation is used\"\n      examples [ (set an-object 'static-attribute-name 'value)\n                 (set object dynamic-attribute-name \"key name determined at runtime\")\n                 (set array 0 \"first element of array\")\n                 (set object \"can't be dotted\" 'value)\n                 (set object 'first-attribute 'first-value\n                      'second-attribute 'second-value) ])\n\n(macro set (arr ...kv-pairs)\n       (interleave \"\\n\" (bulk-map kv-pairs (#(k v) `(assign (get @arr @k) @v)))))\n\n(docs \"checks if a string is identical to the lower-cased version of itself\"\n      example (lower-case? \"abc\"))\n(macro lower-case? (str)\n       `(= (.to-lower-case @str) @str))\n\n\n\n(docs \"checks if a string is identical to the upper-cased version of itself\"\n      example (lower-case? \"abc\"))\n(macro upper-case? (str)\n       `(= (.to-upper-case @str) @str))\n\n\n(docs \"inserts a pragma for source-mapping-url\"\n      example (source-mapping-url \"/example.map\"))\n\n(macro source-mapping-url (url)\n       [ \"//# sourceMappingURL=\" (|> url transpile output-formatter eval) \"\\n\" ])\n","(var sibilant exports\n     util     (require 'util)\n     path     (require 'path)\n     fs       (require 'fs)\n     error    (#(str) (throw str))\n     inspect  util.inspect)\n\n(set sibilant 'dir (process.cwd))\n\n\n(def sibilant.transpile-file (file-name)\n     (with-dir-and-file (path.dirname file-name) file-name\n                        (#>\n                         (var source (sibilant.strip-shebang\n                                      (fs.read-file-sync file-name \"utf8\")))\n\n                         (set sibilant.source-cache file-name source)\n                         (sibilant.initialize)\n                         (transpile (restructure (parse source))))))\n\n\n(def sibilant.sourcemap-file (file-name)\n     (with-dir-and-file (path.dirname file-name) file-name\n                        (#> (sourcemap\n                             (sibilant.strip-shebang\n                              (fs.read-file-sync file-name \"utf8\"))))))\n\n\n(set require.extensions \".sibilant\"\n     (#(module filename)\n       (var content (sibilant.sibilize-file filename))\n       (module.*compile content filename)))\n\n(set require.extensions \".son\"\n     (#(module filename)\n       (var content (sibilant.sibilize-json filename))\n       (set module 'exports (JSON.parse content))))\n\n\n(def sibilant.package-info ()\n     (var fs (require 'fs))\n     (JSON.parse (fs.read-file-sync\n                  (concat **dirname \"/../package.json\"))))\n\n(def sibilant.version-string ()\n     (var package (sibilant.package-info)\n          path (require 'path))\n     (concat package.name \" version \" package.version\n             \"\\n(at \" (path.join **dirname \"..\") \")\"))\n\n\n(def sibilant.initialize ()\n     (unless (or sibilant.loaded? sibilant.loading?)\n             (set sibilant 'loading? true)\n             (sibilant.load-macros)\n             (delete sibilant.loading?)\n             (set sibilant 'loaded? true)))\n     \n(def sibilant.load-macros ()\n     (sibilant.include (path.normalize (concat **dirname \"/../include/macros\"))))\n\n\n(def sibilant.include (file)\n     (when (not (file.match (regex \"\\\\.(sibilant|son)$\")))\n           (assign file (concat file \".sibilant\")))\n\n     (when (file.match (regex \"^\\\\.\\\\.?/\"))\n           (assign file (concat sibilant.dir \"/\" file)))\n\n     (var resolved-file\n          (try (require.resolve file)\n               (error (\"Failed to resolve file for inclusion: \" file))))\n\n     (sibilant.transpile-file resolved-file))\n","(def log! (...args)\n     (.for-each (inspect! ..args ) (#> (console.log #0))))\n\n(def inspect! (...args)\n     (args.map (#> (util.inspect #0 { colors false depth 3}))))\n\n(def color (code items depth)\n     (concat code (join items) \"\\033[0m\"))\n\n(def black (...args) (color \"\\033[0;30m\" args))\n(def red (...args) (color \"\\033[0;31m\" args))\n(def green (...args) (color \"\\033[0;32m\" args))\n(def brown (...args) (color \"\\033[0;33m\" args))\n(def blue (...args) (color \"\\033[0;34m\" args))\n(def purple (...args) (color \"\\033[0;35m\" args))\n(def cyan (...args) (color \"\\033[0;36m\" args))\n(def gray (...args) (color \"\\033[0;37m\" args))\n(def bold-gray (...args) (color \"\\033[1;30m\" args))\n(def bold-red (...args) (color \"\\033[1;31m\" args))\n(def bold-green (...args) (color \"\\033[1;32m\" args))\n(def yellow (...args) (color \"\\033[1;33m\" args))\n(def bold-blue (...args) (color \"\\033[1;34m\" args))\n(def bold-purple (...args) (color \"\\033[1;35m\" args))\n(def bold-cyan (...args) (color \"\\033[1;36m\" args))\n(def white (...args) (color \"\\033[1;37m\" args))\n","(include \"./colors.sibilant\")\n\n(def sibilant.pretty-print (node color entry)\n     (default entry true\n              color true)\n\n     (real-newlines (if (node? node) (do\n                       (var pretty-printer (or (get sibilant.pretty-print node.type)\n                                               sibilant.pretty-print.default))\n                       (pretty-printer node color entry))\n         (list? node)\n         (concat (if color (black \"[\") \"\")\n                 (pipe node\n                       (map (#-> (prettify color false)))\n                       (join (if color (black \",\") \"\")))\n                 (if color (black \"]\") \"\"))\n\n           color (red (inspect node))\n           (real-newlines (inspect node)))))\n\n(var prettify sibilant.pretty-print)\n\n(def sibilant.pretty-print.default (node color entry)\n     (real-newlines (sibilant.pretty-print.colorize node color\n      (concat\n       (if (and (not entry) node.preceding-ignored node.preceding-ignored.length)\n           (pipe node.preceding-ignored (map (#-> (prettify color false))) join)\n           \"\")\n\n       (if (and node.modifiers node.modifiers.length)\n           (pipe node.modifiers (map (#-> (prettify color false))) join)\n           \"\")\n\n       node.token\n\n       (if (and node.contents node.contents.length)\n           (pipe node.contents (map (#-> (prettify color false))) join)\n           \"\")\n\n       (if (and node.closing-ignored node.closing-ignored.length)\n           (pipe node.closing-ignored (map (#-> (prettify color false))) join)\n           \"\")\n\n       (or (and node.closed (get acceptable-pairs node.token))\n           \"\")))))\n\n(def sibilant.pretty-print.root (node color entry)\n     (pipe node.contents\n           (map (#-> (prettify color false)))\n           (join \"\\n\")))\n\n(def sibilant.pretty-print.output (node color)\n     (concat (if color (black \"{\") \"\")\n             (if (list? node.contents)\n                 (pipe node.contents\n                       (map (#> (sibilant.pretty-print.colorize node color (prettify #0 color false))))\n                       (join (if color (black \",\") \"\")))\n\n                 (sibilant.pretty-print.colorize node color node.contents))\n             (if color (black \"}\") \"\")))\n\n(def real-newlines (node)\n     (chain node (split \"\\\\n\") (join \"\\n\")))\n\n\n(def sibilant.pretty-print.colorize (node color string)\n     (if (not color) string\n         (= node.hint 'macro) (yellow string)\n         (node? node 'output) (purple string)\n         (green string)))\n\n","(def output-formatter (node)\n     (if (list? node)\n         (pipe node (map output-formatter) join)\n\n         (node? node 'output)\n         (output-formatter node.contents)\n\n         (or (string? node) (number? node)) node\n\n         (not (exists? node)) \"\"\n\n         (node? node) (do\n                       (console.log \"WE SHOULD NOT BE HERE\")\n                       (output-formatter (transpile node)))))\n\n(set sibilant 'output-formatter output-formatter)\n","(var source-node (get (require \"source-map\") 'Source-node))\n\n(def source-map (node)\n     (if\n      (node? node 'output)\n       (new source-node\n            node.source.line\n            node.source.col\n            node.source.file\n            (if (list? node.contents)\n                         (map node.contents source-map)\n                         (source-map node.contents)))\n\n       (or (string? node) (number? node)) (node.to-string)))\n\n\n(def sourcemapper (node)\n     (var source-nodes (pipe node transpile source-map)\n          map (pipe source-nodes .to-string-with-source-map (get 'map)))\n\n     (each key (keys sibilant.source-cache)\n           (map.set-source-content key (get sibilant.source-cache key)))\n\n     (map.to-string))\n","(def bulk-map (arr fn)\n  (var index 0\n          group-size fn.length\n          ret-arr [])\n\n  (while (< index arr.length)\n    (.push ret-arr\n          (apply fn (send arr slice\n                          index (+ index group-size))))\n    (incr-by index group-size))\n  ret-arr)\n\n(def inject (start items fn)\n  (var value start)\n  (when (list? items)\n    (each (item index) items\n      (assign value (fn value item index))))\n  value)\n\n(def map (items fn)\n  (inject [] items\n          (#(collector item index)\n            (send collector push (fn item index))\n            collector)))\n\n(def select (items fn)\n  (inject [] items\n          (#(collector item index)\n            (when (fn item index)\n              (send collector push item))\n            collector)))\n\n(def detect (items fn)\n  (var return-item undefined\n          index 0\n          items (or items []))\n\n  (until (or (= items.length index) return-item)\n         (when (fn (get items index) index)\n           (assign return-item (get items index)))\n         (incr index))\n\n  return-item)\n\n(def all? (items fn)\n     (undefined? (detect items (#(item index) (not (fn item index))))))\n\n(def none? (items fn)\n     (undefined? (detect items fn)))\n\n(def any? (items fn)\n     (defined? (detect items fn)))\n\n(def reject (items fn)\n  (var args [ items fn ])\n  (select items (thunk (not (apply fn arguments)))))\n\n(def compact (arr)\n     (select arr (#(item)\n                   (and\n                    (!= null item)\n                    (!= false item)\n                    (defined? item)))))\n\n(def interleave (glue arr)\n     (when (and (string? arr) (list? glue))\n           (var temp glue)\n           (assign glue arr\n                   arr temp))\n     \n     (if (list? glue) (inject [] arr\n             (#(collector item index)\n               (collector.concat [item (get glue index)])))\n\n         \n     (inject [(first arr)] (rest arr)\n             (#(collector item index) (collector.concat [glue item])))))\n\n\n(def flatten (...items)\n  (inject [] items\n          (#(collector item)\n            (collector.concat\n             (if (list? item)\n               (apply flatten item)\n               item)))))\n\n\n(def recurse-map (item fn)\n     (if (list? item) (map item (#(subitem) (recurse-map subitem fn)))\n         (fn item)))\n\n(def pluck (items attribute)\n     (map items (#(item) (get item attribute))))\n\n(def merge-into (into from)\n     (each (key) (keys from) (set into key (get from key)))\n     into)\n\n(def clone (object)\n     (inject {} (keys object)\n             (#(collector key)\n               (set collector key (get object key))\n               collector)))\n\n(def map-values (object fn)\n     (inject {} (keys object)\n             (#(collector key index)\n               (set collector key (fn (get object key) key))\n               collector)))\n\n(def merge-with (into from)\n     (merge-into (clone into) from))\n","(var parser {})\n(set sibilant 'parser parser)\n(set parser 'tokens\n     { 'regex              \"(\\\\/(\\\\\\\\\\\\\\/|[^\\\\/\\\\n])+\\\\/[glim]*)\"\n       'comment            \"(;.*)\"\n       'string             \"(\\\"(([^\\\"]|(\\\\\\\\\\\"))*[^\\\\\\\\])?\\\")\"\n       'number             \"(-?[0-9][0-9.,]*)\"\n       'literal            \"(-?[*.$a-zA-Z_][/*.a-zA-Z0-9-_]*(\\\\?|!)?)\"\n       'special            \"([&'])\"\n       'at                 \"@\"\n       'tick               \"[`']\"\n       'hat                \"(\\\\^)\"\n       'dots               \"(\\\\.+)\"\n       'arg-placeholder    \"(#[0-9]+)\"\n       'other-char         \"([\\\\|#><=!\\\\+\\\\/\\\\*-]+)\"\n       'open-expression    \"(\\\\(|\\\\{|\\\\[)\"\n       'close-expression    \"(\\\\)|\\\\}|\\\\])\"\n       'newline \"\\\\n\"\n       'whitespace \"\\\\s\"\n       'ignored \".\" })\n\n(set parser 'token-precedence  [ 'regex\n                                 'comment\n                                 'string\n                                 'number\n                                 'dots\n                                 'tick\n                                 'hat\n                                 'at\n                                 'special\n                                 'literal\n                                 'arg-placeholder\n                                 'other-char\n                                 'open-expression\n                                 'close-expression\n                                 'newline\n                                 'whitespace\n                                 'ignored\n                                 ]\n     'ordered-regexes (parser.token-precedence.map\n                       (#(x)\n                         (merge-into (regex (\"^\" (get parser.tokens x))) {name x}))))\n\n(var ordered-regexes parser.ordered-regexes)\n\n(set sibilant 'node-cache (or sibilant.node-cache {}))\n\n(def node-id (node)\n     (incr node-id.last-id))\n\n(def cache-node (node)\n     (var id (node-id node))\n     (set sibilant.node-cache id node)\n     (merge-into node {node-id id}))\n\n(set node-id 'last-id 0)\n\n(def parser.parse (string context)\n     (default context { position 0\n                        stack []\n                        line 1\n                        last-newline 0\n                        col 0 })\n     (var match true\n          regex-name null\n          remaining-input string)\n     \n     (while match\n            (detect ordered-regexes\n                    (#(r)\n                      (assign regex-name r.name\n                              match (r.exec remaining-input))))\n\n\n            (when (exists? match)\n                  (var match-string (first match)\n                       length (length match-string))\n                  \n                  (context.stack.push\n                   (cache-node { contents []\n                                 dir sibilant.dir\n                                 file sibilant.file\n                                 token match-string\n                                 type regex-name\n                                 start context.position\n                                 line context.line\n                                 col context.col\n                                 length length }))\n\n                  (if\n                   (= 'newline regex-name)\n                   (do\n                    (incr context.line)\n                    (set context\n                         'col 0\n                         'last-newline context.position))\n\n                   (and (= 'string regex-name)\n                        (includes? match-string \"\\n\"))\n                   (do\n                    (var string-newline-count (pipe match-string\n                                                    (.split \"\\n\")\n                                                    length\n                                                    (- 1)))\n\n                    (incr-by context.line string-newline-count)\n                    (set context 'col (- length (match-string.last-index-of \"\\n\"))))\n\n                   (incr-by context.col length))\n\n                  (incr-by context.position length)\n                  (assign remaining-input (if remaining-input.length\n                                              (remaining-input.slice length)\n                                              \"\"))))\n     context.stack)\n\n(var parse parser.parse)\n","(var restructurers {}\n     acceptable-pairs { \"(\" \")\" \"[\" \"]\" \"{\" \"}\" }\n     bracket-types { \"(\" 'expression\n                     \"[\" 'bracket\n                     \"{\" 'brace })\n\n(def restructure (input)\n     (var output { type 'root\n                   contents []\n                   file sibilant.file\n                   col 0\n                   line 1 }\n          context { parse-stack [output]\n                    output output\n                    input input\n                    ignored-tokens []\n                    specials 0 })\n\n     (inject context input\n             (#(context token index)\n               (var restructurer (or (get restructurers token.type) restructurers.default))\n               (restructurer token context index)))\n\n     (unless (= 1 (length context.parse-stack))\n             (throw (\"unclosed node: \" (prettify (first context.parse-stack) false))))\n\n     output)\n\n(set sibilant 'restructure restructure)\n\n(def restructurers.open-expression (token context)\n     (var first (first context.parse-stack))\n     (set token\n          'contents []\n          'type (get bracket-types token.token)\n          'parent first)\n     (accept-ignored-tokens token context)\n     (accept-specials token context)\n     (.push first.contents token)\n     (context.parse-stack.unshift token)\n     context)\n\n\n(def restructurers.close-expression (node context index)\n     (var first (first context.parse-stack))\n\n     (when (node? first 'root)\n           (throw (\"unexpected \" node.token \" on \"node.file\":\"node.line\":\"node.col)))\n     (when (!= (get acceptable-pairs first.token) node.token)\n           (throw (\"trying to close \" (yellow (sibilant.pretty-print first))\n                                      \"\\n   on \"first.file\":\"first.line\":\"first.col\n                                      \"\\n   with \"(sibilant.pretty-print node)\n                                      \"\\n   on \"node.file\":\"node.line\":\"node.col\n                                      \"\\n\")))\n\n     (set first\n          'end node.end\n          'closed true\n          'closing-ignored context.ignored-tokens)\n     (set context 'ignored-tokens [])\n\n     (context.parse-stack.shift)\n     (close-specials first context)\n     (when (zero? context.parse-stack.length)\n           (throw (\"unbalanced parens:\\n\"\n                   (call inspect parse-stack))))\n     context)\n\n(def open-special (node context)\n     (incr context.specials)\n\n     (accept-ignored-tokens node context)\n\n     (var first (first context.parse-stack))\n     (set node\n          'contents []\n          'parent first)\n\n     (first.contents.push node)\n     (context.parse-stack.unshift node)\n     context)\n\n(def accept-specials (node context)\n     (set node 'specials (get context 'specials))\n     (set context 'specials 0)\n     context)\n\n(def accept-ignored-tokens (node context)\n     (set node 'preceding-ignored context.ignored-tokens)\n     (set context 'ignored-tokens [])\n     context)\n\n(def close-specials (node context)\n     (when (> node.specials 0)\n           (decr node.specials)\n           (context.parse-stack.shift)\n           (close-specials node context))\n     context)\n\n\n(def accumulate-ignored-token (token context index)\n     (context.ignored-tokens.push token)\n     context)\n\n(each special `[ hat dots tick at ]\n      (set restructurers special open-special))\n\n(each ignored `[ whitespace newline ignored ]\n      (set restructurers ignored accumulate-ignored-token))\n\n(def restructurers.default (token context index)\n     (accept-specials token context)\n     (accept-ignored-tokens token context)\n     (pipe context\n           (get 'parse-stack)\n           (first)\n           (get 'contents)\n           (.push token))\n     (close-specials token context))\n","(var core-namespace {}\n     macro-namespaces { core core-namespace })\n(set sibilant\n     'state {}\n     'macros\n     { 'namespaces macro-namespaces\n       'default-search-path ['core]\n       'search-path ['core]\n       'namespace core-namespace })\n\n(var namespace sibilant.macros.namespace\n     macros sibilant.macros.namespace)\n\n(def sibilant.macros.current-namespace ()\n     (get sibilant.macros.namespaces (first sibilant.macros.search-path)))\n\n(def sibilant.resolve-macro (macro-name)\n     (if (and (includes? macro-name \"/\") (< 1 (length macro-name)) (not (includes? macro-name \"\\n\")))\n         (do (var path-components (macro-name.split \"/\")\n                  macro (and (has-key? sibilant.macros.namespaces (first path-components))\n                             (get sibilant.macros.namespaces (first path-components)\n                                  (join (rest path-components) \"/\"))))\n             (if macro macro\n                 (error (\"called namespaced macro \" macro-name\n                         \" but could not find namespace \" (first path-components)\n                         \". you might need to include the file that defines it first.\" ))))\n         (do\n          (var namespace (detect sibilant.macros.search-path\n                            (#(namespace)\n                              (has-key? (get sibilant.macros.namespaces namespace)\n                                        macro-name))))\n          (when namespace (get sibilant.macros.namespaces namespace macro-name)))))\n\n(def sibilant.with-default-search-path (fn)\n     (var search-path-before sibilant.macros.search-path)\n     (set sibilant.macros 'search-path sibilant.macros.default-search-path)\n     (var return-value (fn))\n     (set sibilant.macros 'search-path search-path-before)\n     return-value)\n     \n          \n","(def recurse-indent (...args)\n     (map args\n          (#(arg)\n            (if (node? arg) (merge-into arg { contents (apply recurse-indent (compact (flatten arg.contents))) })\n                (list? arg) (apply recurse-indent arg)\n                (number? arg) (arg.to-string)\n\n                (string? arg)\n                (chain arg\n                       (replace (regex \"\\\\n\" 'g) \"\\n  \")\n                       (replace (regex \"\\\\n\\\\s+\\\\n\" 'g) \"\\n\\n\"))\n\n                 arg))))\n\n(def indent (...args)\n     [\"\\n  \" (recurse-indent args) \"\\n\"])\n\n(def escape-regex (string)\n     (string.replace (regex \"[\\\\-\\\\[\\\\]\\\\/\\\\{\\\\}\\\\(\\\\)\\\\*\\\\+\\\\?\\\\.\\\\\\\\\\^\\\\$\\\\|]\" 'g) \"\\\\$&\"))\n\n(def qescape (content)\n     (if (not (exists? content)) \"\"\n         (string? content) (pipe content\n                                 (.split (first \"\\\\\\\\ \"))\n                                 (.join (.slice \"\\\\\\\\ \" 0 -1))\n                                 (replace-all \"\\\"\" \"\\\\\\\"\")\n                                 (replace-all \"\\\\n\" \"\\\\n\\\" +\\n\\\"\"))\n         content))\n\n(def map-node (node fn)\n     (if (node? node)\n         (do\n          (var mapped-node (fn node))\n          (when (node? mapped-node)\n                (set mapped-node 'contents (map-node mapped-node.contents fn)))\n\n          mapped-node)\n\n         (list? node) (map node (#> (map-node #0 fn)))\n         (fn node)))\n\n(def each-node (node fn)\n     (if (node? node) (when (fn node) (each-node node.contents fn))\n         (list? node) (each (c) node (each-node c fn))\n         (fn node)))\n\n(def statement? (transpiled)\n     (if (node? transpiled) (statement? transpiled.contents)\n         (list? transpiled) (statement? (last transpiled))\n         (string? transpiled) (= \";\" (last transpiled))\n         false))\n\n(def as-statement (node)\n     (var transpiled (transpile node))\n\n     (if (empty-node? transpiled) undefined\n         (statement? transpiled) transpiled\n         [ transpiled \";\" ]))\n\n(def unquote? (node) (node? node 'at))\n\n(def find-unquotes (node)\n     (var unquotes {})\n     (each-node node (#(n)\n                       (when (unquote? n)\n                             (set unquotes n.node-id (transpile n)))\n                       (not (node? n 'tick))))\n     unquotes)\n\n(def splice-dots (node)\n     (when (and node (list? node.contents))\n           (var contents [])\n           (each (content) node.contents\n                 (if (and (node? content 'dots)\n                          (list? content.contents)\n                          (= content.contents.length 1)\n                          (list? (first content.contents)))\n                      (contents.push.apply contents (first content.contents))\n                      (contents.push content)))\n\n           (set node 'contents contents))\n     node)\n\n\n(def alternating-keys-and-values (hash)\n     (flatten (map (keys hash)\n                   (#(key) [key, (get hash key)]))))\n\n\n(def map-node-for-quote-expansion (node expansions)\n     (if (node? node)\n         (do\n          (var mapped-node (if (expansions.has-own-property node.node-id) (get expansions node.node-id) (clone node)))\n          (when (node? mapped-node)\n                (set mapped-node 'contents (map-node-for-quote-expansion mapped-node.contents expansions)))\n\n          (assign mapped-node (splice-dots mapped-node))\n          mapped-node)\n\n         (list? node)\n           (map node (#> (map-node-for-quote-expansion #0 expansions)))\n\n         node))\n\n","(def sibilant.macros.namespaces.core.return (token)\n     (when sibilant.debug (console.log \"returning \" (prettify token)))\n     (var default-return (as-statement [\"return \" (transpile token)]))\n     (if (and token token.contents token.contents.length)\n         (switch (get (first token.contents) 'token)\n                 (('return 'throw 'do) (transpile token))\n\n                 ('delete\n                  (var delete-macro (get macros 'delete))\n                  (if (< token.contents.length 3) default-return\n                      [ (as-statement (apply delete-macro (token.contents.slice 1 -1)))\n                        \"\\nreturn \"\n                        (as-statement (call delete-macro (last token.contents)))]))\n\n                 ('assign\n                  (if (< token.contents.length 4) default-return\n                      [ (apply sibilant.macros.namespaces.core.assign\n                               (token.contents.slice 1 (- token.contents.length 2)))\n                        \"\\nreturn \"\n                        (apply sibilant.macros.namespaces.core.assign (token.contents.slice -2))]))\n\n                 ('var\n                  [ (transpile token) \"\\nreturn \" (transpile (if (even? token.contents.length)\n                                                                 (last token.contents)\n                                                                 (first (token.contents.slice -2))))])\n\n                 ('set\n                  (if (< token.contents.length 5) default-return\n                      (do\n                       (var obj (second token.contents)\n                            non-return-part (token.contents.slice 2 (- token.contents.length 2))\n                            return-part (token.contents.slice -2))\n                       (non-return-part.unshift obj)\n                       (return-part.unshift obj)\n                       [ (sibilant.macros.namespaces.core.set ...non-return-part)\n                         \"\\nreturn \"\n                         (sibilant.macros.namespaces.core.set ...return-part)])))\n\n                 (default default-return))\n         default-return))\n\n\n(def sibilant.macros.namespaces.core.do (...body)\n     (if (= 1 body.length) (sibilant.macros.namespaces.core.return (first body))\n\n         body.length [ (interleave \"\\n\" (map (body.slice 0 -1) (#> (as-statement #0))))\n                       \"\\n\"\n                       (sibilant.macros.namespaces.core.return (last body)) ]\n         \"\"))\n\n(def sibilant.macros.namespaces.core.empty-list () 'null)\n\n(def sibilant.macros.namespaces.core.def (fn-name args ...body)\n     (if (undefined? fn-name) (error \"invalid function definition. missing name.\")\n         (undefined? args) (error \"invalid function definition. missing arguments or return value.\"))\n\n     (var fn-name-tr (transpile fn-name) this-node this)\n     (sibilant.docs.record (\"function \" (prettify fn-name false)) this)\n\n     (as-statement [ (if (match? (regex \"\\\\.\") (output-formatter fn-name-tr)) \"\" \"var \")\n                     fn-name-tr \" = \"\n                     (sibilant.macros.namespaces.core.lambda { name fn-name args args node this-node } ...body )\n                     ] ))\n\n(def sibilant.macros.namespaces.core.macro (name args ...body)\n     (var name-tr (output-formatter (transpile name))\n          options { name name args args node this}\n          js (output-formatter (sibilant.macros.namespaces.core.lambda options ...body)))\n\n     (when sibilant.debug (console.log js))\n\n     (sibilant.docs.record (\"macro \" (first sibilant.macros.search-path) \"/\" (prettify name false)) this)\n     \n     (try (set sibilant.macros.namespace name-tr (eval js))\n          (error (\"error in parsing macro \"\n                  (sibilant.pretty-print name) \":\\n\" js)))\n\n     undefined)\n\n(def sibilant.macros.namespaces.core.meta (...body)\n     (var js (output-formatter (sibilant.macros.namespaces.core.scoped ...body)))\n     (when sibilant.debug (console.log js))\n     (output-formatter (eval js)))\n\n\n(def sibilant.macros.namespaces.core.concat (...args)\n     [\"(\" (interleave \" + \" (map args transpile)) \")\"])\n\n(def sibilant.macros.namespaces.core.reverse (arr)\n     (var reversed [])\n     (each (item) arr (reversed.unshift item))\n     reversed)\n\n(var reverse sibilant.macros.namespaces.core.reverse)\n\n(def sibilant.macros.namespaces.core.lambda (args-or-options ...body)\n     (when sibilant.debug\n           (console.log args-or-options))\n     (var args (or (get args-or-options 'args) args-or-options)\n          body (or (get args-or-options 'body) body)\n          args (if (node? args 'expression) args.contents\n                   (and (node? args) (empty? body)) (do (assign body [ args ]) [])\n                   args)\n          name (when args-or-options.name\n                     (chain (output-formatter (transpile args-or-options.name))\n                            (replace (regex \"\\\\W+\" 'g) \"$\")\n                            (concat \"$\")))\n          rest (detect args\n                       (#> (node? #0 'dots))))\n\n     (var this-node this\n          node (detect\n                [ args-or-options.node this-node args-or-options.name args (first body) ]\n                (#(n) (and (node? n) (get n 'file)))))\n     [\"(function\" (if name (\" \" name) \"\") \"(\"\n       (interleave \", \" (map args transpile)) \") {\"\n       (if (or args-or-options.name node)\n           (indent [\"/*\"\n                     (if args-or-options.name (\" \" (sibilant.pretty-print args-or-options.name false)) \"\")\n                     (if node (\" \" node.file \":\" node.line \":\" node.col) \"\")\n                     \" */\"]) \"\")\n       (when (exists? rest)\n             (indent (as-statement [\"var \" (transpile rest)\n                       \" = Array.prototype.slice.call(arguments, \"\n                       (- args.length 1) \")\"])))\n\n       (indent (apply sibilant.macros.namespaces.core.do body))\n       \"})\"])\n\n(set sibilant.macros.namespaces.core \"#\" sibilant.macros.namespaces.core.lambda)\n\n(def sibilant.macros.namespaces.core.quoted-hash (...pairs)\n     (var cached-quote-value sibilant.macros.namespaces.core.hash.quote-keys)\n     (set sibilant.macros.namespaces.core.hash 'quote-keys true)\n     (var value (sibilant.macros.namespaces.core.hash ...pairs))\n     (set sibilant.macros.namespaces.core.hash 'quote-keys cached-quote-value)\n     value)\n\n(def sibilant.macros.namespaces.core.hash (...pairs)\n     (when (odd? pairs.length)\n           (error (\"odd number of key-value pairs in hash: \"\n                   (call inspect pairs))))\n\n     (var quote-keys sibilant.macros.namespaces.core.hash.quote-keys\n          pair-strings (bulk-map pairs (#(key value)\n                                         [ (if (and quote-keys (not (node? key 'string)))\n                                               [\"\\\"\" (transpile key) \"\\\"\"]\n                                               (transpile key))\n                                           \": \"\n                                           (transpile value)])))\n     (if (>= 1 pair-strings.length)\n         [\"{ \" (interleave \", \" pair-strings) \" }\"]\n         [\"{\" (indent (interleave \",\\n\" pair-strings)) \"}\"]))\n\n\n(def sibilant.macros.namespaces.core.quote (content)\n     (if (string? content) (\"\\\"\" (qescape content) \"\\\"\")\n         (number? content) (sibilant.macros.namespaces.core.quote (content.to-string))\n         (node? content 'literal) [\"\\\"\" (transpile content) \"\\\"\"]\n         \n         (node? content 'expression)\n         (if (length (keys (find-unquotes content)))\n             (sibilant.macros.namespaces.core.call 'macros.expand-quote.call 'this (sibilant.macros.namespaces.core.quote content.node-id)\n                    (apply sibilant.macros.namespaces.core.quoted-hash (alternating-keys-and-values (find-unquotes content))))\n             [\"\\\"\" (map-node (transpile content) qescape) \"\\\"\"])\n\n         (node? content 'bracket)\n         (if (length (keys (find-unquotes content)))\n             (sibilant.macros.namespaces.core.call 'macros.expand-quote.call 'this (sibilant.macros.namespaces.core.quote content.node-id)\n                    (apply sibilant.macros.namespaces.core.quoted-hash (alternating-keys-and-values (find-unquotes content))))\n             (sibilant.macros.namespaces.core.list ...(map content.contents sibilant.macros.namespaces.core.quote)))\n\n         (node? content 'brace)\n         (if (length (keys (find-unquotes content)))\n             (sibilant.macros.namespaces.core.call 'macros.expand-quote.call 'this (sibilant.macros.namespaces.core.quote content.node-id)\n                    (apply sibilant.macros.namespaces.core.quoted-hash (alternating-keys-and-values (find-unquotes content))))\n             (sibilant.macros.namespaces.core.hash ...(map content.contents sibilant.macros.namespaces.core.quote)))\n\n         (do\n          (console.log (\"unknown content\" (prettify content)))\n          content)))\n\n(def sibilant.macros.namespaces.core.debug (val)\n     (set sibilant 'debug (eval (output-formatter (transpile val)))) null)\n\n(def sibilant.macros.namespaces.core.expand-quote (node-id expansions)\n     (var expanded-nodes\n          (map-node-for-quote-expansion (get sibilant.node-cache node-id) expansions))\n\n     (transpile expanded-nodes))\n\n\n(def sibilant.macros.namespaces.core.list (...args)\n       (var arg-segments [])\n       (if (empty? args) \"[]\"\n           (do\n            (def simple-list (args)\n                 [\"[ \" (interleave \", \" (map args (#(arg) arg.transpiled))) \" ]\"])\n\n            (args.for-each (#(arg)\n                  (if (node? arg 'dots) (arg-segments.push {transpiled (transpile arg)})\n                   (list? (last arg-segments)) (.push (last arg-segments) { transpiled (transpile arg)})\n                   (arg-segments.push [{transpiled (transpile arg)}]))))\n\n            (assign arg-segments (map arg-segments\n                                      (#(segment)\n                                        (if (list? segment)\n                                            (simple-list segment)\n                                            segment.transpiled))))\n\n            (if (= 1 (length arg-segments))\n                (first arg-segments)\n                [(first arg-segments) \".concat(\" (interleave \", \" (rest arg-segments))\")\"]))))\n\n\n(def sibilant.macros.namespaces.core.call (fn-name ...args)\n     (if (any? args (#> (node? #0 'dots)))\n           (macros.apply fn-name (macros.list ...args))\n           [ (transpile fn-name)\n                   \"(\" (interleave \", \" (map args transpile)) \")\" ]))\n\n(def sibilant.macros.namespaces.core.dots (...contents)\n     (transpile contents))\n\n(def sibilant.macros.namespaces.core.include (...files)\n     (pipe files\n           (.map (#(file)\n                   (sibilant.with-default-search-path\n                    (#> (pipe file\n                              transpile\n                              output-formatter\n                              eval\n                              sibilant.include)))))\n           (interleave \"\\n\")))\n\n\n(def sibilant.macros.namespaces.core.docs (...options)\n     (var options-string undefined\n          options-hash {})\n\n     (when (odd? options.length)\n           (if (or (node? (first options) 'string) (string? (first options)))\n               (assign options-string (options.shift))\n\n               (or (node? (last options) 'string) (string? (last options)))\n               (assign options-string  (options.pop))))\n\n     (bulk-map options (#(key value)\n                         (set options-hash (pipe key transpile output-formatter) value)))\n\n     (each (list-attribute) `[ examples references ]\n           (when (and (has-key? options-hash list-attribute)\n                      (node? (get options-hash list-attribute) 'bracket))\n                 (set options-hash list-attribute\n                      (get options-hash list-attribute 'contents))))\n     \n     (when (has-key? options-hash 'example)\n           (when (has-key? options-hash 'examples) (error \"please provide example OR examples, not both\"))\n           (set options-hash 'examples [options-hash.example])\n           (delete options-hash.example))\n\n\n     (if (node? options-string 'string)\n           (set options-hash 'doc-string (pipe options-string\n                                               transpile\n                                               output-formatter\n                                               eval))\n           (string? options-string) (set options-hash 'doc-string options-string))\n\n     (set sibilant.docs 'last-doc options-hash)\n     null)\n","(def node? (thing ...types)\n     (and\n      (exists? thing)\n      (= 'object (typeof thing))\n      (string? thing.type)\n      (or (empty? types) (includes? types thing.type))\n      (has-key? thing 'contents)))\n\n(def empty-node? (item)\n     (if (node? item) (empty-node? item.contents)\n         (list? item) (all? item empty-node?)\n         (string? item) (item.match (regex \"^\\\\s*$\"))\n         (or (= null item)\n             (undefined? item)\n             (= false item))))\n\n(def compact-node (item)\n     (if (node? item) (do\n                       (set item 'contents (compact-node item.contents))\n                       (if (and item.contents item.contents.length) item null))\n         (list? item) (do\n                       (var compacted (compact (map item compact-node)))\n                       (if (and compacted compacted.length) compacted null))\n         (if (or (= item \"\") (= item false)) null item)))\n\n(def recurse-transpile (node)\n     (if (list? node)\n         (map node recurse-transpile)\n\n         (node? node 'output)\n         (merge-into node { contents: (recurse-transpile node.contents) })\n\n         (node? node)\n         (transpile node)\n\n         node))\n\n(def transpile (node preprocessor)\n     (if\n      (string? node)\n      (assign node { type 'js token node contents []})\n\n      (number? node)\n      (assign node { type 'number token (node.to-string) contents []}))\n     \n     (if (list? node) node\n         (exists? node) (do\n                         (var transpiler (or (get transpile node.type) transpile.default)\n                              result (transpiler node)\n                              result-node (recurse-transpile (if (node? result) result\n                                                                 { contents result\n                                                                   type 'output })))\n                         (set result-node\n                              'contents (compact (flatten result-node.contents))\n                              'source node)\n\n                         (when sibilant.debug\n                               (console.log (prettify node)\n                                            (red \"->\")\n                                            (prettify result-node)))\n\n                         (set node 'transpiled result-node)\n\n                         (if (empty-node? result-node) undefined\n                             result-node))))\n\n\n(set sibilant 'transpile transpile)\n\n(var reader-macros {})\n\n(def transpile.hat (node)\n     (var token (get (first node.contents) 'token)\n          [ namespace macro ] (if (match-regex? token \"\\/\")\n                                  (token.split \"/\")\n                                  [ (first sibilant.macros.search-path) token ]))\n\n     (sibilant.macros.namespaces.core.get.call node\n                                               'sibilant.macros.namespaces\n                                               (^quote (transpile.literal {token namespace}))\n                                               (^quote (transpile.literal {token macro}))))\n\n(def transpile.tick (node)\n     (sibilant.macros.namespaces.core.quote.apply node node.contents))\n\n(def transpile.at (node)\n     (transpile (first node.contents)))\n\n(def transpile.dots (node)\n     (sibilant.macros.namespaces.core.dots.apply node node.contents))\n\n(def transpile.default (node)\n     node.token)\n\n(def transpile.output (node)\n     node)\n\n(def transpile.number (node)\n     (pipe (regex \",\" 'g)\n           (node.token.replace \"\")\n           (parse-float)\n           (.to-string)))\n\n(def transpile.root (node)\n     (if (= 1 node.contents.length)\n         (transpile (first node.contents))\n         (pipe node.contents\n               (map as-statement)\n               (compact)\n               (interleave \"\\n\"))))\n\n\n(def transpile.expression (node preprocessor)\n     (if node.contents.length\n         (do\n          (var head (first node.contents)\n               args node.contents\n               macro (sibilant.resolve-macro 'call))\n\n          (if (node? head 'string)\n              (assign macro (sibilant.resolve-macro 'concat))\n\n              (node? head 'dots)\n              (assign macro (sibilant.resolve-macro 'send)\n                      args [ (second node.contents) (first head.contents) ...(.slice node.contents 2) ])\n\n              (node? head 'literal 'other-char)\n              (do\n               (var resolved-macro (sibilant.resolve-macro (output-formatter (transpile head))))\n               (when resolved-macro\n                     (set head 'hint 'macro)\n                     (assign macro resolved-macro\n                             args (rest node.contents)))))\n\n          (macro.apply node args))\n\n         \"null\"))\n\n(def transpile.bracket (node)\n     (apply sibilant.macros.namespaces.core.list node.contents))\n\n(def transpile.brace (node) (apply sibilant.macros.namespaces.core.hash node.contents))\n\n(def transpile.literal (node)\n     (var string node.token)\n     (inject (chain string\n                    (replace (regex \"\\\\*\" 'g) \"_\")\n                    (replace (regex \"\\\\?$\") \"__QUERY\")\n                    (replace (regex \"!$\") \"__BANG\"))\n             (string.match (regex \"-(.)\" 'g))\n             (#(return-string match)\n               (return-string.replace match\n                                      (.to-upper-case (second match))))))\n\n(def transpile.string (node)\n     (chain node.token\n            (split \"\\n\")\n            (join \"\\\\n\\\" +\\n\\\"\")))\n\n(def transpile.comment (node) null)\n\n","(var docs (set sibilant 'docs { definitions []\n                                undocumented {} }))\n\n(def docs.record (name node)\n     (var doc docs.last-doc)\n     (if (defined? doc)\n         (do\n          (delete (get sibilant.docs.undocumented name))\n          (sibilant.docs.definitions.push (merge-into doc { name name definition node })))\n         (set sibilant.docs.undocumented name true))\n     (delete sibilant.docs.last-doc))\n\n(def docs.text ()\n     (pipe docs.definitions\n           (.map (#(definition)\n                   (\"name: \" definition.name \"\\n\"\n                             \"description: \" definition.doc-string \"\\n\"\n                             (if definition.references (\"references:\\n\" (pipe definition\n                                                                              (get 'references)\n                                                                              (.map (#-> (transpile) (output-formatter) (eval)))\n                                                                              (.join \"\\n\")\n                                                                              (concat \"\\n\")))\n                                 \"\")\n                             \"arguments: \" (pipe definition.definition.contents\n                                                 (third)\n                                                 (prettify)) \"\\n\"\n                                                 \"examples: \\n\" (pipe definition.examples\n                                                                      (map (#> (concat (prettify #0 true)\n                                                                                       \"\\n\"\n                                                                                       (pipe #0\n                                                                                             (transpile)\n                                                                                             (output-formatter)))))\n                                                                      (.join \"\\n\\n\")) \"\\n\\n\")))\n           (.join \"\")))\n\n(def docs.json ()\n     (JSON.stringify (docs.data)))\n\n(def docs.data ()\n     (docs.definitions.map\n                      (#(definition)\n                        { name definition.name\n                          description definition.doc-string\n                          references (if definition.references\n                                         (definition.references.map (#-> (get 'token) (.slice 1 -1)))\n                                         [])\n                          arguments (pipe definition.definition.contents\n                                          (third)\n                                          (get 'contents)\n                                          (.map (#-> (transpile) (output-formatter))))\n                          definition (prettify definition.definition false)\n                          examples: (|> definition.examples (or []) (.map (#>\n                                                                           { javascript (pipe #0 transpile output-formatter)\n                                                                             sibilant (prettify #0 false) })))\n                          })))\n","(def sibilize (input)\n     (sibilant.initialize)\n     (output-formatter (transpile (restructure (parse input)))))\n\n(def sourcemap (input)\n     (sibilant.initialize)\n     (sourcemapper (transpile (restructure (parse input)))))\n\n(set sibilant 'sibilize sibilize)\n\n(def sibilant.version ()\n     (get (sibilant.package-info) 'version))\n\n(def sibilant.strip-shebang (data)\n     (data.replace (regex \"^#!.*\\\\n\") \"\\n\"))\n\n(set sibilant 'file 'eval.sibilant)\n\n(def with-dir-and-file (dir file fn)\n     (var before { dir sibilant.dir\n                   file sibilant.file })\n     (set sibilant\n          'dir  dir\n          'file file)\n\n     (var retval (fn))\n\n     (set sibilant\n          'dir  before.dir\n          'file before.file)\n\n     retval)\n\n(set sibilant 'source-cache {})\n\n(def sibilant.sibilize-file (file-name)\n     (pipe file-name (sibilant.transpile-file) (output-formatter)))\n\n(def sibilant.sibilize-json (file-name)\n     (sibilant.initialize)\n     (var before sibilant.macros.namespaces.core.hash.quote-keys)\n     (set sibilant.macros.namespaces.core.hash 'quote-keys true)\n     (var content (sibilant.sibilize-file file-name))\n     (set sibilant.macros.namespaces.core.hash 'quote-keys before)\n     content)\n\n"]}