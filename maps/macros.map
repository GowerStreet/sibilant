{"version":3,"sources":["/Users/jbr/code/sibilant/src/macros.sibilant","/Users/jbr/code/sibilant-clean/include/macros.sibilant","/Users/jbr/code/sibilant/include/macros.sibilant"],"names":[],"mappings":"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AX,CAAF,EAAmB,MAAnB,EAA2B,SAAD,CAAW,SAAX,CAA1B,EF/KU;AAAA,EC2jCmC,CCtmCpD;AFyCiB,0BAAL,KC6jCgD,KAAR,GD3jCnC,gBEuLJ,IFvLI;AAAA;AAAA;AAAA,SEwLV,EAAC,IAAD,EAAO,SAAD,CAAW,IAAX,CAAN,EAAuB,MAAvB,EFxLU;AAAA,EC2jCmC,CCtmCpD;AFyCiB,0BAAL,KC6jCgD,KAAR,GD3jCnC,gBE8LJ,IF9LI;AAAA;AAAA;AAAA,SE8LE,EAAC,IAAD,EAAO,SAAD,CAAW,IAAX,CAAN,EAAuB,MAAvB,EF9LF;AAAA,EC2jCmC,CCtmCpD;AFyCiB,0BAAL,KC6jCgD,IAAR,GD3jCnC,eEqML,WFrMK,EEqMU,IFrMV;AAAA;AAAA;AAAA,MEqMU,IFrMV;AAAA;AAAA,SEsMV,EAAC,OAAD,E,gDAAS,C,IAAA,E,oiEAAA;AAAA,K,MAAA,G,WAAA;AAAA,K,MAAA,G,IAAA;AAAA,IAAT,EAAuC,GAAvC,EFtMU;AAAA,EC2jCmC,CCtmCpD;AFyCiB,0BAAL,KC6jCgD,MAAR,GD3jCnC,iBE6MH,OF7MG,EE6MK,KF7ML;AAAA;AAAA;AAAA,S,gDE8MV,C,IAAA,E,koHAAA;AAAA,K,MAAA,G,OAAA;AAAA,K,MAAA,G,CAA2B,K,IAAM,CAAC,SAAD,C,CAAjC;AAAA,IF9MU;AAAA,EC2jCmC,CCtmCpD;AFyCiB,0BAAL,KC6jCgD,CD5jC3C,CEsNV,WFtNU,CC4jC2C,CAAR,GD3jCnC,uBEqNH,IFrNG;AAAA;AAAA;AAAA,S,gDEqNG,C,IAAA,E,2lDAAA,K,MAAA,G,IAAA,GFrNH;AAAA,EC2jCmC,CCtmCpD;AFyCiB,0BAAL,KC6jCgD,CD5jC3C,CE4NV,YF5NU,CC4jC2C,CAAR,GD3jCnC,wBE2NF,GF3NE;AAAA;AAAA;AAAA,S,gDE4NV,C,IAAA,E,6yEAAA,K,MAAA,G,GAAA,GF5NU;AAAA,EC2jCmC,CCtmCpD;AFyCiB,0BAAL,KC6jCgD,CD5jC3C,CEmOV,UFnOU,CC4jC2C,CAAR,GD3jCnC,sBEkOJ,MFlOI;AAAA;AAAA;AAAA,S,gDEmOV,C,IAAA,E,yuFAAA,K,MAAA,G,MAAA,GFnOU;AAAA,EC2jCmC,CCtmCpD;AFyCiB,0BAAL,KC6jCgD,CD5jC3C,CE0OV,WF1OU,CC4jC2C,CAAR,GD3jCnC,uBEyOH,MFzOG;AAAA;AAAA;AAAA,S,gDE0OV,C,IAAA,E,yuFAAA,K,MAAA,G,MAAA,GF1OU;AAAA,EC2jCmC,CCtmCpD;AFyCiB,0BAAL,KC6jCgD,OAAR,GD3jCnC,kBEiPF,KFjPE;AAAA;AAAA;AAAA,SEiPK,EAAC,SAAD,EAAY,SAAD,CAAW,KAAX,CAAX,EFjPL;AAAA,EC2jCmC,CCtmCpD;AFyCiB,0BAAL,KC6jCgD,CD5jC3C,CEwPV,aFxPU,CC4jC2C,CAAR,GD3jCnC,yBEuPE,MFvPF;AAAA;AAAA;AAAA,MEuPE,MFvPF;AAAA;AAAA,S,gDEwPV,C,IAAA,E,0vMAAA,K,MAAA,GAAW,G,CAAI,M,EAAO,UAAG,KAAH;AAAA;AAAA;AAAA,W,gDAAU,C,IAAA,E,qhFAAA,K,MAAA,G,KAAA,GAAV;AAAA,I,CAAtB,GFxPU;AAAA,EC2jCmC,CCtmCpD;AFyCiB,0BAAL,KC6jCgD,CD5jC3C,CE+PV,eF/PU,CC4jC2C,CAAR,GD3jCnC,2BE8PI,MF9PJ;AAAA;AAAA;AAAA,ME8PI,MF9PJ;AAAA;AAAA,S,gDE+PV,C,IAAA,E,4vMAAA,K,MAAA,GAAW,G,CAAI,M,EAAO,UAAG,KAAH;AAAA;AAAA;AAAA,W,gDAAU,C,IAAA,E,uhFAAA,K,MAAA,G,KAAA,GAAV;AAAA,I,CAAtB,GF/PU;AAAA,EC2jCmC,CCtmCpD;AFyCiB,0BAAL,KC6jCgD,CD5jC3C,CEyQV,gBFzQU,CC4jC2C,CAAR,GD3jCnC,4BEwQK,MFxQL;AAAA;AAAA;AAAA,MEwQK,MFxQL;AAAA;AAAA,S,gDEyQV,C,IAAA,E,6vMAAA,K,MAAA,GAAW,G,CAAI,M,EAAO,UAAG,KAAH;AAAA;AAAA;AAAA,W,gDAAU,C,IAAA,E,whFAAA,K,MAAA,G,KAAA,GAAV;AAAA,I,CAAtB,GFzQU;AAAA,EC2jCmC,CCtmCpD;AFyCiB,0BAAL,KC6jCgD,CD5jC3C,CEkRV,cFlRU,CC4jC2C,CAAR,GD3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","sourcesContent":["(var core-namespace {}\n     macro-namespaces { core core-namespace })\n(set sibilant\n     'state {}\n     'macros\n     { 'namespaces macro-namespaces\n       'default-search-path ['core]\n       'search-path ['core]\n       'namespace core-namespace })\n\n(var namespace sibilant.macros.namespace\n     macros sibilant.macros.namespace)\n\n(def sibilant.macros.current-namespace ()\n     (get sibilant.macros.namespaces (first sibilant.macros.search-path)))\n\n(def sibilant.resolve-macro (macro-name)\n     (if (and (includes? macro-name \"/\") (< 1 (length macro-name)) (not (includes? macro-name \"\\n\")))\n         (do (var path-components (macro-name.split \"/\")\n                  macro (and (has-key? sibilant.macros.namespaces (first path-components))\n                             (get sibilant.macros.namespaces (first path-components)\n                                  (join (rest path-components) \"/\"))))\n             (if macro macro\n                 (error (\"called namespaced macro \" macro-name\n                                                    \" but could not find namespace \" (first path-components)\n                                                    \". you might need to include the file that defines it first.\" ))))\n         (do\n          (var namespace (detect sibilant.macros.search-path\n                                 (#(namespace)\n                                   (has-key? (get sibilant.macros.namespaces namespace)\n                                             macro-name))))\n          (when namespace (get sibilant.macros.namespaces namespace macro-name)))))\n\n(def sibilant.with-default-search-path (fn)\n     (var search-path-before sibilant.macros.search-path)\n     (set sibilant.macros 'search-path sibilant.macros.default-search-path)\n     (var return-value (fn))\n     (set sibilant.macros 'search-path search-path-before)\n     return-value)\n\n(macro compile-macro (name args ...body)\n       `(|> (get sibilant.macros.namespaces (quote @(first sibilant.macros.search-path)))\n            (set (quote @name)\n                 (lambda @{ name name\n                            body body\n                            args args\n                            node this }))))\n\n(macro compile-alias-macro (from to)\n       (var namespace `(get sibilant.macros.namespaces (quote @(first sibilant.macros.search-path))))\n       `(set @namespace (quote @to) (get @namespace (quote @from))))\n\n(alias-macro alias-macro alias-macro-prior)\n(alias-macro macro macro-prior)\n\n(alias-macro compile-macro macro)\n(alias-macro compile-alias-macro alias-macro)\n(include \"../include/macros.sibilant\")\n(alias-macro macro-prior macro)\n(alias-macro-prior alias-macro-prior alias-macro)\n","(namespace core)\n\n(docs \"the simplest way to conditionally execute code.\"\n      tags [ conditional flow-control ]\n      example (ternary (< 50 100)\n         \"fifty is less than 100\"\n         \"fifty is more than 100\"))\n\n(macro ternary (cond if-true if-false)\n       [\"(\" (transpile cond) \") ? \"\n            (transpile if-true) \" : \"\n            (transpile if-false)])\n\n\n\n\n\n;; nodoc\n(macro set (arr ...kv-pairs)\n       (interleave \"\\n\" (bulk-map kv-pairs\n                                  (#(k v)\n                                    (as-statement [\"(\" (transpile arr) \")\"\n                                                    \"[\" (transpile k) \"] = \" (transpile v) ])))))\n;; nodoc\n(macro var (...pairs)\n       (as-statement\n        [\"var \"\n         (interleave \",\\n    \"\n               (bulk-map pairs\n                         (#(name value)\n                           [ (transpile name) \" = \" (transpile value) ])))\n         ]))\n\n;; nodoc\n(macro get (obj ...keys)\n       [\"(\" (transpile obj) \")\" (map keys (#(key)\n                                            [\"[\" (transpile key) \"]\"]))])\n\n\n\n\n\n(docs \"stores a duplicate copy of `current-macro-name` as\n`new-macro-name` in current namespace.  No output.\"\n      tags [macros])\n\n(macro alias-macro (current-macro-name new-macro-name)\n       (var current-macro-name (output-formatter (transpile current-macro-name))\n            new-macro-name (output-formatter (transpile new-macro-name)))\n       (set sibilant.macros.namespace\n            new-macro-name (get sibilant.macros.namespace current-macro-name))\n       null)\n\n\n\n\n\n(docs \"calls the `method` on `object` as a function with `args` as the arguments\"\n      tags [ functions ]\n      example (send object method first-argument second-argument third-argument))\n\n(macro send (object method ...args)\n       [(transpile object) \".\" (transpile method)\n               \"(\" (interleave \", \" (map args transpile)) \")\"])\n\n\n\n\n\n(docs \"calls the function `fn` with arguments passed as an array in `arglist`\"\n      tags [functions]\n      example (apply my-function [ first-arg second-arg third-arg ]))\n\n(macro apply (fn arglist)\n       '(.apply @fn this @arglist))\n\n\n\n\n(docs \"builds an array with `first` as the zeroth index and the\nelements provided by array `rest` as the subsequent elements, as\nsiblings with `first`.\"\n      tags [arrays collections deprecated]\n      example (cons 1 [ 2 3 4 ]))\n\n(macro cons (first rest)\n       [\"[ \" (transpile first) \" ].concat(\" (transpile rest) \")\"])\n\n\n\n\n(docs \"adds `additional` elements onto the right-side (tail) of `list`. deprecated\"\n      tags [ arrays collections deprecated ]\n      example (append [ 1 2 3 ] 4 5 6))\n(macro append (list ...additional)\n       '(.concat @list (list ...@additional)))\n\n\n(docs \"fetches length attribute from `arr`\"\n      tags [ arrays collections ]\n      example (length [ 1 2 3 ]))\n(macro length (arr)\n       '(get @arr 'length))\n\n(docs \"executes the `body` inside of a self-executing function. The\nlast statement/expression of the body is returned.\"\n      tags [functions]\n      examples [(scoped true) (scoped (var a 1) (+ a 2))])\n(macro scoped (...body)\n       '(.call (lambda @{node this args []} ...@body) this))\n\n;;nodoc\n(macro *scoped-without-source (...body)\n       [\"(function() {\" (indent '(do ...@body)) \"}).call(this)\"])\n\n(macro *number-words (...number-words)\n       (.for-each number-words (#(word index)\n                                 `(docs @(\"fetches the \"(output-formatter (transpile word))\" element from `arr`\")\n                                        tags [arrays collections]\n                                        example (@word my-array))\n                                 `(macro @word (arr) (var index @index) `(get @arr @index)))))\n(*number-words first second third fourth fifth sixth seventh eighth ninth)\n(delete-macro *number-words)\n\n\n(docs \"fetches all but the first item of `arr`\"\n      tags [arrays collections]\n      example (rest [ 1 2 3 ]))\n(macro rest (arr) '(.slice @arr 1))\n\n(docs \"fetches just the last element of `arr` by slicing.\"\n      tags [arrays collections]\n      example (last [ 1 2 3 ]))\n(macro last (arr) '(first (.slice @arr -1)))\n\n;;nodoc\n(macro = (a b) [ (transpile a) \" === \" (transpile b) ])\n\n(docs \"adds `args` using the javascript `+` operator. Since javascript\noverloads this for string concatenation, this macro can be used for\nthis as well.\"\n      tags [ strings numbers ]\n      examples [ (+ 1 2 3) (+ 'hello 'world) ])\n(macro +   (...args)\n       [\"(\" (interleave \" + \" (map args transpile)) \")\"])\n\n\n(docs \"subtracts each subsequent element of `args`\"\n      tags [numbers]\n      examples [ (- 2 1) (- 10 5 1) ])\n(macro -   (...args)\n       [\"(\" (interleave \" - \" (map args transpile)) \")\"])\n\n(docs \"multiplies elements of `args`\"\n      tags [numbers]\n      example (* 3 4 5))\n(macro *   (...args)\n       [\"(\" (interleave \" * \" (map args transpile)) \")\"])\n\n(docs \"divides each subsequent element of `args`\"\n      tags [numbers]\n      examples [ (/ 1 2)\n                 (/ 1 2 3) ])\n(macro /   (...args)\n           [\"(\" (interleave \" / \" (map args transpile)) \")\"])\n\n\n(docs \"short circuiting operator returns the first element of `args` that evaluates to be truthy\"\n      tags [ conditional flow-control booleans ]\n      example (or (= 1 2) (string? []) \"one is not two and an array is not a string\"))\n(macro or  (...args)\n       [\"(\" (interleave \" || \" (map args transpile)) \")\"])\n\n\n(docs \"returns the last element if all elements of `args` are truthy, or the\nfirst non-truthy element if it exists\"\n      tags [ booleans ]\n      example (and (string? \"string\") (number? 10) (= 1 1)))\n(macro and (...args)\n       (ternary (= 1 (length args)) (transpile (first args))\n                [\"(\" (interleave \" && \" (map args transpile)) \")\"]))\n\n(docs \"modulus operator\"\n      tags [numbers]\n      example (mod 10 2))\n(macro mod (...args)\n       [\"(\" (interleave \" % \" (map args transpile)) \")\"])\n\n\n\n\n\n\n\n\n(macro *def-infix (macro-name word js-comparator)\n       (var docstring (\"compares `args` from left to right, \"\n                       \"returning true if each element is \"\n                       (.slice word.token 1 -1)\n                       \" than the next\"))\n       \n       `(docs @docstring\n              tags [comparison]\n              examples [ (@macro-name a b c) (@macro-name a b) ])\n       \n       `(macro @macro-name (...args)\n               (var js-comparator @(or js-comparator [\"\\\"\" macro-name \"\\\"\"]))\n               `(and ...@(map (args.slice 0 -1)\n                              (#(item index)\n                                [ item \" \" js-comparator \" \"\n                                  (get args (+ 1 index)) ])))))\n\n(*def-infix > \"greater than\")\n(*def-infix <  \"less than\")\n(*def-infix <= \"less than or equal\")\n(*def-infix >= \"greater than or equal\")\n(*def-infix != \"not equal (using threequals)\" \"!==\")\n(*def-infix = \"equal (using threequals)\" \"===\")\n\n(delete-macro *def-infix)\n\n\n\n\n\n\n\n\n(docs \"increments `item` by `increment`\"\n      tags [numbers]\n      example (incr-by n 5))\n(macro incr-by (item increment)\n       [ (transpile item) \" += \" (transpile increment)])\n\n\n\n\n(docs \"increments item by 1\",\n      tags [numbers],\n      example (incr i))\n(macro incr (item)\n       [\"((\" (transpile item) \")++)\"])\n\n\n(docs \"decrements item by 1\",\n      tags [numbers],\n      example (decr i))\n(macro decr (item) [\"((\" (transpile item) \")--)\"])\n\n(docs \"uses the javascript new keyword to construct an object using\n      `constructor`, with `args` passed as arguments to the constructor.\"\n      tags [functions]\n      example (new RegExp \"hello\" 'g))\n\n(macro new (constructor ...args)\n       [\"(new \" '(call @constructor ...@args) \")\"])\n\n\n\n(docs \"builds a regex using `pattern` and `flags` as arguments to the RegExp constructor\"\n      tags [regex]\n      examples [ (regex \"[0-9]+\") (regex \"0x[0-9a-f]+\" 'i)])\n(macro regex (pattern flags)\n       '(new RegExp @pattern @(or flags 'undefined)))\n\n\n\n(docs \"predicate to test for equality with zero\"\n      tags [numbers]\n      example: (zero? n))\n(macro zero? (item) '(= @item 0))\n\n\n(docs \"returns true if the array `arr` has a length of zero\"\n      tags [arrays collections]\n      example: (empty? []))\n(macro empty? (arr)\n       `(= 0 (length @arr)))\n\n\n(docs \"returns true if `number` is not divisible by 2\"\n      tags [numbers]\n      example (odd? 5))\n(macro odd? (number)\n       '(= 1 (mod @number 2)))\n\n\n(docs \"returns true if `number` is divisible by 2 with no remainder\"\n      tags [numbers]\n      example (even? 10))\n(macro even? (number)\n       '(= 0 (mod @number 2)))\n\n\n(docs \"exposes the javascript typeof operator. most often, predicates\nsuch as `string?`, `function?`, `number?`, etc are preferred.\"\n      tags [type]\n      example: (typeof 5))\n(macro typeof (thing) [\"typeof \" (transpile thing)])\n\n\n(docs \"returns true if all of the `things` are javascript strings\"\n      tags [strings type]\n      examples: [ (string? test-object) (string? 'yes 'yes 'yes) ])\n(macro string? (...things)\n       '(and ...@(map things (#(thing) '(= (typeof @thing) 'string)))))\n\n\n(docs \"returns true if all of the `things` are functions\"\n      tags [functions type]\n      examples: [ (function? fn) (function? err cb) ])\n(macro function? (...things)\n       '(and ...@(map things (#(thing) '(= (typeof @thing) 'function)))))\n\n\n(docs \"returns true if all of the `things` are undefined, as tested\nwith `typeof`, not equality with literal undefined. This is the\ninverse of `defined?`\"\n      tags [type]\n      examples: [ (undefined? argument)\n                  (undefined? 1 2 undefined) ])\n(macro undefined? (...things)\n       '(and ...@(map things (#(thing) '(= (typeof @thing) 'undefined)))))\n\n\n(docs \"returns true if none of the `things` are undefined, as tested\nwith `typeof`. This is the inverse of `defined?`\"\n      tags [type]\n      examples: [ (defined? variable)\n                  (defined? var1 var2 var3) ])\n(macro defined? (...things)\n       '(and ...@(map things (#(thing) '(!= (typeof @thing) 'undefined)))))\n\n\n(docs \"returns true if all of the `things` are numbers, as tested\nwith `typeof`\"\n      tags [numbers type]\n      examples: [ (number? 1) (number? 1 2 3) ])\n(macro number? (...things)\n       '(and ...@(map things (#(thing) '(= (typeof @thing) 'number)))))\n\n\n;;nodoc\n(macro if (arg truebody falsebody)\n       [\"(function() {\"\n        (indent [\"if (\" (transpile arg) \") {\"\n                        (indent '(do ...@truebody))\n                        \"} else {\"\n                        (indent '(do ...@falsebody))\n                        \"}\"])\n         \"}).call(this)\"])\n\n\n(docs \"inserts the result of each subsequent call in `calls` as the\nsecond argument to the next macro. This is very much akin to clojure's thread-first arrow or elixir's pipe operator\"\n      tags [language]\n      examples: [\n                 (pipe \"a b c d\"\n                     .to-upper-case\n                     (.replace \"A\" \"X\")\n                     (.split \" \")\n                     first\n                     (concat \" marks the spot\"))\n\n                  (pipe \"{\\\"a\\\": {\\\"b\\\": [ 1, 2, 3 ]}}\"\n                        JSON.parse\n                        (get 'a)\n                        JSON.stringify)\n                  ]\n     references: [ \"https://clojuredocs.org/clojure.core/-%3E\"\n                   \"http://elixir-lang.org/docs/v1.0/elixir/Kernel.html#|>/2\" ])\n(macro pipe (...calls)\n       (inject undefined calls\n               (#(value item)\n                 (if (undefined? value) item\n                     (scoped\n                      (var cloned (if (node? item 'literal 'dots)\n                                      (get `(@item) 'source)\n                                      (clone item)))\n                     \n                      (merge-into cloned\n                                  { contents [ (first cloned.contents)\n                                               value\n                                               ...(rest cloned.contents) ] }))))))\n\n(alias-macro pipe |>)\n\n\n(docs \"inserts `contents` transpiled to javascript as a comment in the\noutput file, removing it from execution.\"\n      tags [language]\n      example (comment (scoped 1)))\n(macro comment (...contents)\n       (map contents (#(content)\n                       [\"// \"(recurse-map (transpile content)\n                                    (#(item)\n                                      (ternary item\n                                               (pipe item transpile output-formatter\n                                                     (.replace (regex \"\\n\" 'g) \"\\n// \"))\n                                               null)))])))\n\n\n;; (docs \"checks if `first-thing` is equal to all of the `other-things`.\n;; Most of the time, there is only one other thing. Javascript threequals\n;; is always used.  Please note that if evaluating `first-thing` has\n;; side-effects, they will be called `(length other-things)` times.\"\n;;       examples [ (= 1 2)\n;;                  (= 10 (+ 5 5) (- 15 5)) ])\n\n\n(docs \"returns true if `thing` is an array in javascript. aliased as\n`list?`.\"\n      tags [type arrays]\n      example: (array? arr))\n\n(macro array? (thing)\n       (var transpiled (transpile thing))\n       [\"((\" transpiled \") && typeof (\" transpiled \") === \\\"object\\\" && (\"\n               transpiled \").constructor.name === \\\"Array\\\")\"])\n(alias-macro array? list?)\n\n\n(docs \"returns true if `thing` is an object that is not an array in javascript. aliased as\n`object?`.\"\n      tags [type objects]\n      example: (object? arr))\n\n(macro hash? (thing)\n       `(and (= 'object (typeof @thing))\n             (!= @thing null)\n             (!= (get @thing 'constructor 'name) 'Array)))\n(alias-macro hash? object?)\n\n\n(docs \"evaluates statements in `body` if `condition` is true. `body`\n      is `scoped` in a self-evaluating function to support having a\n      return value from the if statement.\"\n      tags [ conditional flow-control language ]\n      example: (when (< 3 i) (console.log i) (get arr i)))\n\n(macro when (condition ...body)\n       [\"(function() {\"\n        (indent [\"if (\" (transpile condition) \") {\"\n                        (indent '(do ...@body))\n                        \"}\"])\n        \"}).call(this)\"])\n\n\n\n(docs \"boolean negation, as determined by javascript truthiness\"\n      tags [booleans]\n      example: (not (string? 1))\n      references: [ \"https://developer.mozilla.org/en-US/docs/Glossary/Truthy\"\n                    \"https://developer.mozilla.org/en-US/docs/Glossary/Falsy\" ])\n(macro not (exp)\n       [\"!(\" (transpile exp) \")\"])\n\n\n\n\n\n(docs \"evaluates statements in `body` if `condition` is falsy. `body`\n      is `scoped` in a self-evaluating function to support having a\n      return value from the if statement.\"\n      tags [conditional flow-control]\n      example: (unless (< 3 i) (console.log i) (get arr i)))\n\n(macro unless (condition ...body)\n       [\"(function() {\"\n        (indent [\"if (\" '(not @condition) \") {\"\n                        (indent '(do ...@body))\n                        \"}\"])\n        \"}).call(this)\"])\n\n;;nodoc\n(macro assign (...args)\n       (interleave \"\\n\"\n             (bulk-map args (#(name value)\n                              (as-statement [ (transpile name) \" = \"\n                                                    (transpile value)])))))\n\n\n\n(docs \"outputs debug information about `arg`.  If `label` is\nomitted (only one argument is provided), the name of the variable or\nexpression of that first expression will be logged. Aliased as `pretty-log`\"\n      tags [language]\n      examples: [ (log-pretty 'my-label value)\n                  (log-pretty (+ 1 2)) ])\n(macro log-pretty (label arg)\n       (var node this)\n       (when (undefined? arg)\n             (assign arg label\n                     label [\"\\\"\" (prettify label false) \"\\\"\"]))\n       `(console.log (concat @[\"\\\"\" node.file \":\" node.line \"\\\"\"] \" \" @label \" = \" (prettify @arg))))\n(alias-macro log-pretty pretty-log)\n\n(docs \"iterates over `array`, evaluating `body` once for each value in\n`array`.  If `item` is a literal name, that will be the variable into\nwhich the `array` element is yielded (current value).  If `item` is an expression, it\ncan contain the current value, the index, and the `array`.\"\n      tags [ arrays language collections ]\n      references [\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach\"]\n      examples [ (each number [ 1 2 3 ] (console.log number))\n                 (each (letter index) `[ a b c d ]\n                       (set letters letter index)\n                       (pipe letter (.to-upper-case) (console.log))) ])\n                \n(macro each (item array ...body)\n       '(.for-each @array\n                   (lambda @{ node this\n                              args (if (node? item 'expression) item [item]) }\n                           ...@body)))\n\n\n\n\n\n\n\n\n;;nodoc\n;;deprecated\n(macro macro-expand (name)\n       (var macro (get macros (output-formatter (transpile name))))\n       (if macro\n           (macro.to-string)\n           \"undefined\"))\n\n\n\n\n(docs \"throws a new javascript error with arguments as the string\"\n      tags [language]\n      example (throw (new Error \"could not find matching socks\")))\n\n(macro throw (error)\n       [\"throw \" (transpile error)])\n\n\n\n\n\n(docs \"double-negates `expr`, converting it to a boolean\"\n      tags [type booleans]\n      examples: [ (as-boolean 0)\n                  (as-boolean true) ])\n(macro as-boolean (expr)\n       [\"(!!(\" (transpile expr) \"))\"])\n\n\n;;nodoc because this needs attention\n;;todo\n(macro try (tryblock catchblock)\n       [\"(function() {\"\n        (indent [\"try {\"\n                 (indent '(do @tryblock))\n                 \"} catch (e) {\"\n                 (indent '(do @catchblock))\n                 \"}\"])\n         \"}).call(this)\"])\n\n\n\n\n\n;; (docs \"sets or gets sibilant state. If one arg is provided, this macro\n;; gets the value.  If more than two args are provided, sibilant state is\n;; set in pairs.  deprecated. internal.\")\n\n(macro state (...pairs)\n       (if (= 1 (length pairs))\n           (get sibilant.state (output-formatter (transpile (first pairs))))\n           (do (bulk-map pairs (#(k v) (set sibilant.state (output-formatter (transpile k)) (eval (output-formatter (transpile v))))))\n               null)))\n\n\n;;nodoc\n;;internal\n(macro symbol ()\n       (var symbol-count (or (get sibilant.state 'symbol-count) 0)\n            new-symbol-count (+ 1 symbol-count))\n       (^state 'symbol-count new-symbol-count)\n       [\"$_symbol\" new-symbol-count \"_$\"])\n\n\n\n\n\n(docs \"evaluates the `body` as long as `condition` is truthy,\nreturning the value of the last expression in `block` when `condition`\nceases to be truthy. See also `until`\"\n      tags [loops flow-control]\n      example: (while (> 5 i) (console.log i) (decr i)))\n(macro while (condition ...body)\n       (var symbol (^symbol))\n       '(*scoped-without-source\n         (var @symbol)\n         @[\"while (\" (transpile condition) \") {\"\n           (indent '(assign @symbol (*scoped-without-source ...@body)))\n            \"}\"]\n         @symbol))\n\n\n\n\n(docs \"evaluates the `body` as long as `condition` is falsy,\nreturning the value of the last expression in `block` when `condition`\nceases to be falsy. See also `while`\"\n      tags [loops flow-control]\n      example: (until (< 5 i) (console.log i) (incr i)))\n\n(macro until (condition ...body)\n       '(while (not @condition) ...@body))\n\n\n\n\n(docs \"returns true if the `string` matches `regexp`.  Deprecated in\n      preference to `.match` (`send` dot-invocation).\"\n      tags [regex strings]\n      example: (match? (regex \"^[a-z]+$\" 'i) 'word))\n(macro match? (regexp string)\n       '(.match @string @regexp))\n\n(docs \"similar to `match?` but builds a regex out of the `pattern` and `flags`.\"\n      tags [regex strings]\n      example (match-regex? 'word \"^[a-z]+$\" 'i))\n(macro match-regex? (string pattern flags)\n       '(match? (regex @pattern @flags) @string))\n\n\n(docs \"replaces the first occurance of `pattern` (as a regex) with `replacement`\"\n      tags [regex strings]\n      example: (replace \"hello world\" \"l+o\" \"y there,\"))\n(macro replace (string pattern replacement)\n       '(.replace @string\n              (regex @pattern)\n              @replacement))\n\n(docs \"replaces all occurrances of `pattern` (as a regex) with `replacement`\"\n      tags [regex strings]\n      example: (replace-all \"503-555-1212\" \"[0-9]\" \"#\"))\n(macro replace-all (string pattern replacement)\n       '(.replace @string (regex @pattern 'g) @replacement))\n\n\n\n\n\n\n(docs \"most often called as its alias, `#>`, thunk creates a function\nwith no named arguments. To refer to arguments anonymously, use #n,\nsuch as #0 for the first argument.\"\n      tags [functions language]\n      examples: [ (.map [ 1 2 3 ] (#> (+ 1 #0)))\n                  (window.set-timeout (#> (console.log 'here)) 10) ])\n(macro thunk (...body)\n       (var node this\n            lambda-options { node node args [] })\n\n       (when (not (node? (first body)))\n             (merge-into lambda-options (first body))\n             (assign body (rest body)))\n\n       '(lambda @lambda-options\n       ...@(map-node body\n                 (#(node)\n                   (if (node? node 'arg-placeholder)\n                       '(argument @(replace node.token \"^#\" \"\"))\n                       node)))))\n(alias-macro thunk #>)\n\n\n\n\n\n(docs \"most often called as its alias, `#->`, pipe-thunk applies a pipe chain to the argument of a function and returns the result\"\n      tags [functions language]\n      examples [ (.map `[ a b c ] (#-> (.to-upper-case) (concat \" is a letter\"))) ])\n(macro pipe-thunk (...calls) `(thunk @{ node this } (pipe #0 ...@calls)))\n(alias-macro pipe-thunk #->)\n\n\n\n\n\n\n(docs \"returns the property names of `obj`.\"\n      tags [objects collections]\n      references: [ \"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/keys\" ]\n      example (keys { a 1 b 2 }))\n(macro keys (obj)\n       '(Object.keys @obj))\n\n\n\n\n\n\n(docs \"uses the javascript delete keyword on any number of `objects`.\n      Use in conjunction with `get` or dotted literal notation (a.b).\"\n      tags [objects collections]\n      examples [ (delete object.a object.b)\n                 (delete (get object attribute) (get object \"other attribute\")) ])\n(macro delete (...objects)\n       (interleave \"\\n\" (map objects (#(obj)\n                                 (as-statement [\"delete \" (transpile obj)])))))\n\n\n\n\n\n\n\n(docs \"deletes each macro name in `macro-names` from the current namespace. Use carefully\"\n      tags [macros language])\n(macro delete-macro (...macro-names)\n       (each macro-name macro-names\n             (delete (get sibilant.macros.namespace (output-formatter (transpile macro-name)))))\n       null)\n(alias-macro delete-macro delmacro)\n\n\n\n\n\n\n(docs \"moves macro from `current-macro-name` to `new-macro-name`. Use carefully\"\n      tags [macros language])\n(macro rename-macro (current-macro-name new-macro-name)\n       (^alias-macro current-macro-name new-macro-name)\n       (^delete-macro current-macro-name)\n       null)\n\n\n\n\n\n\n\n\n(docs \"transforms function arguments into an array, using the Array prototype's slice\"\n      tags [functions]\n      example (arguments))\n(macro arguments ()\n       [\"(Array.prototype.slice.apply(arguments))\"])\n\n\n\n\n\n\n\n(docs \"`get`s the argument at `index` in the current function context. Inside of a `thunk` (`#>`), this can be abbreviated with `#n`, where `n` is the argument index.\"\n      tags [functions]\n      example (argument 3))\n(macro argument (index)\n       '(get arguments @index))\n\n\n\n\n(docs \"iterates over each attribute in `obj`\"\n      tags [objects collections]\n      example (each-key key { a 1 b 2 } (console.log key)))\n(macro each-key (as obj ...body)\n       `(pipe @obj (keys)\n              (.for-each (lambda @{ args: (if (node? as 'expression) as [as])\n                                    node: this }\n                                 ...@body))))\n\n\n\n\n\n\n\n(docs \"uses the javascript switch construction to test equality.  documentation todo: needs better description\"\n      tags [flow-control conditional deprecated]\n      examples: [\n                 (switch char\n                         ('a \"it was an a\")\n                         ('b (console.log \"found a b!\")\n                             \"it was a b\")\n                         ([1 2 3 4 5] \"it was an integer from one to five\")\n                         (default \"not sure\"))\n                 ])\n\n(macro switch (obj ...cases)\n       [\"(function() {\"\n         (indent [\"switch(\" (transpile obj) \") {\"\n                   (map cases (#(case-def)\n                                (var case-name-node (first case-def.contents)\n                                     case-labels (if (node? case-name-node 'expression 'bracket)\n                                                     case-name-node.contents\n                                                     [case-name-node])\n                                     case-string (interleave \"\\n\"\n                                                             (map case-labels (#(c)\n                                                                                (if (= 'default c.token)\n                                                                                    \"default:\"\n                                                                                    [\"case \" (transpile c) \":\"])))))\n                                [\"\\n\" case-string (indent '(do ...@(rest case-def.contents)))]))\n                   \"}\"])\n         \"}).call(this)\"])\n\n\n\n\n\n\n\n\n\n\n\n(docs \"tests any number of `alternating-conditions-and-branches`.  If\n      an odd number of branches are supplied, the final branch is a\n      default else clause.  To evaluate more than one expression as a\n      branch, use the `do` macro, as shown in the examples:\"\n      tags [conditional flow-control]\n      examples [ (if true (console.log 'here))\n                 (if (= 1 arguments.length) (console.log \"one argument\")\n                     (= 'blue favorite-color) (console.log \"blue\")\n                     (assign examples 'difficult))\n                 (if (foo?) (do (a b)\n                                (c))\n                     (bar?) (do (baz)\n                                (wibble))\n                     (do (d e)\n                         (console.log 'default))) ])\n\n\n\n(macro if (...alternating-conditions-and-branches)\n       [\"(function() {\"\n        (indent\n         (interleave \" else \"\n               (bulk-map alternating-conditions-and-branches\n                         (#(cond val)\n                           (if (!= (typeof val) 'undefined)\n                                 [\"if (\" (transpile cond) \") {\"\n                                   (indent '(do @val))\n                                   \"}\"]\n                                 [\"{\" (indent '(do @cond)) \"}\"])))))\n        \"}).call(this)\"])\n\n\n\n\n\n\n\n\n\n\n\n\n(docs \"similar to `pipe`, this macro allows function calls to be applied\nin sequence, as is common in fluent interfaces. deprecated in preference to `pipe`\"\n      tags [deprecated language]\n      example (chain a (b c d) (e) (f g)))\n      \n\n(macro chain (object ...calls)\n       (if (= 0 calls.length) (transpile object)\n           (= 1 calls.length) '(send @object ...@(get (first calls) 'contents))\n           (do\n            (var lines (map calls (#(call index)\n                                    [\".\" (transpile (first call.contents))\n                                         \"(\" (interleave \", \" (map (rest call.contents) transpile)) \")\"])))\n\n            [ (transpile object)\n              (first lines)\n              \"\\n  \"\n              (recurse-indent\n               (interleave \"\\n\" (rest lines)))])))\n\n\n\n\n\n\n\n;;nodoc, deprecated\n(macro chainable (...names)\n       (each (name) names\n             '(macro @name (target ...calls)\n                     '(chain (call @name @target) ...@calls))))\n\n\n\n\n(docs \"uses the javascript `instanceof` operator to check if `item` is of `type`.\"\n      tags [language type]\n      example (instance-of? (new Date) Date))\n(macro instance-of? (item type)\n       [\"(\" (transpile item) \" instanceof \" (transpile type) \")\"])\n\n\n\n\n\n\n(docs \"returns true if `haystack` includes `needle`.  `haystack` can be a string or array/list.\"\n      tags [arrays collections]\n      examples [ (includes? 'hello 'h) (includes? `[ Veni vidi vici] 'vidi) ])\n(macro includes? (haystack needle)\n       '(pipe @haystack (.index-of @needle) (!= -1)))\n\n\n\n\n\n\n\n(docs \"returns true if `haystack` does NOT include `needle`.\n`haystack` can be a string or array/list\"\n      tags [arrays collections]\n      examples [ (excludes? 'hello 10) (excludes? `[ Veni vidi vici] 'attenti) ])\n(macro excludes? (haystack needle)\n       `(pipe @haystack (.index-of @needle) (= -1)))\n\n\n\n\n\n\n(docs \"similar to the javascript truthiness predicate `as-boolean`, returns true unless the `thing` is undefined or null\"\n      tags [type]\n      example (exists? window))\n(macro exists? (thing)\n       `(and (defined? @thing) (!= @thing null)))\n\n\n\n\n\n(macro with-state (k v ...body)\n       (var before (^state k))\n       (^state k v)\n       (var return-value\n            (interleave \"\\n\" (map body transpile)))\n       (^state k before)\n       return-value)\n\n\n\n\n\n\n(docs \"combines elements of array `arr` into a string, inserting\n`glue` string between each element.  if `glue` is omitted (only one\nargument provided), the elements of `arr` are joined with an empty\nstring\"\n\n      tags [arrays collections strings]\n      examples [ (join `[ a few words ]  \", \" )\n                 (join `[ several more words ]) ])\n\n(macro join (arr glue)\n       (if (and (defined? glue) (undefined? arr))\n           (assign arr glue glue undefined))\n       `(.join @arr @(or glue \"\\\"\\\"\")))\n\n\n\n\n(macro *destructure (pairs)\n     (var destructured [])\n     (bulk-map pairs (#(lhs rhs)\n                       (var transpiled-rhs (transpile rhs))\n                       (switch lhs.type\n                               ('bracket\n                                (var literal-rhs? (|> transpiled-rhs (output-formatter) (match-regex? \"^[\\._a-zA-Z0-9]+$\"))\n                                     source (if literal-rhs?\n                                                transpiled-rhs\n                                                (do                             \n                                                 (var symbol (^symbol))\n                                                 (destructured.push [symbol transpiled-rhs])\n                                                 symbol)))\n                                (each (item index) lhs.contents\n                                      (destructured.push [(transpile item) '(get @source @index)]))\n                                (unless literal-rhs?\n                                        (destructured.push [source 'undefined])))\n                               ('brace\n                                (var literal-rhs? (|> transpiled-rhs (output-formatter) (match-regex? \"^[\\._a-zA-Z0-9]+$\"))\n                                     source (if literal-rhs?\n                                                transpiled-rhs\n                                                (do                             \n                                                 (var symbol (^symbol))\n                                                 (destructured.push [symbol transpiled-rhs])\n                                                 symbol)))\n                                (each (item index) lhs.contents\n                                      (var tr-item (transpile item))\n                                      (destructured.push [tr-item '(get @source @[\"\\\"\" tr-item \"\\\"\"])]))\n                                (unless literal-rhs?\n                                        (destructured.push [source 'undefined])))\n\n                               (default\n                                (destructured.push [ (transpile lhs)\n                                                     (if rhs transpiled-rhs 'undefined)])))))\n     destructured)\n\n(docs \"registers variables in `pairs` inside of the current scope using the javascript var keyword.\ndestructuring from arrays and objects is also supported, as shown in the examples\"\n      tags [ variables language ]\n      examples: [ (var a 1 b 2)\n                  (var a [ 1 2 3 ] [ b c d ] a)\n                  (var a)\n                  (var { log dir } console)\n                  (var {a} {a 1 b 2} c 3)\n                  (var a 1 [b c] [2 3]) ])\n\n(macro var (...pairs)\n       (as-statement\n        [\"var \" (|> pairs\n                    (^*destructure)\n                    (map (#(pair) [(first pair) \" = \" (second pair)]))\n                    (interleave \",\\n    \")) ]))\n\n\n\n\n(docs \"assigns alternating keys and values in `args`.  This works much\nlike `var`, but without the var keyword.  It is important to\nunderstand variable scope in javascript in order to use this macro safely.\nThis macro supports destructuring, as shown in examples\"\n      tags [language variables]\n      examples [ (assign a 1)\n(assign a 1 b 2)\n(assign [ a b ] [ 1 2 ])\n(assign [ a b ] c)\n(assign { a b } c\n        [ x y ] a)])\n\n(macro assign (...pairs)\n        (|> pairs\n            (^*destructure)\n            (map (#(pair) (as-statement [(first pair) \" = \" (second pair)])))\n            (interleave \"\\n\")))\n\n\n(docs \"sets default values for variables in current scope. `pairs` are\nalternating variable names and default values\"\n      tags [variables language]\n      example (default a 10 b 20))\n(macro default (...pairs)\n       (interleave \"\\n\" (bulk-map pairs (#(name value)\n                                  '(assign @name (ternary (defined? @name) @name @value))))))\n\n\n(macro import-namespace (namespace)\n       (var namespace-as-string (output-formatter (transpile namespace)))\n       (unless (sibilant.macros.namespaces.has-own-property namespace-as-string)\n               (set sibilant.macros.namespaces namespace-as-string {}))\n       (sibilant.macros.search-path.unshift namespace-as-string)\n       undefined)\n\n\n(macro namespace (namespace)\n       `(import-namespace @namespace)\n       (set sibilant.macros 'namespace (get sibilant.macros.namespaces (output-formatter (transpile namespace))))\n       undefined)\n\n\n\n\n\n\n(docs \"checks if `object` has property `key`.  returns true or false.\"\n      tags [collections objects]\n      example (has-key? object 'a))\n\n(macro has-key? (object key)\n       `(.has-own-property @object @key))\n\n\n\n\n\n\n\n(docs \"retreives object properties, potentially deeply. If more than one `keys` are provided,\n`get` fetches deeply into nested objects or arrays.\nWhen javascript dot notation can be used (`a.b = 3`), it is.\nOtherwise, bracket notation is used.\"\n      tags [collections objects]\n      examples [ (get an-object 'static-attribute-name)\n                 (get object dynamic-attribute-name)\n                 (get object \"these attributes\" \"can't be dotted\")\n                 (get array 0)\n                 (get object 'a 'b c)\n                 (get array 0 1 2) ])\n\n\n(macro get (obj ...keys)\n       [(transpile obj)\n         (map keys (#(key)\n                     (var transpiled (transpile key)\n                          output (output-formatter transpiled))\n\n                     (if (match-regex? output \"^\\\"[a-zA-Z0-9]+\\\"$\")\n                         [\".\" (replace-all output \"\\\"\" \"\") ]\n                         [\"[\" transpiled \"]\"])))])\n\n\n\n\n\n\n\n\n\n\n(docs \"assigns object properties to `arr` in pairs, alternating between keys and values.\nWhen javascript dot notation can be used (`a.b = 3`), it is.  Otherwise, bracket notation is used\"\n      tags [collections objects]\n      examples [ (set an-object 'static-attribute-name 'value)\n                 (set object dynamic-attribute-name \"key name determined at runtime\")\n                 (set array 0 \"first element of array\")\n                 (set object \"can't be dotted\" 'value)\n                 (set object 'first-attribute 'first-value\n                      'second-attribute 'second-value) ])\n\n(macro set (arr ...kv-pairs)\n       (interleave \"\\n\" (bulk-map kv-pairs (#(k v) `(assign (get @arr @k) @v)))))\n\n(docs \"checks if a string is identical to the lower-cased version of itself\"\n      tags [strings]\n      example (lower-case? \"abc\"))\n(macro lower-case? (str)\n       `(= (.to-lower-case @str) @str))\n\n\n\n(docs \"checks if a string is identical to the upper-cased version of itself\"\n      tags [strings]\n      example (lower-case? \"abc\"))\n(macro upper-case? (str)\n       `(= (.to-upper-case @str) @str))\n\n\n(docs \"inserts a pragma for source-mapping-url\"\n      tags []\n      example (source-mapping-url \"/example.map\"))\n\n(macro source-mapping-url (url)\n       [ \"//# sourceMappingURL=\" (|> url transpile output-formatter eval) \"\\n\" ])\n\n\n(docs \"sorts `array-of-objects` by `attribute` using locale-compare\"\n      tags [collections objects arrays experimental]\n      example (|> [ {state 'ca} {state 'or} {state 'ny} ] (sort-by 'state))\n      references [\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/localeCompare\"])\n\n(macro sort-by (array-of-objects attribute)\n       `(.sort @array-of-objects (#-> (get @attribute)\n                                      .to-string\n                                      (.locale-compare (get #1 @attribute)))))\n","(namespace core)\n(docs \"the simplest way to conditionally execute code.\"\n      tags [ conditional flow-control ]\n      example (ternary (< 50 100)\n         \"fifty is less than 100\"\n         \"fifty is more than 100\"))\n\n(macro ternary (cond if-true if-false)\n       [\"(\" (transpile cond) \") ? \"\n            (transpile if-true) \" : \"\n            (transpile if-false)])\n\n\n\n\n\n;; nodoc\n(macro set (arr ...kv-pairs)\n       (interleave \"\\n\" (bulk-map kv-pairs\n                                  (#(k v)\n                                    (as-statement [\"(\" (transpile arr) \")\"\n                                                    \"[\" (transpile k) \"] = \" (transpile v) ])))))\n;; nodoc\n(macro var (...pairs)\n       (as-statement\n        [\"var \"\n         (interleave \",\\n    \"\n               (bulk-map pairs\n                         (#(name value)\n                           [ (transpile name) \" = \" (transpile value) ])))\n         ]))\n\n;; nodoc\n(macro get (obj ...keys)\n       [\"(\" (transpile obj) \")\" (map keys (#(key)\n                                            [\"[\" (transpile key) \"]\"]))])\n\n\n\n;;nodoc\n(macro compile-macro (name args ...body)\n       `(set sibilant.macros.namespace\n             (quote @name)\n             (lambda @{ name name\n                        body body\n                        args args\n                        node this })))\n      \n(macro alias-macro (from to)\n       (var namespace `(get sibilant.macros.namespaces (quote @(get sibilant.macros.search-path 0))))\n       `(set @namespace (quote @name) (get @namespace @to)))\n\n(docs \"calls the `method` on `object` as a function with `args` as the arguments\"\n      tags [ functions ]\n      example (send object method first-argument second-argument third-argument))\n\n(macro send (object method ...args)\n       [(transpile object) \".\" (transpile method)\n               \"(\" (interleave \", \" (map args transpile)) \")\"])\n\n\n\n\n\n(docs \"calls the function `fn` with arguments passed as an array in `arglist`\"\n      tags [functions]\n      example (apply my-function [ first-arg second-arg third-arg ]))\n\n(macro apply (fn arglist)\n       '(.apply @fn this @arglist))\n\n\n\n\n(docs \"builds an array with `first` as the zeroth index and the\nelements provided by array `rest` as the subsequent elements, as\nsiblings with `first`.\"\n      tags [arrays collections deprecated]\n      example (cons 1 [ 2 3 4 ]))\n\n(macro cons (first rest)\n       [\"[ \" (transpile first) \" ].concat(\" (transpile rest) \")\"])\n\n\n\n\n(docs \"adds `additional` elements onto the right-side (tail) of `list`. deprecated\"\n      tags [ arrays collections deprecated ]\n      example (append [ 1 2 3 ] 4 5 6))\n(macro append (list ...additional)\n       '(.concat @list (list ...@additional)))\n\n\n(docs \"fetches length attribute from `arr`\"\n      tags [ arrays collections ]\n      example (length [ 1 2 3 ]))\n(macro length (arr)\n       '(get @arr 'length))\n\n(docs \"executes the `body` inside of a self-executing function. The\nlast statement/expression of the body is returned.\"\n      tags [functions]\n      examples [(scoped true) (scoped (var a 1) (+ a 2))])\n(macro scoped (...body)\n       '(.call (lambda @{node this args []} ...@body) this))\n\n\n;;nodoc\n(macro *scoped-without-source (...body)\n       [\"(function() {\" (indent '(do ...@body)) \"}).call(this)\"])\n\n(macro *number-words (...number-words)\n       (.for-each number-words (#(word index)\n                                 `(docs @(\"fetches the \"(output-formatter (transpile word))\" element from `arr`\")\n                                        tags [arrays collections]\n                                        example (@word my-array))\n                                 `(macro @word (arr) (var index @index) `(get @arr @index)))))\n(*number-words first second third fourth fifth sixth seventh eighth ninth)\n\n(docs \"fetches all but the first item of `arr`\"\n      tags [arrays collections]\n      example (rest [ 1 2 3 ]))\n(macro rest (arr) '(.slice @arr 1))\n\n(docs \"fetches just the last element of `arr` by slicing.\"\n      tags [arrays collections]\n      example (last [ 1 2 3 ]))\n(macro last (arr) '(first (.slice @arr -1)))\n\n;;nodoc\n(macro = (a b) [ (transpile a) \" === \" (transpile b) ])\n\n(docs \"adds `args` using the javascript `+` operator. Since javascript\noverloads this for string concatenation, this macro can be used for\nthis as well.\"\n      tags [ strings numbers ]\n      examples [ (+ 1 2 3) (+ 'hello 'world) ])\n(macro +   (...args)\n       [\"(\" (interleave \" + \" (map args transpile)) \")\"])\n\n\n(docs \"subtracts each subsequent element of `args`\"\n      tags [numbers]\n      examples [ (- 2 1) (- 10 5 1) ])\n(macro -   (...args)\n       [\"(\" (interleave \" - \" (map args transpile)) \")\"])\n\n(docs \"multiplies elements of `args`\"\n      tags [numbers]\n      example (* 3 4 5))\n(macro *   (...args)\n       [\"(\" (interleave \" * \" (map args transpile)) \")\"])\n\n(docs \"divides each subsequent element of `args`\"\n      tags [numbers]\n      examples [ (/ 1 2)\n                 (/ 1 2 3) ])\n(macro /   (...args)\n           [\"(\" (interleave \" / \" (map args transpile)) \")\"])\n\n\n(docs \"short circuiting operator returns the first element of `args` that evaluates to be truthy\"\n      tags [ conditional flow-control booleans ]\n      example (or (= 1 2) (string? []) \"one is not two and an array is not a string\"))\n(macro or  (...args)\n       [\"(\" (interleave \" || \" (map args transpile)) \")\"])\n\n\n(docs \"returns the last element if all elements of `args` are truthy, or the\nfirst non-truthy element if it exists\"\n      tags [ booleans ]\n      example (and (string? \"string\") (number? 10) (= 1 1)))\n(macro and (...args)\n       (ternary (= 1 (length args)) (transpile (first args))\n                [\"(\" (interleave \" && \" (map args transpile)) \")\"]))\n\n(docs \"modulus operator\"\n      tags [numbers]\n      example (mod 10 2))\n(macro mod (...args)\n       [\"(\" (interleave \" % \" (map args transpile)) \")\"])\n\n\n\n\n\n\n\n\n(macro *def-infix (macro-name word js-comparator)\n       (var docstring (\"compares `args` from left to right, \"\n                       \"returning true if each element is \"\n                       (.slice word.token 1 -1)\n                       \" than the next\"))\n       \n       `(docs @docstring\n              tags [comparison]\n              examples [ (@macro-name a b c) (@macro-name a b) ])\n       \n       `(macro @macro-name (...args)\n               (var js-comparator @(or js-comparator [\"\\\"\" macro-name \"\\\"\"]))\n               `(and ...@(map (args.slice 0 -1)\n                              (#(item index)\n                                [ item \" \" js-comparator \" \"\n                                  (get args (+ 1 index)) ])))))\n\n(*def-infix > \"greater than\")\n(*def-infix <  \"less than\")\n(*def-infix <= \"less than or equal\")\n(*def-infix >= \"greater than or equal\")\n(*def-infix != \"not equal (using threequals)\" \"!==\")\n(*def-infix = \"equal (using threequals)\" \"===\")\n\n\n(docs \"increments `item` by `increment`\"\n      tags [numbers]\n      example (incr-by n 5))\n(macro incr-by (item increment)\n       [ (transpile item) \" += \" (transpile increment)])\n\n\n\n\n(docs \"increments item by 1\",\n      tags [numbers],\n      example (incr i))\n(macro incr (item)\n       [\"((\" (transpile item) \")++)\"])\n\n\n(docs \"decrements item by 1\",\n      tags [numbers],\n      example (decr i))\n(macro decr (item) [\"((\" (transpile item) \")--)\"])\n\n(docs \"uses the javascript new keyword to construct an object using\n      `constructor`, with `args` passed as arguments to the constructor.\"\n      tags [functions]\n      example (new RegExp \"hello\" 'g))\n\n(macro new (constructor ...args)\n       [\"(new \" '(call @constructor ...@args) \")\"])\n\n\n\n(docs \"builds a regex using `pattern` and `flags` as arguments to the RegExp constructor\"\n      tags [regex]\n      examples [ (regex \"[0-9]+\") (regex \"0x[0-9a-f]+\" 'i)])\n(macro regex (pattern flags)\n       '(new RegExp @pattern @(or flags 'undefined)))\n\n\n\n(docs \"predicate to test for equality with zero\"\n      tags [numbers]\n      example: (zero? n))\n(macro zero? (item) '(= @item 0))\n\n\n(docs \"returns true if the array `arr` has a length of zero\"\n      tags [arrays collections]\n      example: (empty? []))\n(macro empty? (arr)\n       `(= 0 (length @arr)))\n\n\n(docs \"returns true if `number` is not divisible by 2\"\n      tags [numbers]\n      example (odd? 5))\n(macro odd? (number)\n       '(= 1 (mod @number 2)))\n\n\n(docs \"returns true if `number` is divisible by 2 with no remainder\"\n      tags [numbers]\n      example (even? 10))\n(macro even? (number)\n       '(= 0 (mod @number 2)))\n\n\n(docs \"exposes the javascript typeof operator. most often, predicates\nsuch as `string?`, `function?`, `number?`, etc are preferred.\"\n      tags [type]\n      example: (typeof 5))\n(macro typeof (thing) [\"typeof \" (transpile thing)])\n\n\n(docs \"returns true if all of the `things` are javascript strings\"\n      tags [strings type]\n      examples: [ (string? test-object) (string? 'yes 'yes 'yes) ])\n(macro string? (...things)\n       '(and ...@(map things (#(thing) '(= (typeof @thing) 'string)))))\n\n\n(docs \"returns true if all of the `things` are functions\"\n      tags [functions type]\n      examples: [ (function? fn) (function? err cb) ])\n(macro function? (...things)\n       '(and ...@(map things (#(thing) '(= (typeof @thing) 'function)))))\n\n\n(docs \"returns true if all of the `things` are undefined, as tested\nwith `typeof`, not equality with literal undefined. This is the\ninverse of `defined?`\"\n      tags [type]\n      examples: [ (undefined? argument)\n                  (undefined? 1 2 undefined) ])\n(macro undefined? (...things)\n       '(and ...@(map things (#(thing) '(= (typeof @thing) 'undefined)))))\n\n\n(docs \"returns true if none of the `things` are undefined, as tested\nwith `typeof`. This is the inverse of `defined?`\"\n      tags [type]\n      examples: [ (defined? variable)\n                  (defined? var1 var2 var3) ])\n(macro defined? (...things)\n       '(and ...@(map things (#(thing) '(!= (typeof @thing) 'undefined)))))\n\n\n(docs \"returns true if all of the `things` are numbers, as tested\nwith `typeof`\"\n      tags [numbers type]\n      examples: [ (number? 1) (number? 1 2 3) ])\n(macro number? (...things)\n       '(and ...@(map things (#(thing) '(= (typeof @thing) 'number)))))\n\n\n;;nodoc\n(macro if (arg truebody falsebody)\n       [\"(function() {\"\n        (indent [\"if (\" (transpile arg) \") {\"\n                        (indent '(do ...@truebody))\n                        \"} else {\"\n                        (indent '(do ...@falsebody))\n                        \"}\"])\n         \"}).call(this)\"])\n\n\n(docs \"inserts the result of each subsequent call in `calls` as the\nsecond argument to the next macro. This is very much akin to clojure's thread-first arrow or elixir's pipe operator\"\n      tags [language]\n      examples: [\n                 (pipe \"a b c d\"\n                     .to-upper-case\n                     (.replace \"A\" \"X\")\n                     (.split \" \")\n                     first\n                     (concat \" marks the spot\"))\n\n                  (pipe \"{\\\"a\\\": {\\\"b\\\": [ 1, 2, 3 ]}}\"\n                        JSON.parse\n                        (get 'a)\n                        JSON.stringify)\n                  ]\n     references: [ \"https://clojuredocs.org/clojure.core/-%3E\"\n                   \"http://elixir-lang.org/docs/v1.0/elixir/Kernel.html#|>/2\" ])\n(macro pipe (...calls)\n       (inject undefined calls\n               (#(value item)\n                 (if (undefined? value) item\n                     (scoped\n                      (var cloned (if (node? item 'literal 'dots)\n                                      (get `(@item) 'source)\n                                      (clone item)))\n                     \n                      (merge-into cloned\n                                  { contents [ (first cloned.contents)\n                                               value\n                                               ...(rest cloned.contents) ] }))))))\n\n(alias-macro pipe |>)\n\n\n(docs \"inserts `contents` transpiled to javascript as a comment in the\noutput file, removing it from execution.\"\n      tags [language]\n      example (comment (scoped 1)))\n(macro comment (...contents)\n       (map contents (#(content)\n                       [\"// \"(recurse-map (transpile content)\n                                    (#(item)\n                                      (ternary item\n                                               (pipe item transpile output-formatter\n                                                     (.replace (regex \"\\n\" 'g) \"\\n// \"))\n                                               null)))])))\n\n\n;; (docs \"checks if `first-thing` is equal to all of the `other-things`.\n;; Most of the time, there is only one other thing. Javascript threequals\n;; is always used.  Please note that if evaluating `first-thing` has\n;; side-effects, they will be called `(length other-things)` times.\"\n;;       examples [ (= 1 2)\n;;                  (= 10 (+ 5 5) (- 15 5)) ])\n\n\n(docs \"returns true if `thing` is an array in javascript. aliased as\n`list?`.\"\n      tags [type arrays]\n      example: (array? arr))\n\n(macro array? (thing)\n       (var transpiled (transpile thing))\n       [\"((\" transpiled \") && typeof (\" transpiled \") === \\\"object\\\" && (\"\n               transpiled \").constructor.name === \\\"Array\\\")\"])\n(alias-macro array? list?)\n\n\n(docs \"returns true if `thing` is an object that is not an array in javascript. aliased as\n`object?`.\"\n      tags [type objects]\n      example: (object? arr))\n\n(macro hash? (thing)\n       `(and (= 'object (typeof @thing))\n             (!= @thing null)\n             (!= (get @thing 'constructor 'name) 'Array)))\n(alias-macro hash? object?)\n\n\n(docs \"evaluates statements in `body` if `condition` is true. `body`\n      is `scoped` in a self-evaluating function to support having a\n      return value from the if statement.\"\n      tags [ conditional flow-control language ]\n      example: (when (< 3 i) (console.log i) (get arr i)))\n\n(macro when (condition ...body)\n       [\"(function() {\"\n        (indent [\"if (\" (transpile condition) \") {\"\n                        (indent '(do ...@body))\n                        \"}\"])\n        \"}).call(this)\"])\n\n\n\n(docs \"boolean negation, as determined by javascript truthiness\"\n      tags [booleans]\n      example: (not (string? 1))\n      references: [ \"https://developer.mozilla.org/en-US/docs/Glossary/Truthy\"\n                    \"https://developer.mozilla.org/en-US/docs/Glossary/Falsy\" ])\n(macro not (exp)\n       [\"!(\" (transpile exp) \")\"])\n\n\n\n\n\n(docs \"evaluates statements in `body` if `condition` is falsy. `body`\n      is `scoped` in a self-evaluating function to support having a\n      return value from the if statement.\"\n      tags [conditional flow-control]\n      example: (unless (< 3 i) (console.log i) (get arr i)))\n\n(macro unless (condition ...body)\n       [\"(function() {\"\n        (indent [\"if (\" '(not @condition) \") {\"\n                        (indent '(do ...@body))\n                        \"}\"])\n        \"}).call(this)\"])\n\n;;nodoc\n(macro assign (...args)\n       (interleave \"\\n\"\n             (bulk-map args (#(name value)\n                              (as-statement [ (transpile name) \" = \"\n                                                    (transpile value)])))))\n\n\n\n(docs \"outputs debug information about `arg`.  If `label` is\nomitted (only one argument is provided), the name of the variable or\nexpression of that first expression will be logged. Aliased as `pretty-log`\"\n      tags [language]\n      examples: [ (log-pretty 'my-label value)\n                  (log-pretty (+ 1 2)) ])\n(macro log-pretty (label arg)\n       (var node this)\n       (when (undefined? arg)\n             (assign arg label\n                     label [\"\\\"\" (prettify label false) \"\\\"\"]))\n       `(console.log (concat @[\"\\\"\" node.file \":\" node.line \"\\\"\"] \" \" @label \" = \" (prettify @arg))))\n(alias-macro log-pretty pretty-log)\n\n(docs \"iterates over `array`, evaluating `body` once for each value in\n`array`.  If `item` is a literal name, that will be the variable into\nwhich the `array` element is yielded (current value).  If `item` is an expression, it\ncan contain the current value, the index, and the `array`.\"\n      tags [ arrays language collections ]\n      references [\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach\"]\n      examples [ (each number [ 1 2 3 ] (console.log number))\n                 (each (letter index) `[ a b c d ]\n                       (set letters letter index)\n                       (pipe letter (.to-upper-case) (console.log))) ])\n                \n(macro each (item array ...body)\n       '(.for-each @array\n                   (lambda @{ node this\n                              args (if (node? item 'expression) item [item]) }\n                           ...@body)))\n\n\n\n\n\n\n\n\n;;nodoc\n;;deprecated\n(macro macro-expand (name)\n       (var macro (get macros (output-formatter (transpile name))))\n       (if macro\n           (macro.to-string)\n           \"undefined\"))\n\n\n\n\n(docs \"throws a new javascript error with arguments as the string\"\n      tags [language]\n      example (throw (new Error \"could not find matching socks\")))\n\n(macro throw (error)\n       [\"throw \" (transpile error)])\n\n\n\n\n\n(docs \"double-negates `expr`, converting it to a boolean\"\n      tags [type booleans]\n      examples: [ (as-boolean 0)\n                  (as-boolean true) ])\n(macro as-boolean (expr)\n       [\"(!!(\" (transpile expr) \"))\"])\n\n\n;;nodoc because this needs attention\n;;todo\n(macro try (tryblock catchblock)\n       [\"(function() {\"\n        (indent [\"try {\"\n                 (indent '(do @tryblock))\n                 \"} catch (e) {\"\n                 (indent '(do @catchblock))\n                 \"}\"])\n         \"}).call(this)\"])\n\n\n\n\n\n;; (docs \"sets or gets sibilant state. If one arg is provided, this macro\n;; gets the value.  If more than two args are provided, sibilant state is\n;; set in pairs.  deprecated. internal.\")\n\n(macro state (...pairs)\n       (if (= 1 (length pairs))\n           (get sibilant.state (output-formatter (transpile (first pairs))))\n           (do (bulk-map pairs (#(k v) (set sibilant.state (output-formatter (transpile k)) (eval (output-formatter (transpile v))))))\n               null)))\n\n\n;;nodoc\n;;internal\n(macro symbol ()\n       (var symbol-count (or (get sibilant.state 'symbol-count) 0)\n            new-symbol-count (+ 1 symbol-count))\n       (^state 'symbol-count new-symbol-count)\n       [\"$_symbol\" new-symbol-count \"_$\"])\n\n\n\n\n\n(docs \"evaluates the `body` as long as `condition` is truthy,\nreturning the value of the last expression in `block` when `condition`\nceases to be truthy. See also `until`\"\n      tags [loops flow-control]\n      example: (while (> 5 i) (console.log i) (decr i)))\n(macro while (condition ...body)\n       (var symbol (^symbol))\n       '(*scoped-without-source\n         (var @symbol)\n         @[\"while (\" (transpile condition) \") {\"\n           (indent '(assign @symbol (*scoped-without-source ...@body)))\n            \"}\"]\n         @symbol))\n\n\n\n\n(docs \"evaluates the `body` as long as `condition` is falsy,\nreturning the value of the last expression in `block` when `condition`\nceases to be falsy. See also `while`\"\n      tags [loops flow-control]\n      example: (until (< 5 i) (console.log i) (incr i)))\n\n(macro until (condition ...body)\n       '(while (not @condition) ...@body))\n\n\n\n\n(docs \"returns true if the `string` matches `regexp`.  Deprecated in\n      preference to `.match` (`send` dot-invocation).\"\n      tags [regex strings]\n      example: (match? (regex \"^[a-z]+$\" 'i) 'word))\n(macro match? (regexp string)\n       '(.match @string @regexp))\n\n(docs \"similar to `match?` but builds a regex out of the `pattern` and `flags`.\"\n      tags [regex strings]\n      example (match-regex? 'word \"^[a-z]+$\" 'i))\n(macro match-regex? (string pattern flags)\n       '(match? (regex @pattern @flags) @string))\n\n\n(docs \"replaces the first occurance of `pattern` (as a regex) with `replacement`\"\n      tags [regex strings]\n      example: (replace \"hello world\" \"l+o\" \"y there,\"))\n(macro replace (string pattern replacement)\n       '(.replace @string\n              (regex @pattern)\n              @replacement))\n\n(docs \"replaces all occurrances of `pattern` (as a regex) with `replacement`\"\n      tags [regex strings]\n      example: (replace-all \"503-555-1212\" \"[0-9]\" \"#\"))\n(macro replace-all (string pattern replacement)\n       '(.replace @string (regex @pattern 'g) @replacement))\n\n\n\n\n\n\n(docs \"most often called as its alias, `#>`, thunk creates a function\nwith no named arguments. To refer to arguments anonymously, use #n,\nsuch as #0 for the first argument.\"\n      tags [functions language]\n      examples: [ (.map [ 1 2 3 ] (#> (+ 1 #0)))\n                  (window.set-timeout (#> (console.log 'here)) 10) ])\n(macro thunk (...body)\n       (var node this\n            lambda-options { node node args [] })\n\n       (when (not (node? (first body)))\n             (merge-into lambda-options (first body))\n             (assign body (rest body)))\n\n       '(lambda @lambda-options\n       ...@(map-node body\n                 (#(node)\n                   (if (node? node 'arg-placeholder)\n                       '(argument @(replace node.token \"^#\" \"\"))\n                       node)))))\n(alias-macro thunk #>)\n\n\n\n\n\n(docs \"most often called as its alias, `#->`, pipe-thunk applies a pipe chain to the argument of a function and returns the result\"\n      tags [functions language]\n      examples [ (.map `[ a b c ] (#-> (.to-upper-case) (concat \" is a letter\"))) ])\n(macro pipe-thunk (...calls) `(thunk @{ node this } (pipe #0 ...@calls)))\n(alias-macro pipe-thunk #->)\n\n\n\n\n\n\n(docs \"returns the property names of `obj`.\"\n      tags [objects collections]\n      references: [ \"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/keys\" ]\n      example (keys { a 1 b 2 }))\n(macro keys (obj)\n       '(Object.keys @obj))\n\n\n\n\n\n\n(docs \"uses the javascript delete keyword on any number of `objects`.\n      Use in conjunction with `get` or dotted literal notation (a.b).\"\n      tags [objects collections]\n      examples [ (delete object.a object.b)\n                 (delete (get object attribute) (get object \"other attribute\")) ])\n(macro delete (...objects)\n       (interleave \"\\n\" (map objects (#(obj)\n                                 (as-statement [\"delete \" (transpile obj)])))))\n\n\n\n\n\n\n\n(docs \"deletes each macro name in `macro-names` from the current namespace. Use carefully\"\n      tags [macros language])\n(macro delete-macro (...macro-names)\n       (each macro-name macro-names\n             (delete (get sibilant.macros.namespace (output-formatter (transpile macro-name)))))\n       null)\n(alias-macro delete-macro delmacro)\n\n\n\n\n\n\n(docs \"moves macro from `current-macro-name` to `new-macro-name`. Use carefully\"\n      tags [macros language])\n(macro rename-macro (current-macro-name new-macro-name)\n       (^alias-macro current-macro-name new-macro-name)\n       (^delete-macro current-macro-name)\n       null)\n\n\n\n\n\n\n\n\n(docs \"transforms function arguments into an array, using the Array prototype's slice\"\n      tags [functions]\n      example (arguments))\n(macro arguments ()\n       [\"(Array.prototype.slice.apply(arguments))\"])\n\n\n\n\n\n\n\n(docs \"`get`s the argument at `index` in the current function context. Inside of a `thunk` (`#>`), this can be abbreviated with `#n`, where `n` is the argument index.\"\n      tags [functions]\n      example (argument 3))\n(macro argument (index)\n       '(get arguments @index))\n\n\n\n\n(docs \"iterates over each attribute in `obj`\"\n      tags [objects collections]\n      example (each-key key { a 1 b 2 } (console.log key)))\n(macro each-key (as obj ...body)\n       `(pipe @obj (keys)\n              (.for-each (lambda @{ args: (if (node? as 'expression) as [as])\n                                    node: this }\n                                 ...@body))))\n\n\n\n\n\n\n\n(docs \"uses the javascript switch construction to test equality.  documentation todo: needs better description\"\n      tags [flow-control conditional deprecated]\n      examples: [\n                 (switch char\n                         ('a \"it was an a\")\n                         ('b (console.log \"found a b!\")\n                             \"it was a b\")\n                         ([1 2 3 4 5] \"it was an integer from one to five\")\n                         (default \"not sure\"))\n                 ])\n\n(macro switch (obj ...cases)\n       [\"(function() {\"\n         (indent [\"switch(\" (transpile obj) \") {\"\n                   (map cases (#(case-def)\n                                (var case-name-node (first case-def.contents)\n                                     case-labels (if (node? case-name-node 'expression 'bracket)\n                                                     case-name-node.contents\n                                                     [case-name-node])\n                                     case-string (interleave \"\\n\"\n                                                             (map case-labels (#(c)\n                                                                                (if (= 'default c.token)\n                                                                                    \"default:\"\n                                                                                    [\"case \" (transpile c) \":\"])))))\n                                [\"\\n\" case-string (indent '(do ...@(rest case-def.contents)))]))\n                   \"}\"])\n         \"}).call(this)\"])\n\n\n\n\n\n\n\n\n\n\n\n(docs \"tests any number of `alternating-conditions-and-branches`.  If\n      an odd number of branches are supplied, the final branch is a\n      default else clause.  To evaluate more than one expression as a\n      branch, use the `do` macro, as shown in the examples:\"\n      tags [conditional flow-control]\n      examples [ (if true (console.log 'here))\n                 (if (= 1 arguments.length) (console.log \"one argument\")\n                     (= 'blue favorite-color) (console.log \"blue\")\n                     (assign examples 'difficult))\n                 (if (foo?) (do (a b)\n                                (c))\n                     (bar?) (do (baz)\n                                (wibble))\n                     (do (d e)\n                         (console.log 'default))) ])\n\n\n\n(macro if (...alternating-conditions-and-branches)\n       [\"(function() {\"\n        (indent\n         (interleave \" else \"\n               (bulk-map alternating-conditions-and-branches\n                         (#(cond val)\n                           (if (!= (typeof val) 'undefined)\n                                 [\"if (\" (transpile cond) \") {\"\n                                   (indent '(do @val))\n                                   \"}\"]\n                                 [\"{\" (indent '(do @cond)) \"}\"])))))\n        \"}).call(this)\"])\n\n\n\n\n\n\n\n\n\n\n\n\n(docs \"similar to `pipe`, this macro allows function calls to be applied\nin sequence, as is common in fluent interfaces. deprecated in preference to `pipe`\"\n      tags [deprecated language]\n      example (chain a (b c d) (e) (f g)))\n      \n\n(macro chain (object ...calls)\n       (if (= 0 calls.length) (transpile object)\n           (= 1 calls.length) '(send @object ...@(get (first calls) 'contents))\n           (do\n            (var lines (map calls (#(call index)\n                                    [\".\" (transpile (first call.contents))\n                                         \"(\" (interleave \", \" (map (rest call.contents) transpile)) \")\"])))\n\n            [ (transpile object)\n              (first lines)\n              \"\\n  \"\n              (recurse-indent\n               (interleave \"\\n\" (rest lines)))])))\n\n\n\n\n\n\n\n;;nodoc, deprecated\n(macro chainable (...names)\n       (each (name) names\n             '(macro @name (target ...calls)\n                     '(chain (call @name @target) ...@calls))))\n\n\n\n\n(docs \"uses the javascript `instanceof` operator to check if `item` is of `type`.\"\n      tags [language type]\n      example (instance-of? (new Date) Date))\n(macro instance-of? (item type)\n       [\"(\" (transpile item) \" instanceof \" (transpile type) \")\"])\n\n\n\n\n\n\n(docs \"returns true if `haystack` includes `needle`.  `haystack` can be a string or array/list.\"\n      tags [arrays collections]\n      examples [ (includes? 'hello 'h) (includes? `[ Veni vidi vici] 'vidi) ])\n(macro includes? (haystack needle)\n       '(pipe @haystack (.index-of @needle) (!= -1)))\n\n\n\n\n\n\n\n(docs \"returns true if `haystack` does NOT include `needle`.\n`haystack` can be a string or array/list\"\n      tags [arrays collections]\n      examples [ (excludes? 'hello 10) (excludes? `[ Veni vidi vici] 'attenti) ])\n(macro excludes? (haystack needle)\n       `(pipe @haystack (.index-of @needle) (= -1)))\n\n\n\n\n\n\n(docs \"similar to the javascript truthiness predicate `as-boolean`, returns true unless the `thing` is undefined or null\"\n      tags [type]\n      example (exists? window))\n(macro exists? (thing)\n       `(and (defined? @thing) (!= @thing null)))\n\n\n\n\n\n(macro with-state (k v ...body)\n       (var before (^state k))\n       (^state k v)\n       (var return-value\n            (interleave \"\\n\" (map body transpile)))\n       (^state k before)\n       return-value)\n\n\n\n\n\n\n(docs \"combines elements of array `arr` into a string, inserting\n`glue` string between each element.  if `glue` is omitted (only one\nargument provided), the elements of `arr` are joined with an empty\nstring\"\n\n      tags [arrays collections strings]\n      examples [ (join `[ a few words ]  \", \" )\n                 (join `[ several more words ]) ])\n\n(macro join (arr glue)\n       (if (and (defined? glue) (undefined? arr))\n           (assign arr glue glue undefined))\n       `(.join @arr @(or glue \"\\\"\\\"\")))\n\n\n\n\n(macro *destructure (pairs)\n     (var destructured [])\n     (bulk-map pairs (#(lhs rhs)\n                       (var transpiled-rhs (transpile rhs))\n                       (switch lhs.type\n                               ('bracket\n                                (var literal-rhs? (pipe transpiled-rhs (output-formatter) (match-regex? \"^[\\._a-zA-Z0-9]+$\"))\n                                     source (if literal-rhs?\n                                                transpiled-rhs\n                                                (do                             \n                                                 (var symbol (^symbol))\n                                                 (destructured.push [symbol transpiled-rhs])\n                                                 symbol)))\n                                (each (item index) lhs.contents\n                                      (destructured.push [(transpile item) '(get @source @index)]))\n                                (unless literal-rhs?\n                                        (destructured.push [source 'undefined])))\n                               ('brace\n                                (var literal-rhs? (pipe transpiled-rhs (output-formatter) (match-regex? \"^[\\._a-zA-Z0-9]+$\"))\n                                     source (if literal-rhs?\n                                                transpiled-rhs\n                                                (do                             \n                                                 (var symbol (^symbol))\n                                                 (destructured.push [symbol transpiled-rhs])\n                                                 symbol)))\n                                (each (item index) lhs.contents\n                                      (var tr-item (transpile item))\n                                      (destructured.push [tr-item '(get @source @[\"\\\"\" tr-item \"\\\"\"])]))\n                                (unless literal-rhs?\n                                        (destructured.push [source 'undefined])))\n\n                               (default\n                                (destructured.push [ (transpile lhs)\n                                                     (if rhs transpiled-rhs 'undefined)])))))\n     destructured)\n\n(docs \"registers variables in `pairs` inside of the current scope using the javascript var keyword.\ndestructuring from arrays and objects is also supported, as shown in the examples\"\n      tags [ variables language ]\n      examples: [ (var a 1 b 2)\n                  (var a [ 1 2 3 ] [ b c d ] a)\n                  (var a)\n                  (var { log dir } console)\n                  (var {a} {a 1 b 2} c 3)\n                  (var a 1 [b c] [2 3]) ])\n\n(macro var (...pairs)\n       (as-statement\n        [\"var \" (pipe pairs\n                    (^*destructure)\n                    (map (#(pair) [(first pair) \" = \" (second pair)]))\n                    (interleave \",\\n    \")) ]))\n\n\n\n\n(docs \"assigns alternating keys and values in `args`.  This works much\nlike `var`, but without the var keyword.  It is important to\nunderstand variable scope in javascript in order to use this macro safely.\nThis macro supports destructuring, as shown in examples\"\n      tags [language variables]\n      examples [ (assign a 1)\n(assign a 1 b 2)\n(assign [ a b ] [ 1 2 ])\n(assign [ a b ] c)\n(assign { a b } c\n        [ x y ] a)])\n\n(macro assign (...pairs)\n        (pipe pairs\n            (^*destructure)\n            (map (#(pair) (as-statement [(first pair) \" = \" (second pair)])))\n            (interleave \"\\n\")))\n\n\n(docs \"sets default values for variables in current scope. `pairs` are\nalternating variable names and default values\"\n      tags [variables language]\n      example (default a 10 b 20))\n(macro default (...pairs)\n       (interleave \"\\n\" (bulk-map pairs (#(name value)\n                                  '(assign @name (ternary (defined? @name) @name @value))))))\n\n\n(macro import-namespace (namespace)\n       (var namespace-as-string (output-formatter (transpile namespace)))\n       (unless (sibilant.macros.namespaces.has-own-property namespace-as-string)\n               (set sibilant.macros.namespaces namespace-as-string {}))\n       (sibilant.macros.search-path.unshift namespace-as-string)\n       undefined)\n\n\n(macro namespace (namespace)\n       `(import-namespace @namespace)\n       (set sibilant.macros 'namespace (get sibilant.macros.namespaces (output-formatter (transpile namespace))))\n       undefined)\n\n\n\n\n\n\n(docs \"checks if `object` has property `key`.  returns true or false.\"\n      tags [collections objects]\n      example (has-key? object 'a))\n\n(macro has-key? (object key)\n       `(.has-own-property @object @key))\n\n\n\n\n\n\n\n(docs \"retreives object properties, potentially deeply. If more than one `keys` are provided,\n`get` fetches deeply into nested objects or arrays.\nWhen javascript dot notation can be used (`a.b = 3`), it is.\nOtherwise, bracket notation is used.\"\n      tags [collections objects]\n      examples [ (get an-object 'static-attribute-name)\n                 (get object dynamic-attribute-name)\n                 (get object \"these attributes\" \"can't be dotted\")\n                 (get array 0)\n                 (get object 'a 'b c)\n                 (get array 0 1 2) ])\n\n\n(macro get (obj ...keys)\n       [(transpile obj)\n         (map keys (#(key)\n                     (var transpiled (transpile key)\n                          output (output-formatter transpiled))\n\n                     (if (match-regex? output \"^\\\"[a-zA-Z0-9]+\\\"$\")\n                         [\".\" (replace-all output \"\\\"\" \"\") ]\n                         [\"[\" transpiled \"]\"])))])\n\n\n\n\n\n\n\n\n\n\n(docs \"assigns object properties to `arr` in pairs, alternating between keys and values.\nWhen javascript dot notation can be used (`a.b = 3`), it is.  Otherwise, bracket notation is used\"\n      tags [collections objects]\n      examples [ (set an-object 'static-attribute-name 'value)\n                 (set object dynamic-attribute-name \"key name determined at runtime\")\n                 (set array 0 \"first element of array\")\n                 (set object \"can't be dotted\" 'value)\n                 (set object 'first-attribute 'first-value\n                      'second-attribute 'second-value) ])\n\n(macro set (arr ...kv-pairs)\n       (interleave \"\\n\" (bulk-map kv-pairs (#(k v) `(assign (get @arr @k) @v)))))\n\n(docs \"checks if a string is identical to the lower-cased version of itself\"\n      tags [strings]\n      example (lower-case? \"abc\"))\n(macro lower-case? (str)\n       `(= (.to-lower-case @str) @str))\n\n\n\n(docs \"checks if a string is identical to the upper-cased version of itself\"\n      tags [strings]\n      example (lower-case? \"abc\"))\n(macro upper-case? (str)\n       `(= (.to-upper-case @str) @str))\n\n\n(docs \"inserts a pragma for source-mapping-url\"\n      tags []\n      example (source-mapping-url \"/example.map\"))\n\n(macro source-mapping-url (url)\n       [ \"//# sourceMappingURL=\" (pipe url transpile output-formatter eval) \"\\n\" ])\n\n\n(docs \"sorts `array-of-objects` by `attribute` using locale-compare\"\n      tags [collections objects arrays experimental]\n      example (pipe [ {state 'ca} {state 'or} {state 'ny} ] (sort-by 'state))\n      references [\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/localeCompare\"])\n\n(macro sort-by (array-of-objects attribute)\n       `(.sort @array-of-objects (#-> (get @attribute)\n                                      .to-string\n                                      (.locale-compare (get #1 @attribute)))))\n\n\n(docs \"stores a duplicate copy of `current-macro-name` as\n`new-macro-name` in current namespace.  No output.\"\n      tags [macros])\n\n(macro alias-macro (current-macro-name new-macro-name)\n       (var current-macro-name (output-formatter (transpile current-macro-name))\n            new-macro-name (output-formatter (transpile new-macro-name)))\n       (set sibilant.macros.namespace\n            new-macro-name (get sibilant.macros.namespace current-macro-name))\n       null)\n"]}