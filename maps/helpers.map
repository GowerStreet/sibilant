{"version":3,"sources":["/Users/jbr/code/sibilant/src/helpers.sibilant","/Users/jbr/code/sibilant/include/macros.sibilant"],"names":[],"mappings":"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","sourcesContent":["\n\n(def tap (item fn)\n     (fn item)\n     item)\n\n(def recurse-indent (...args)\n     (map args\n          (#(arg)\n            (if (node? arg)\n                (merge-into arg { contents (recurse-indent ...(compact (flatten arg.contents))) })\n\n                (list? arg) (recurse-indent ...arg)\n\n                (number? arg) (arg.to-string)\n\n                (string? arg)\n                (|> arg\n                    (replace-all \"\\\\n\" \"\\n  \")\n                    (replace-all \"\\\\n\\\\s+\\\\n\" \"\\n\\n\"))\n\n                arg))))\n\n(def indent (...args)\n     [\"\\n  \" (recurse-indent (map args transpile)) \"\\n\"])\n\n(def escape-regex (string)\n     (string.replace (regex \"[\\\\-\\\\[\\\\]\\\\/\\\\{\\\\}\\\\(\\\\)\\\\*\\\\+\\\\?\\\\.\\\\\\\\\\^\\\\$\\\\|]\" 'g) \"\\\\$&\"))\n\n(def qescape (content)\n     (if (not (exists? content)) \"\"\n         (string? content) (pipe content\n                                 (.split (first \"\\\\\\\\ \"))\n                                 (.join (.slice \"\\\\\\\\ \" 0 -1))\n                                 (replace-all \"\\\"\" \"\\\\\\\"\")\n                                 (replace-all \"\\\\n\" \"\\\\n\\\" +\\n\\\"\"))\n         content))\n\n(def map-node (node fn)\n     (if (node? node)\n         (do\n          (var mapped-node (fn node))\n          (when (node? mapped-node)\n                (set mapped-node 'contents (map-node mapped-node.contents fn)))\n\n          mapped-node)\n\n         (list? node) (map node (#> (map-node #0 fn)))\n         (fn node)))\n\n(def each-node (node fn)\n     (if (node? node) (when (fn node) (each-node node.contents fn))\n         (list? node) (each (c) node (each-node c fn))\n         (fn node)))\n\n(def statement? (transpiled)\n     (if (node? transpiled) (statement? transpiled.contents)\n         (list? transpiled) (statement? (last transpiled))\n         (string? transpiled) (= \";\" (last transpiled))\n         false))\n\n(def as-statement (node)\n     (var transpiled (transpile node))\n\n     (if (empty-node? transpiled) undefined\n         (statement? transpiled) transpiled\n         [ transpiled \";\" ]))\n\n(def unquote? (node) (node? node 'at))\n\n(def find-unquotes (node)\n     (var unquotes {})\n     (each-node node (#(n)\n                       (when (unquote? n)\n                             (set unquotes n.node-id (transpile n)))\n                       (not (node? n 'tick))))\n     unquotes)\n\n(def splice-dots (node)\n     (when (and node (list? node.contents))\n           (var contents [])\n           (each (content) node.contents\n                 (if (and (node? content 'dots)\n                          (list? content.contents)\n                          (= content.contents.length 1)\n                          (list? (first content.contents)))\n                     (contents.push.apply contents (first content.contents))\n                     (contents.push content)))\n\n           (set node 'contents contents))\n     node)\n\n\n(def alternating-keys-and-values (hash)\n     (flatten (map (keys hash)\n                   (#(key) [key, (get hash key)]))))\n\n\n(def map-node-for-quote-expansion (node expansions)\n     (if (node? node)\n         (do\n          (var mapped-node (if (expansions.has-own-property node.node-id) (get expansions node.node-id) (clone node)))\n          (when (node? mapped-node)\n                (set mapped-node 'contents (map-node-for-quote-expansion mapped-node.contents expansions)))\n\n          (assign mapped-node (splice-dots mapped-node))\n          mapped-node)\n\n         (list? node)\n         (map node (#> (map-node-for-quote-expansion #0 expansions)))\n\n         node))\n\n","(namespace core)\n\n(docs \"the simplest way to conditionally execute code.\"\n      tags [ conditional flow-control ]\n      example (ternary (< 50 100)\n         \"fifty is less than 100\"\n         \"fifty is more than 100\"))\n\n(macro ternary (cond if-true if-false)\n       [\"(\" (transpile cond) \") ? \"\n            (transpile if-true) \" : \"\n            (transpile if-false)])\n\n\n\n\n\n;; nodoc\n(macro set (arr ...kv-pairs)\n       (interleave \"\\n\" (bulk-map kv-pairs\n                                  (#(k v)\n                                    (as-statement [\"(\" (transpile arr) \")\"\n                                                    \"[\" (transpile k) \"] = \" (transpile v) ])))))\n;; nodoc\n(macro var (...pairs)\n       (as-statement\n        [\"var \"\n         (interleave \",\\n    \"\n               (bulk-map pairs\n                         (#(name value)\n                           [ (transpile name) \" = \" (transpile value) ])))\n         ]))\n\n;; nodoc\n(macro get (obj ...keys)\n       [\"(\" (transpile obj) \")\" (map keys (#(key)\n                                            [\"[\" (transpile key) \"]\"]))])\n\n\n\n\n\n(docs \"stores a duplicate copy of `current-macro-name` as\n`new-macro-name` in current namespace.  No output.\"\n      tags [macros])\n\n(macro alias-macro (current-macro-name new-macro-name)\n       (var current-macro-name (output-formatter (transpile current-macro-name))\n            new-macro-name (output-formatter (transpile new-macro-name)))\n       (set sibilant.macros.namespace\n            new-macro-name (get sibilant.macros.namespace current-macro-name))\n       null)\n\n\n\n\n\n(docs \"calls the `method` on `object` as a function with `args` as the arguments\"\n      tags [ functions ]\n      example (send object method first-argument second-argument third-argument))\n\n(macro send (object method ...args)\n       [(transpile object) \".\" (transpile method)\n               \"(\" (interleave \", \" (map args transpile)) \")\"])\n\n\n\n\n\n(docs \"calls the function `fn` with arguments passed as an array in `arglist`\"\n      tags [functions]\n      example (apply my-function [ first-arg second-arg third-arg ]))\n\n(macro apply (fn arglist)\n       '(.apply @fn this @arglist))\n\n\n\n\n(docs \"builds an array with `first` as the zeroth index and the\nelements provided by array `rest` as the subsequent elements, as\nsiblings with `first`.\"\n      tags [arrays collections deprecated]\n      example (cons 1 [ 2 3 4 ]))\n\n(macro cons (first rest)\n       [\"[ \" (transpile first) \" ].concat(\" (transpile rest) \")\"])\n\n\n\n\n(docs \"adds `additional` elements onto the right-side (tail) of `list`. deprecated\"\n      tags [ arrays collections deprecated ]\n      example (append [ 1 2 3 ] 4 5 6))\n(macro append (list ...additional)\n       '(.concat @list (list ...@additional)))\n\n\n(docs \"fetches length attribute from `arr`\"\n      tags [ arrays collections ]\n      example (length [ 1 2 3 ]))\n(macro length (arr)\n       '(get @arr 'length))\n\n(docs \"executes the `body` inside of a self-executing function. The\nlast statement/expression of the body is returned.\"\n      tags [functions]\n      examples [(scoped true) (scoped (var a 1) (+ a 2))])\n(macro scoped (...body)\n       '(.call (lambda @{node this args []} ...@body) this))\n\n;;nodoc\n(macro *number-words (...number-words)\n       (.map number-words\n             (#(word index)\n               [\n                `(docs @(\"fetches the \"\n                         (output-formatter (transpile word))\n                         \" element from `arr`\")\n                       tags [arrays collections]\n                       example (@word my-array))\n                 `(macro @word (arr)\n                         (var index @index)\n                         `(get @arr @index))\n               ])))\n(*number-words first second third fourth fifth sixth seventh eighth ninth)\n(delete-macro *number-words)\n\n(docs \"fetches all but the first item of `arr`\"\n      tags [arrays collections]\n      example (rest [ 1 2 3 ]))\n(macro rest (arr) '(.slice @arr 1))\n\n(docs \"fetches just the last element of `arr` by slicing.\"\n      tags [arrays collections]\n      example (last [ 1 2 3 ]))\n(macro last (arr) '(first (.slice @arr -1)))\n\n;;nodoc\n(macro = (a b) [ (transpile a) \" === \" (transpile b) ])\n\n(docs \"adds `args` using the javascript `+` operator. Since javascript\noverloads this for string concatenation, this macro can be used for\nthis as well.\"\n      tags [ strings numbers ]\n      examples [ (+ 1 2 3) (+ 'hello 'world) ])\n(macro +   (...args)\n       [\"(\" (interleave \" + \" (map args transpile)) \")\"])\n\n\n(docs \"subtracts each subsequent element of `args`\"\n      tags [numbers]\n      examples [ (- 2 1) (- 10 5 1) ])\n(macro -   (...args)\n       [\"(\" (interleave \" - \" (map args transpile)) \")\"])\n\n(docs \"multiplies elements of `args`\"\n      tags [numbers]\n      example (* 3 4 5))\n(macro *   (...args)\n       [\"(\" (interleave \" * \" (map args transpile)) \")\"])\n\n(docs \"divides each subsequent element of `args`\"\n      tags [numbers]\n      examples [ (/ 1 2)\n                 (/ 1 2 3) ])\n(macro /   (...args)\n           [\"(\" (interleave \" / \" (map args transpile)) \")\"])\n\n\n(docs \"short circuiting operator returns the first element of `args` that evaluates to be truthy\"\n      tags [ conditional flow-control booleans ]\n      example (or (= 1 2) (string? []) \"one is not two and an array is not a string\"))\n(macro or  (...args)\n       [\"(\" (interleave \" || \" (map args transpile)) \")\"])\n\n\n(docs \"returns the last element if all elements of `args` are truthy, or the\nfirst non-truthy element if it exists\"\n      tags [ booleans ]\n      example (and (string? \"string\") (number? 10) (= 1 1)))\n(macro and (...args)\n       (ternary (= 1 (length args)) (transpile (first args))\n                [\"(\" (interleave \" && \" (map args transpile)) \")\"]))\n\n(docs \"modulus operator\"\n      tags [numbers]\n      example (mod 10 2))\n(macro mod (...args)\n       [\"(\" (interleave \" % \" (map args transpile)) \")\"])\n\n\n\n\n\n\n(macro *def-infix (macro-name word js-comparator)\n       (var docstring (\"compares `args` from left to right, \"\n                       \"returning true if each element is \"\n                       (.slice word.token 1 -1)\n                       \" than the next\"))\n\n       (var js-comparator (or js-comparator macro-name))\n\n       [\n        `(docs @docstring\n               tags [comparison]\n               examples [ (@macro-name a b c) (@macro-name a b) ])\n         \n         `(macro @macro-name (...args)\n                 (var js-comparator (quote @js-comparator))\n                 `(and ...@(map (args.slice 0 -1)\n                                (#(item index)\n                                  [ item \" \" js-comparator \" \"\n                                    (get args (+ 1 index)) ]))))\n         ])\n\n(*def-infix > \"greater than\")\n(*def-infix <  \"less than\")\n(*def-infix <= \"less than or equal\")\n(*def-infix >= \"greater than or equal\")\n(*def-infix != \"not equal (using threequals)\" !==)\n(*def-infix = \"equal (using threequals)\" ===)\n\n(delete-macro *def-infix)\n\n\n\n\n\n\n(docs \"increments `item` by `increment`\"\n      tags [numbers]\n      example (incr-by n 5))\n(macro incr-by (item increment)\n       [ (transpile item) \" += \" (transpile increment)])\n\n\n\n\n(docs \"increments item by 1\",\n      tags [numbers],\n      example (incr i))\n(macro incr (item)\n       [\"((\" (transpile item) \")++)\"])\n\n\n(docs \"decrements item by 1\",\n      tags [numbers],\n      example (decr i))\n(macro decr (item) [\"((\" (transpile item) \")--)\"])\n\n(docs \"uses the javascript new keyword to construct an object using\n      `constructor`, with `args` passed as arguments to the constructor.\"\n      tags [functions]\n      example (new RegExp \"hello\" 'g))\n\n(macro new (constructor ...args)\n       [\"(new \" '(call @constructor ...@args) \")\"])\n\n\n\n(docs \"builds a regex using `pattern` and `flags` as arguments to the RegExp constructor\"\n      tags [regex]\n      examples [ (regex \"[0-9]+\") (regex \"0x[0-9a-f]+\" 'i)])\n(macro regex (pattern flags)\n       '(new RegExp @pattern @(or flags 'undefined)))\n\n\n\n(docs \"predicate to test for equality with zero\"\n      tags [numbers]\n      example: (zero? n))\n(macro zero? (item) '(= @item 0))\n\n\n(docs \"returns true if the array `arr` has a length of zero\"\n      tags [arrays collections]\n      example: (empty? []))\n(macro empty? (arr)\n       `(= 0 (length @arr)))\n\n\n(docs \"returns true if `number` is not divisible by 2\"\n      tags [numbers]\n      example (odd? 5))\n(macro odd? (number)\n       '(= 1 (mod @number 2)))\n\n\n(docs \"returns true if `number` is divisible by 2 with no remainder\"\n      tags [numbers]\n      example (even? 10))\n(macro even? (number)\n       '(= 0 (mod @number 2)))\n\n\n(docs \"exposes the javascript typeof operator. most often, predicates\nsuch as `string?`, `function?`, `number?`, etc are preferred.\"\n      tags [type]\n      example: (typeof 5))\n(macro typeof (thing) [\"typeof \" (transpile thing)])\n\n\n(docs \"returns true if all of the `things` are javascript strings\"\n      tags [strings type]\n      examples: [ (string? test-object) (string? 'yes 'yes 'yes) ])\n(macro string? (...things)\n       '(and ...@(map things (#(thing) '(= (typeof @thing) 'string)))))\n\n\n(docs \"returns true if all of the `things` are functions\"\n      tags [functions type]\n      examples: [ (function? fn) (function? err cb) ])\n(macro function? (...things)\n       '(and ...@(map things (#(thing) '(= (typeof @thing) 'function)))))\n\n\n(docs \"returns true if all of the `things` are undefined, as tested\nwith `typeof`, not equality with literal undefined. This is the\ninverse of `defined?`\"\n      tags [type]\n      examples: [ (undefined? argument)\n                  (undefined? 1 2 undefined) ])\n(macro undefined? (...things)\n       '(and ...@(map things (#(thing) '(= (typeof @thing) 'undefined)))))\n\n\n(docs \"returns true if none of the `things` are undefined, as tested\nwith `typeof`. This is the inverse of `defined?`\"\n      tags [type]\n      examples: [ (defined? variable)\n                  (defined? var1 var2 var3) ])\n(macro defined? (...things)\n       '(and ...@(map things (#(thing) '(!= (typeof @thing) 'undefined)))))\n\n\n(docs \"returns true if all of the `things` are numbers, as tested\nwith `typeof`\"\n      tags [numbers type]\n      examples: [ (number? 1) (number? 1 2 3) ])\n(macro number? (...things)\n       '(and ...@(map things (#(thing) '(= (typeof @thing) 'number)))))\n\n\n;;nodoc\n(macro if (arg truebody falsebody)\n       [\"(function() {\"\n        (indent [\"if (\" (transpile arg) \") {\"\n                        (indent '(do ...@truebody))\n                        \"} else {\"\n                        (indent '(do ...@falsebody))\n                        \"}\"])\n         \"}).call(this)\"])\n\n\n(docs \"inserts the result of each subsequent call in `calls` as the\nsecond argument to the next macro. This is very much akin to clojure's thread-first arrow or elixir's pipe operator\"\n      tags [language]\n      examples: [\n                 (pipe \"a b c d\"\n                     .to-upper-case\n                     (.replace \"A\" \"X\")\n                     (.split \" \")\n                     first\n                     (concat \" marks the spot\"))\n\n                  (pipe \"{\\\"a\\\": {\\\"b\\\": [ 1, 2, 3 ]}}\"\n                        JSON.parse\n                        (get 'a)\n                        JSON.stringify)\n                  ]\n     references: [ \"https://clojuredocs.org/clojure.core/-%3E\"\n                   \"http://elixir-lang.org/docs/v1.0/elixir/Kernel.html#|>/2\" ])\n(macro pipe (...calls)\n       (inject undefined calls\n               (#(value item)\n                 (if (undefined? value) item\n                     (scoped\n                      (var cloned (if (node? item 'literal 'dots)\n                                      `(@item)\n                                      (clone item)))\n                     \n                      (merge-into cloned\n                                  { contents [ (first cloned.contents)\n                                               value\n                                               ...(rest cloned.contents) ] }))))))\n\n(alias-macro pipe |>)\n\n\n(docs \"inserts `contents` transpiled to javascript as a comment in the\noutput file, removing it from execution.\"\n      tags [language]\n      example (comment (scoped 1)))\n(macro comment (...contents)\n       (map contents (#(content)\n                       [\"// \"(recurse-map (transpile content)\n                                    (#(item)\n                                      (ternary item\n                                               (pipe item transpile output-formatter\n                                                     (.replace (regex \"\\n\" 'g) \"\\n// \"))\n                                               null)))])))\n\n\n;; (docs \"checks if `first-thing` is equal to all of the `other-things`.\n;; Most of the time, there is only one other thing. Javascript threequals\n;; is always used.  Please note that if evaluating `first-thing` has\n;; side-effects, they will be called `(length other-things)` times.\"\n;;       examples [ (= 1 2)\n;;                  (= 10 (+ 5 5) (- 15 5)) ])\n\n\n(docs \"returns true if `thing` is an array in javascript. aliased as\n`list?`.\"\n      tags [type arrays]\n      example: (array? arr))\n\n(macro array? (thing)\n       (var transpiled (transpile thing))\n       [\"((\" transpiled \") && typeof (\" transpiled \") === \\\"object\\\" && (\"\n               transpiled \").constructor.name === \\\"Array\\\")\"])\n(alias-macro array? list?)\n\n\n(docs \"returns true if `thing` is an object that is not an array in javascript. aliased as\n`object?`.\"\n      tags [type objects]\n      example: (object? arr))\n\n(macro hash? (thing)\n       `(and (= 'object (typeof @thing))\n             (!= @thing null)\n             (!= (get @thing 'constructor 'name) 'Array)))\n(alias-macro hash? object?)\n\n(macro *scoped-without-return (...body)\n       [\"(function() {\" (indent ...body) \"}).call(this)\"])\n\n\n(macro *scoped-without-source (...body)\n       `(*scoped-without-return (do ...@body)))\n\n\n(docs \"evaluates statements in `body` if `condition` is true. `body`\n      is `scoped` in a self-evaluating function to support having a\n      return value from the if statement.\"\n      tags [ conditional flow-control language ]\n      example: (when (< 3 i) (console.log i) (get arr i)))\n\n(macro when (condition ...body)\n       (^*scoped-without-return\n         \"if (\" @condition \") {\"\n         (indent `(do ...@body))\n         \"}\"))\n\n\n(docs \"boolean negation, as determined by javascript truthiness\"\n      tags [booleans]\n      example: (not (string? 1))\n      references: [ \"https://developer.mozilla.org/en-US/docs/Glossary/Truthy\"\n                    \"https://developer.mozilla.org/en-US/docs/Glossary/Falsy\" ])\n(macro not (exp)\n       [\"!(\" (transpile exp) \")\"])\n\n\n\n\n\n(docs \"evaluates statements in `body` if `condition` is falsy. `body`\n      is `scoped` in a self-evaluating function to support having a\n      return value from the if statement.\"\n      tags [conditional flow-control]\n      example: (unless (< 3 i) (console.log i) (get arr i)))\n\n(macro unless (condition ...body)\n       [\"(function() {\"\n        (indent [\"if (\" '(not @condition) \") {\"\n                        (indent '(do ...@body))\n                        \"}\"])\n        \"}).call(this)\"])\n\n;;nodoc\n(macro assign (...args)\n       (interleave \"\\n\"\n             (bulk-map args (#(name value)\n                              (as-statement [ (transpile name) \" = \"\n                                                    (transpile value)])))))\n\n\n\n(docs \"outputs debug information about `arg`.  If `label` is\nomitted (only one argument is provided), the name of the variable or\nexpression of that first expression will be logged. Aliased as `pretty-log`\"\n      tags [language]\n      examples: [ (log-pretty 'my-label value)\n                  (log-pretty (+ 1 2)) ])\n(macro log-pretty (label arg)\n       (var node this)\n       (when (undefined? arg)\n             (assign arg label\n                     label [\"\\\"\" (prettify label false) \"\\\"\"]))\n       `(console.log (concat @[\"\\\"\" node.file \":\" node.line \"\\\"\"] \" \" @label \" = \" (prettify @arg))))\n(alias-macro log-pretty pretty-log)\n\n(docs \"iterates over `array`, evaluating `body` once for each value in\n`array`.  If `item` is a literal name, that will be the variable into\nwhich the `array` element is yielded (current value).  If `item` is an expression, it\ncan contain the current value, the index, and the `array`.\"\n      tags [ arrays language collections ]\n      references [\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach\"]\n      examples [ (each number [ 1 2 3 ] (console.log number))\n                 (each (letter index) `[ a b c d ]\n                       (set letters letter index)\n                       (pipe letter (.to-upper-case) (console.log))) ])\n                \n(macro each (item array ...body)\n       '(.for-each @array\n                   (lambda @{ node this\n                              args (if (node? item 'expression) item [item]) }\n                           ...@body)))\n\n\n\n\n\n\n\n\n;;nodoc\n;;deprecated\n(macro macro-expand (name)\n       (var macro (get macros (output-formatter (transpile name))))\n       (if macro\n           (macro.to-string)\n           \"undefined\"))\n\n\n\n\n(docs \"throws a new javascript error with arguments as the string\"\n      tags [language]\n      example (throw (new Error \"could not find matching socks\")))\n\n(macro throw (error)\n       [\"throw \" (transpile error)])\n\n\n\n\n\n(docs \"double-negates `expr`, converting it to a boolean\"\n      tags [type booleans]\n      examples: [ (as-boolean 0)\n                  (as-boolean true) ])\n(macro as-boolean (expr)\n       [\"(!!(\" (transpile expr) \"))\"])\n\n\n;;nodoc because this needs attention\n;;todo\n(macro try (tryblock catchblock)\n       [\"(function() {\"\n        (indent [\"try {\"\n                 (indent '(do @tryblock))\n                 \"} catch (e) {\"\n                 (indent '(do @catchblock))\n                 \"}\"])\n         \"}).call(this)\"])\n\n\n\n\n\n;; (docs \"sets or gets sibilant state. If one arg is provided, this macro\n;; gets the value.  If more than two args are provided, sibilant state is\n;; set in pairs.  deprecated. internal.\")\n\n(macro state (...pairs)\n       (if (= 1 (length pairs))\n           (get sibilant.state (output-formatter (transpile (first pairs))))\n           (do (bulk-map pairs (#(k v) (set sibilant.state (output-formatter (transpile k)) (eval (output-formatter (transpile v))))))\n               null)))\n\n\n;;nodoc\n;;internal\n(macro symbol ()\n       (var symbol-count (or (get sibilant.state 'symbol-count) 0)\n            new-symbol-count (+ 1 symbol-count))\n       (^state 'symbol-count new-symbol-count)\n       [(\"$_symbol\" new-symbol-count \"_$\")])\n\n\n\n\n\n(docs \"evaluates the `body` as long as `condition` is truthy,\nreturning the value of the last expression in `block` when `condition`\nceases to be truthy. See also `until`\"\n      tags [loops flow-control]\n      example: (while (> 5 i) (console.log i) (decr i)))\n(macro while (condition ...body)\n       (var symbol (^symbol))\n       '(*scoped-without-source\n         (var @symbol)\n         @{ type 'output\n               contents [\"while (\" (transpile condition) \") {\"\n                          (indent '(assign @symbol (*scoped-without-source ...@body)))\n                          \"}\"] }\n         @symbol))\n\n\n\n\n(docs \"evaluates the `body` as long as `condition` is falsy,\nreturning the value of the last expression in `block` when `condition`\nceases to be falsy. See also `while`\"\n      tags [loops flow-control]\n      example: (until (< 5 i) (console.log i) (incr i)))\n\n(macro until (condition ...body)\n       '(while (not @condition) ...@body))\n\n\n\n\n(docs \"returns true if the `string` matches `regexp`.  Deprecated in\n      preference to `.match` (`send` dot-invocation).\"\n      tags [regex strings]\n      example: (match? (regex \"^[a-z]+$\" 'i) 'word))\n(macro match? (regexp string)\n       '(.match @string @regexp))\n\n(docs \"similar to `match?` but builds a regex out of the `pattern` and `flags`.\"\n      tags [regex strings]\n      example (match-regex? 'word \"^[a-z]+$\" 'i))\n(macro match-regex? (string pattern flags)\n       '(match? (regex @pattern @flags) @string))\n\n\n(docs \"replaces the first occurance of `pattern` (as a regex) with `replacement`\"\n      tags [regex strings]\n      example: (replace \"hello world\" \"l+o\" \"y there,\"))\n(macro replace (string pattern replacement)\n       '(.replace @string\n              (regex @pattern)\n              @replacement))\n\n(docs \"replaces all occurrances of `pattern` (as a regex) with `replacement`\"\n      tags [regex strings]\n      example: (replace-all \"503-555-1212\" \"[0-9]\" \"#\"))\n(macro replace-all (string pattern replacement)\n       '(.replace @string (regex @pattern 'g) @replacement))\n\n\n\n\n\n\n(docs \"most often called as its alias, `#>`, thunk creates a function\nwith no named arguments. To refer to arguments anonymously, use #n,\nsuch as #0 for the first argument.\"\n      tags [functions language]\n      examples: [ (.map [ 1 2 3 ] (#> (+ 1 #0)))\n                  (window.set-timeout (#> (console.log 'here)) 10) ])\n(macro thunk (...body)\n       (var node this\n            lambda-options { node node args [] })\n\n       (when (not (node? (first body)))\n             (merge-into lambda-options (first body))\n             (assign body (rest body)))\n\n       '(lambda @lambda-options\n       ...@(map-node body\n                 (#(node)\n                   (if (node? node 'arg-placeholder)\n                       '(argument @(replace node.token \"^#\" \"\"))\n                       node)))))\n(alias-macro thunk #>)\n\n\n\n\n\n(docs \"most often called as its alias, `#->`, pipe-thunk applies a pipe chain to the argument of a function and returns the result\"\n      tags [functions language]\n      examples [ (.map `[ a b c ] (#-> (.to-upper-case) (concat \" is a letter\"))) ])\n(macro pipe-thunk (...calls) `(thunk @{ node this } (pipe #0 ...@calls)))\n(alias-macro pipe-thunk #->)\n\n\n\n\n\n\n(docs \"returns the property names of `obj`.\"\n      tags [objects collections]\n      references: [ \"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/keys\" ]\n      example (keys { a 1 b 2 }))\n(macro keys (obj)\n       '(Object.keys @obj))\n\n\n\n\n\n\n(docs \"uses the javascript delete keyword on any number of `objects`.\n      Use in conjunction with `get` or dotted literal notation (a.b).\"\n      tags [objects collections]\n      examples [ (delete object.a object.b)\n                 (delete (get object attribute) (get object \"other attribute\")) ])\n(macro delete (...objects)\n       (interleave \"\\n\" (map objects (#(obj)\n                                 (as-statement [\"delete \" (transpile obj)])))))\n\n\n\n\n\n\n\n(docs \"deletes each macro name in `macro-names` from the current namespace. Use carefully\"\n      tags [macros language])\n(macro delete-macro (...macro-names)\n       (each macro-name macro-names\n             (delete (get sibilant.macros.namespace (output-formatter (transpile macro-name)))))\n       null)\n(alias-macro delete-macro delmacro)\n\n\n\n\n\n\n(docs \"moves macro from `current-macro-name` to `new-macro-name`. Use carefully\"\n      tags [macros language])\n(macro rename-macro (current-macro-name new-macro-name)\n       (^alias-macro current-macro-name new-macro-name)\n       (^delete-macro current-macro-name)\n       null)\n\n\n\n\n\n\n\n\n(docs \"transforms function arguments into an array, using the Array prototype's slice\"\n      tags [functions]\n      example (arguments))\n(macro arguments ()\n       [\"(Array.prototype.slice.apply(arguments))\"])\n\n\n\n\n\n\n\n(docs \"`get`s the argument at `index` in the current function context. Inside of a `thunk` (`#>`), this can be abbreviated with `#n`, where `n` is the argument index.\"\n      tags [functions]\n      example (argument 3))\n(macro argument (index)\n       '(get arguments @index))\n\n\n\n\n(docs \"iterates over each attribute in `obj`\"\n      tags [objects collections]\n      example (each-key key { a 1 b 2 } (console.log key)))\n(macro each-key (as obj ...body)\n       `(pipe @obj (keys)\n              (.for-each (lambda @{ args: (if (node? as 'expression) as [as])\n                                    node: this }\n                                 ...@body))))\n\n\n\n\n\n\n\n(docs \"uses the javascript switch construction to test equality.  documentation todo: needs better description\"\n      tags [flow-control conditional deprecated]\n      examples: [\n                 (switch char\n                         ('a \"it was an a\")\n                         ('b (console.log \"found a b!\")\n                             \"it was a b\")\n                         ([1 2 3 4 5] \"it was an integer from one to five\")\n                         (default \"not sure\"))\n                 ])\n\n(macro switch (obj ...cases)\n       [\"(function() {\"\n         (indent [\"switch(\" (transpile obj) \") {\"\n                   (map cases (#(case-def)\n                                (var case-name-node (first case-def.contents)\n                                     case-labels (if (node? case-name-node 'expression 'bracket)\n                                                     case-name-node.contents\n                                                     [case-name-node])\n                                     case-string (interleave \"\\n\"\n                                                             (map case-labels (#(c)\n                                                                                (if (= 'default c.token)\n                                                                                    \"default:\"\n                                                                                    [\"case \" (transpile c) \":\"])))))\n                                [\"\\n\" case-string (indent '(do ...@(rest case-def.contents)))]))\n                   \"}\"])\n         \"}).call(this)\"])\n\n\n\n\n\n\n\n\n\n\n\n(docs \"tests any number of `alternating-conditions-and-branches`.  If\n      an odd number of branches are supplied, the final branch is a\n      default else clause.  To evaluate more than one expression as a\n      branch, use the `do` macro, as shown in the examples:\"\n      tags [conditional flow-control]\n      examples [ (if true (console.log 'here))\n                 (if (= 1 arguments.length) (console.log \"one argument\")\n                     (= 'blue favorite-color) (console.log \"blue\")\n                     (assign examples 'difficult))\n                 (if (foo?) (do (a b)\n                                (c))\n                     (bar?) (do (baz)\n                                (wibble))\n                     (do (d e)\n                         (console.log 'default))) ])\n\n\n\n(macro if (...alternating-conditions-and-branches)\n       [\"(function() {\"\n        (indent\n         (interleave \" else \"\n               (bulk-map alternating-conditions-and-branches\n                         (#(cond val)\n                           (if (!= (typeof val) 'undefined)\n                                 [\"if (\" (transpile cond) \") {\"\n                                   (indent '(do @val))\n                                   \"}\"]\n                                 [\"{\" (indent '(do @cond)) \"}\"])))))\n        \"}).call(this)\"])\n\n\n\n\n\n\n\n\n\n\n\n\n;; (docs \"similar to `pipe`, this macro allows function calls to be applied\n;; in sequence, as is common in fluent interfaces. deprecated in preference to `pipe`\"\n;;       tags [deprecated language]\n;;       example (chain a (b c d) (e) (f g)))\n\n(macro chain (object ...calls)\n       (console.log \"DEPRECATION WARNING: DO NOT USE CHAIN\")\n       (console.log (\"  \" this.file \":\" this.line \":\" this.col))\n       (if (= 0 calls.length) (transpile object)\n           (= 1 calls.length) '(send @object ...@(get (first calls) 'contents))\n           (do\n            (var lines (map calls (#(call index)\n                                    [\".\" (transpile (first call.contents))\n                                         \"(\" (interleave \", \" (map (rest call.contents) transpile)) \")\"])))\n\n            [ (transpile object)\n              (first lines)\n              \"\\n  \"\n              (recurse-indent\n               (interleave \"\\n\" (rest lines)))])))\n\n\n\n\n\n\n\n(docs \"uses the javascript `instanceof` operator to check if `item` is of `type`.\"\n      tags [language type]\n      example (instance-of? (new Date) Date))\n(macro instance-of? (item type)\n       [\"(\" (transpile item) \" instanceof \" (transpile type) \")\"])\n\n\n\n\n\n\n(docs \"returns true if `haystack` includes `needle`.  `haystack` can be a string or array/list.\"\n      tags [arrays collections]\n      examples [ (includes? 'hello 'h) (includes? `[ Veni vidi vici] 'vidi) ])\n(macro includes? (haystack needle)\n       '(pipe @haystack (.index-of @needle) (!= -1)))\n\n\n\n\n\n\n\n(docs \"returns true if `haystack` does NOT include `needle`.\n`haystack` can be a string or array/list\"\n      tags [arrays collections]\n      examples [ (excludes? 'hello 10) (excludes? `[ Veni vidi vici] 'attenti) ])\n(macro excludes? (haystack needle)\n       `(pipe @haystack (.index-of @needle) (= -1)))\n\n\n\n\n\n\n(docs \"similar to the javascript truthiness predicate `as-boolean`, returns true unless the `thing` is undefined or null\"\n      tags [type]\n      example (exists? window))\n(macro exists? (thing)\n       `(and (defined? @thing) (!= @thing null)))\n\n\n\n\n\n(macro with-state (k v ...body)\n       (var before (^state k))\n       (^state k v)\n       (var return-value\n            (interleave \"\\n\" (map body transpile)))\n       (^state k before)\n       return-value)\n\n\n\n\n\n\n(docs \"combines elements of array `arr` into a string, inserting\n`glue` string between each element.  if `glue` is omitted (only one\nargument provided), the elements of `arr` are joined with an empty\nstring\"\n\n      tags [arrays collections strings]\n      examples [ (join `[ a few words ]  \", \" )\n                 (join `[ several more words ]) ])\n\n(macro join (arr glue)\n       (if (and (defined? glue) (undefined? arr))\n           (assign arr glue glue undefined))\n       `(.join @arr @(or glue \"\\\"\\\"\")))\n\n\n\n\n(macro *destructure (pairs)\n     (var destructured [])\n     (bulk-map pairs (#(lhs rhs)\n                       (var transpiled-rhs (transpile rhs))\n                       (switch lhs.type\n                               ('bracket\n                                (var literal-rhs? (|> transpiled-rhs (output-formatter) (match-regex? \"^[\\._a-zA-Z0-9]+$\"))\n                                     source (if literal-rhs?\n                                                transpiled-rhs\n                                                (do                             \n                                                 (var symbol (^symbol))\n                                                 (destructured.push [symbol transpiled-rhs])\n                                                 symbol)))\n                                (each (item index) lhs.contents\n                                      (destructured.push [(transpile item) '(get @source @index)]))\n                                (unless literal-rhs?\n                                        (destructured.push [source 'undefined])))\n                               ('brace\n                                (var literal-rhs? (|> transpiled-rhs (output-formatter) (match-regex? \"^[\\._a-zA-Z0-9]+$\"))\n                                     source (if literal-rhs?\n                                                transpiled-rhs\n                                                (do                             \n                                                 (var symbol (^symbol))\n                                                 (destructured.push [symbol transpiled-rhs])\n                                                 symbol)))\n                                (each (item index) lhs.contents\n                                      (var tr-item (transpile item))\n                                      (destructured.push [tr-item '(get @source @[\"\\\"\" tr-item \"\\\"\"])]))\n                                (unless literal-rhs?\n                                        (destructured.push [source 'undefined])))\n\n                               (default\n                                (destructured.push [ (transpile lhs)\n                                                     (if rhs transpiled-rhs 'undefined)])))))\n     destructured)\n\n(docs \"registers variables in `pairs` inside of the current scope using the javascript var keyword.\ndestructuring from arrays and objects is also supported, as shown in the examples\"\n      tags [ variables language ]\n      examples: [ (var a 1 b 2)\n                  (var a [ 1 2 3 ] [ b c d ] a)\n                  (var a)\n                  (var { log dir } console)\n                  (var {a} {a 1 b 2} c 3)\n                  (var a 1 [b c] [2 3]) ])\n\n(macro var (...pairs)\n       (as-statement\n        [\"var \" (|> pairs\n                    (^*destructure)\n                    (map (#(pair) [(first pair) \" = \" (second pair)]))\n                    (interleave \",\\n    \")) ]))\n\n\n\n\n(docs \"assigns alternating keys and values in `args`.  This works much\nlike `var`, but without the var keyword.  It is important to\nunderstand variable scope in javascript in order to use this macro safely.\nThis macro supports destructuring, as shown in examples\"\n      tags [language variables]\n      examples [ (assign a 1)\n(assign a 1 b 2)\n(assign [ a b ] [ 1 2 ])\n(assign [ a b ] c)\n(assign { a b } c\n        [ x y ] a)])\n\n(macro assign (...pairs)\n        (|> pairs\n            (^*destructure)\n            (map (#(pair) (as-statement [(first pair) \" = \" (second pair)])))\n            (interleave \"\\n\")))\n\n\n(docs \"sets default values for variables in current scope. `pairs` are\nalternating variable names and default values\"\n      tags [variables language]\n      example (default a 10 b 20))\n(macro default (...pairs)\n       (interleave \"\\n\" (bulk-map pairs (#(name value)\n                                  '(assign @name (ternary (defined? @name) @name @value))))))\n\n\n(macro import-namespace (namespace)\n       (var namespace-as-string (output-formatter (transpile namespace)))\n       (unless (sibilant.macros.namespaces.has-own-property namespace-as-string)\n               (set sibilant.macros.namespaces namespace-as-string {}))\n       (sibilant.macros.search-path.unshift namespace-as-string)\n       undefined)\n\n\n(macro namespace (namespace)\n       (^core/import-namespace namespace)\n       (set sibilant.macros 'namespace\n            (get sibilant.macros.namespaces (output-formatter (transpile namespace))))\n       undefined)\n\n\n\n\n\n\n(docs \"checks if `object` has property `key`.  returns true or false.\"\n      tags [collections objects]\n      example (has-key? object 'a))\n\n(macro has-key? (object key)\n       `(.has-own-property @object @key))\n\n\n\n\n\n\n\n(docs \"retreives object properties, potentially deeply. If more than one `keys` are provided,\n`get` fetches deeply into nested objects or arrays.\nWhen javascript dot notation can be used (`a.b = 3`), it is.\nOtherwise, bracket notation is used.\"\n      tags [collections objects]\n      examples [ (get an-object 'static-attribute-name)\n                 (get object dynamic-attribute-name)\n                 (get object \"these attributes\" \"can't be dotted\")\n                 (get array 0)\n                 (get object 'a 'b c)\n                 (get array 0 1 2) ])\n\n\n(macro get (obj ...keys)\n       [(transpile obj)\n         (map keys (#(key)\n                     (var transpiled (transpile key)\n                          output (output-formatter transpiled))\n\n                     (if (match-regex? output \"^\\\"[a-zA-Z0-9]+\\\"$\")\n                         [\".\" (replace-all output \"\\\"\" \"\") ]\n                         [\"[\" transpiled \"]\"])))])\n\n\n\n\n\n\n\n\n\n\n(docs \"assigns object properties to `arr` in pairs, alternating between keys and values.\nWhen javascript dot notation can be used (`a.b = 3`), it is.  Otherwise, bracket notation is used\"\n      tags [collections objects]\n      examples [ (set an-object 'static-attribute-name 'value)\n                 (set object dynamic-attribute-name \"key name determined at runtime\")\n                 (set array 0 \"first element of array\")\n                 (set object \"can't be dotted\" 'value)\n                 (set object 'first-attribute 'first-value\n                      'second-attribute 'second-value) ])\n\n(macro set (arr ...kv-pairs)\n       (interleave \"\\n\" (bulk-map kv-pairs (#(k v) `(assign (get @arr @k) @v)))))\n\n(docs \"checks if a string is identical to the lower-cased version of itself\"\n      tags [strings]\n      example (lower-case? \"abc\"))\n(macro lower-case? (str)\n       `(= (.to-lower-case @str) @str))\n\n\n\n(docs \"checks if a string is identical to the upper-cased version of itself\"\n      tags [strings]\n      example (lower-case? \"abc\"))\n(macro upper-case? (str)\n       `(= (.to-upper-case @str) @str))\n\n\n(docs \"inserts a pragma for source-mapping-url\"\n      tags []\n      example (source-mapping-url \"/example.map\"))\n\n(macro source-mapping-url (url)\n       [ \"//# sourceMappingURL=\" (|> url transpile output-formatter eval) \"\\n\" ])\n\n\n(docs \"sorts `array-of-objects` by `attribute` using locale-compare\"\n      tags [collections objects arrays experimental]\n      example (|> [ {state 'ca} {state 'or} {state 'ny} ] (sort-by 'state))\n      references [\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/localeCompare\"])\n\n(macro sort-by (array-of-objects attribute)\n       `(.sort @array-of-objects\n               (#-> (get @attribute)\n                    .to-string\n                    (.locale-compare (get #1 @attribute)))))\n"]}