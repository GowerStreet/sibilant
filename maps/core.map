{"version":3,"sources":["/Users/jbr/code/sibilant/src/core.sibilant","/Users/jbr/code/sibilant/include/macros.sibilant"],"names":[],"mappings":"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","sourcesContent":["(def ^return (token)\n     (when sibilant.debug (console.log \"returning \" (prettify token)))\n     (var default-return (as-statement [\"return \" (transpile token)]))\n     (if (and token token.contents token.contents.length)\n         (switch (get (first token.contents) 'token)\n                 (('return 'throw 'do) (transpile token))\n\n                 ('delete\n                  (var delete-macro (get macros 'delete))\n                  (if (< token.contents.length 3) default-return\n                      [ (as-statement (apply delete-macro (token.contents.slice 1 -1)))\n                        \"\\nreturn \"\n                        (as-statement (call delete-macro (last token.contents)))]))\n\n                 ('def\n                  [ (transpile token) \"\\n\" (^return (second token.contents)) ])\n\n                 ('assign\n                  (if (< token.contents.length 4) default-return\n                      (do\n                       (var result (clone (transpile token)))\n                       (set result 'contents [ ...(result.contents.slice 0 -4)\n                                               \"return \"\n                                               ...(result.contents.slice -4) ])\n                       result)))\n\n                 ('var\n                  [ (transpile token) \"\\n\" (^return (if (even? token.contents.length)\n                                                                 (last token.contents)\n                                                                 (first (token.contents.slice -2))))])\n\n                 ('set\n                  (if (< token.contents.length 5) default-return\n                      (do\n                       (var obj (second token.contents)\n                            non-return-part (token.contents.slice 2 (- token.contents.length 2))\n                            return-part (token.contents.slice -2))\n                       (non-return-part.unshift obj)\n                       (return-part.unshift obj)\n                       [ (^set ...non-return-part)\n                         \"\\nreturn \"\n                         (^set ...return-part)])))\n\n                 (default default-return))\n         default-return))\n\n\n(def ^do (...body)\n     (if (= 1 body.length)\n         (^return (first body))\n\n         body.length\n         [\n          (|> body\n              (.slice 0 -1)\n              (map (#-> as-statement))\n              (interleave \"\\n\"))\n           \"\\n\"\n           (^return (last body))\n           ]\n         \n         \"\"))\n\n(def ^empty-list () 'null)\n\n(def ^def (fn-name args ...body)\n     (if (undefined? fn-name) (error \"invalid function definition. missing name.\")\n         (undefined? args) (error \"invalid function definition. missing arguments or return value.\"))\n\n     (var fn-name-tr (transpile fn-name) this-node this)\n     (sibilant.docs.record 'function (first sibilant.macros.search-path) fn-name this)\n\n     (as-statement [ (if (match? (regex \"\\\\.\") (output-formatter fn-name-tr)) \"\" \"var \")\n                     fn-name-tr \" = \"\n                     (^lambda { name fn-name args args node this-node } ...body )\n                     ] ))\n\n(def ^macro (name args ...body)\n     (var name-tr (output-formatter (transpile name))\n          options { name name args args node this}\n          js (output-formatter (^lambda options ...body)))\n\n     (when sibilant.debug (console.log js))\n\n     (sibilant.docs.record 'macro (first sibilant.macros.search-path) name this)\n\n     (var evaled-js (try (eval js)\n                         (do\n                          (console.log e.message)\n                          (console.log (|> e.stack (.split \"\\n\") second red))\n                          (console.log (\"error in parsing macro \"\n                                        (sibilant.pretty-print name) \":\\n\" js)))))\n\n     (set sibilant.macros.namespace name-tr evaled-js)\n\n     undefined)\n\n(def ^meta (...body)\n     (var js (output-formatter (transpile (^scoped ...body))))\n     (when sibilant.debug (console.log js))\n     (output-formatter (eval js)))\n\n\n(def ^concat (...args)\n     [\"(\" (interleave \" + \" (map args transpile)) \")\"])\n\n(def ^reverse (arr)\n     (var reversed [])\n     (each (item) arr (reversed.unshift item))\n     reversed)\n\n(var reverse ^reverse)\n\n(def ^lambda (args-or-options ...body)\n     (when sibilant.debug\n           (console.log args-or-options))\n     (var args (or (get args-or-options 'args) args-or-options)\n          body (or (get args-or-options 'body) body)\n          args (if (node? args 'expression) args.contents\n                   (and (node? args) (empty? body)) (do (assign body [ args ]) [])\n                   args)\n          name (when args-or-options.name\n                     (|> args-or-options.name\n                         transpile\n                         output-formatter\n                         (replace-all \"\\\\W+\" \"$\")\n                         (.concat \"$\")))\n          rest (detect args\n                       (#> (node? #0 'dots))))\n\n     (var this-node this\n          node (detect\n                [ args-or-options.node this-node args-or-options.name args (first body) ]\n                (#(n) (and (node? n) (get n 'file)))))\n     [\"(function\" (if name (\" \" name) \"\") \"(\"\n       (interleave \", \" (map args transpile)) \") {\"\n       (if (or args-or-options.name node)\n           (indent [\"/*\"\n                     (if args-or-options.name (\" \" (sibilant.pretty-print args-or-options.name false)) \"\")\n                     (if node (\" \" node.file \":\" node.line \":\" node.col) \"\")\n                     \" */\"]) \"\")\n       (when (exists? rest)\n             (indent (as-statement [\"var \" (transpile rest)\n                       \" = Array.prototype.slice.call(arguments, \"\n                       (- args.length 1) \")\"])))\n\n       (indent (apply ^do body))\n       \"})\"])\n\n(set sibilant.macros.namespaces.core \"#\" ^lambda)\n\n(def ^quoted-hash (...pairs)\n     (var cached-quote-value sibilant.quote-hash-keys)\n     (set sibilant 'quote-hash-keys true)\n     (var value (^hash ...pairs))\n     (set sibilant 'quote-hash-keys cached-quote-value)\n     value)\n\n(def ^hash (...pairs)\n     (when (odd? pairs.length)\n           (error (\"odd number of key-value pairs in hash: \"\n                   (call inspect pairs))))\n\n     (var quote-keys sibilant.quote-hash-keys\n          pair-strings (bulk-map pairs (#(key value)\n                                         [ (if (and quote-keys (not (node? key 'string)))\n                                               [\"\\\"\" (transpile key) \"\\\"\"]\n                                               (transpile key))\n                                           \": \"\n                                           (transpile value)])))\n     (if (>= 1 pair-strings.length)\n         [\"{ \" (interleave \", \" pair-strings) \" }\"]\n         [\"{\" (indent (interleave \",\\n\" pair-strings)) \"}\"]))\n\n(def replace! (content)\n     (if\n      (and (node? content 'dots)\n           (= 3 content.token.length)\n           (node? (first content.contents) 'at))\n      (merge-into (clone content)\n                  { contents (|> content.contents first transpile list) })\n\n      \n      (node? content 'at)\n      (transpile (first content.contents))\n\n      (node? content 'tick)\n      (JSON.stringify content)\n\n      (object? content)\n      (^hash ...(|> content keys\n                    (.reduce\n                     (#-> (.concat [ #1 (replace! (get content #1)) ]))\n                     [])))\n      \n      (array? content)\n      (^list ...(map content replace!))\n\n      (undefined? content)\n      'undefined\n\n      (number? content)\n      (content.to-string)\n\n      (JSON.stringify content)))\n\n\n\n(def pretty-log-and-return (content)\n     (console.log (sibilant.pretty-print content))\n     content)\n\n(def ^quote (content)\n     (var unquotes (find-unquotes content))\n\n     (if (string? content) (\"\\\"\" (qescape content) \"\\\"\")\n         (number? content) (^quote (content.to-string))\n         (node? content 'literal 'other-char) [\"\\\"\" (transpile content) \"\\\"\"]\n\n         (|> unquotes keys length)\n         (replace! content unquotes)\n\n         (node? content 'expression)\n         [\"\\\"\" (map-node (transpile content) qescape) \"\\\"\"]\n\n         (node? content 'bracket)\n         (^list ...(map content.contents ^quote))\n\n         (node? content 'brace)\n         (^hash ...(map content.contents ^quote))\n\n         (do\n          (console.log (\"unknown content\" (inspect content)))\n          content)))\n\n(def ^debug (val)\n     (set sibilant 'debug (eval (output-formatter (transpile val)))) null)\n\n(def ^expand-quote (node expansions)\n     (|> (if (node? node) node (get sibilant.node-cache node))\n         (map-node-for-quote-expansion expansions)\n         transpile))\n\n\n(def ^list (...args)\n       (var arg-segments [])\n       (if (empty? args) \"[]\"\n           (do\n            (def simple-list (args)\n                 [\"[ \" (interleave \", \" (map args (#(arg) arg.transpiled))) \" ]\"])\n\n            (args.for-each (#(arg)\n                  (if (node? arg 'dots) (arg-segments.push {transpiled (transpile arg)})\n                   (list? (last arg-segments)) (.push (last arg-segments) { transpiled (transpile arg)})\n                   (arg-segments.push [{transpiled (transpile arg)}]))))\n\n            (assign arg-segments (map arg-segments\n                                      (#(segment)\n                                        (if (list? segment)\n                                            (simple-list segment)\n                                            segment.transpiled))))\n\n            (if (= 1 (length arg-segments))\n                (first arg-segments)\n                [(first arg-segments) \".concat(\" (interleave \", \" (rest arg-segments))\")\"]))))\n\n\n(def ^call (fn-name ...args)\n     (if (any? args (#> (node? #0 'dots)))\n           (macros.apply fn-name (macros.list ...args))\n           [ (transpile fn-name)\n                   \"(\" (interleave \", \" (map args transpile)) \")\" ]))\n\n(def ^dots (...contents)\n     (transpile contents))\n\n(def ^include (...files)\n     (pipe files\n           (.map (#(file)\n                   (sibilant.with-default-search-path\n                    (#> (pipe file\n                              transpile\n                              output-formatter\n                              eval\n                              sibilant.include)))))\n           (interleave \"\\n\")))\n\n(def ^docs (...options)\n     (var options-string undefined\n          options-hash {})\n\n     (when (odd? options.length)\n           (if (or (node? (first options) 'string) (string? (first options)))\n               (assign options-string (options.shift))\n\n               (or (node? (last options) 'string) (string? (last options)))\n               (assign options-string  (options.pop))))\n\n     (bulk-map options (#(key value)\n                         (set options-hash (pipe key transpile output-formatter) value)))\n\n     (each (list-attribute) `[ examples references ]\n           (when (and (has-key? options-hash list-attribute)\n                      (node? (get options-hash list-attribute) 'bracket))\n                 (set options-hash list-attribute\n                      (get options-hash list-attribute 'contents))))\n     \n     (when (has-key? options-hash 'example)\n           (when (has-key? options-hash 'examples) (error \"please provide example OR examples, not both\"))\n           (set options-hash 'examples [options-hash.example])\n           (delete options-hash.example))\n\n     (when (has-key? options-hash 'tags)\n           (set options-hash 'tags\n                (|> options-hash.tags (^quote) transpile output-formatter eval)))\n\n     (if (node? options-string 'string)\n           (set options-hash 'doc-string (pipe options-string\n                                               transpile\n                                               output-formatter\n                                               eval))\n           (string? options-string) (set options-hash 'doc-string options-string))\n\n     (set sibilant.docs 'last-doc options-hash)\n     null)\n","(namespace core)\n\n(docs \"the simplest way to conditionally execute code.\"\n      tags [ conditional flow-control ]\n      example (ternary (< 50 100)\n         \"fifty is less than 100\"\n         \"fifty is more than 100\"))\n\n(macro ternary (cond if-true if-false)\n       [\"(\" (transpile cond) \") ? \"\n            (transpile if-true) \" : \"\n            (transpile if-false)])\n\n\n\n\n\n;; nodoc\n(macro set (arr ...kv-pairs)\n       (interleave \"\\n\" (bulk-map kv-pairs\n                                  (#(k v)\n                                    (as-statement [\"(\" (transpile arr) \")\"\n                                                    \"[\" (transpile k) \"] = \" (transpile v) ])))))\n;; nodoc\n(macro var (...pairs)\n       (as-statement\n        [\"var \"\n         (interleave \",\\n    \"\n               (bulk-map pairs\n                         (#(name value)\n                           [ (transpile name) \" = \" (transpile value) ])))\n         ]))\n\n;; nodoc\n(macro get (obj ...keys)\n       [\"(\" (transpile obj) \")\" (map keys (#(key)\n                                            [\"[\" (transpile key) \"]\"]))])\n\n\n\n\n\n(docs \"stores a duplicate copy of `current-macro-name` as\n`new-macro-name` in current namespace.  No output.\"\n      tags [macros])\n\n(macro alias-macro (current-macro-name new-macro-name)\n       (var current-macro-name (output-formatter (transpile current-macro-name))\n            new-macro-name (output-formatter (transpile new-macro-name)))\n       (set sibilant.macros.namespace\n            new-macro-name (get sibilant.macros.namespace current-macro-name))\n       null)\n\n\n\n\n\n(docs \"calls the `method` on `object` as a function with `args` as the arguments\"\n      tags [ functions ]\n      example (send object method first-argument second-argument third-argument))\n\n(macro send (object method ...args)\n       [(transpile object) \".\" (transpile method)\n               \"(\" (interleave \", \" (map args transpile)) \")\"])\n\n\n\n\n\n(docs \"calls the function `fn` with arguments passed as an array in `arglist`\"\n      tags [functions]\n      example (apply my-function [ first-arg second-arg third-arg ]))\n\n(macro apply (fn arglist)\n       '(.apply @fn this @arglist))\n\n\n\n\n(docs \"builds an array with `first` as the zeroth index and the\nelements provided by array `rest` as the subsequent elements, as\nsiblings with `first`.\"\n      tags [arrays collections deprecated]\n      example (cons 1 [ 2 3 4 ]))\n\n(macro cons (first rest)\n       [\"[ \" (transpile first) \" ].concat(\" (transpile rest) \")\"])\n\n\n\n\n(docs \"adds `additional` elements onto the right-side (tail) of `list`. deprecated\"\n      tags [ arrays collections deprecated ]\n      example (append [ 1 2 3 ] 4 5 6))\n(macro append (list ...additional)\n       '(.concat @list (list ...@additional)))\n\n\n(docs \"fetches length attribute from `arr`\"\n      tags [ arrays collections ]\n      example (length [ 1 2 3 ]))\n(macro length (arr)\n       '(get @arr 'length))\n\n(docs \"executes the `body` inside of a self-executing function. The\nlast statement/expression of the body is returned.\"\n      tags [functions]\n      examples [(scoped true) (scoped (var a 1) (+ a 2))])\n(macro scoped (...body)\n       '(.call (lambda @{node this args []} ...@body) this))\n\n;;nodoc\n;; (macro *number-words (...number-words)\n;;        (.reduce number-words\n;;              (#(accumulator word index)\n;;                (accumulator.concat\n;;                     [\n;;                      `(docs @(\"fetches the \"\n;;                               (output-formatter (transpile word))\n;;                               \" element from `arr`\")\n;;                             tags [arrays collections]\n;;                             example (@word my-array))\n;;                       `(macro @word (arr)\n;;                               (var index @index)\n;;                               `(get @arr @index))\n;;                       ]))\n;;              []))\n;; (*number-words first second third fourth fifth sixth seventh eighth ninth)\n\n(macro first (arr) `(get @arr 0))\n(macro second (arr) `(get @arr 1))\n(macro third (arr) `(get @arr 2))\n\n\n(docs \"fetches all but the first item of `arr`\"\n      tags [arrays collections]\n      example (rest [ 1 2 3 ]))\n(macro rest (arr) '(.slice @arr 1))\n\n(docs \"fetches just the last element of `arr` by slicing.\"\n      tags [arrays collections]\n      example (last [ 1 2 3 ]))\n(macro last (arr) '(first (.slice @arr -1)))\n\n;;nodoc\n(macro = (a b) [ (transpile a) \" === \" (transpile b) ])\n\n(docs \"adds `args` using the javascript `+` operator. Since javascript\noverloads this for string concatenation, this macro can be used for\nthis as well.\"\n      tags [ strings numbers ]\n      examples [ (+ 1 2 3) (+ 'hello 'world) ])\n(macro +   (...args)\n       [\"(\" (interleave \" + \" (map args transpile)) \")\"])\n\n\n(docs \"subtracts each subsequent element of `args`\"\n      tags [numbers]\n      examples [ (- 2 1) (- 10 5 1) ])\n(macro -   (...args)\n       [\"(\" (interleave \" - \" (map args transpile)) \")\"])\n\n(docs \"multiplies elements of `args`\"\n      tags [numbers]\n      example (* 3 4 5))\n(macro *   (...args)\n       [\"(\" (interleave \" * \" (map args transpile)) \")\"])\n\n(docs \"divides each subsequent element of `args`\"\n      tags [numbers]\n      examples [ (/ 1 2)\n                 (/ 1 2 3) ])\n(macro /   (...args)\n           [\"(\" (interleave \" / \" (map args transpile)) \")\"])\n\n\n(docs \"short circuiting operator returns the first element of `args` that evaluates to be truthy\"\n      tags [ conditional flow-control booleans ]\n      example (or (= 1 2) (string? []) \"one is not two and an array is not a string\"))\n(macro or  (...args)\n       [\"(\" (interleave \" || \" (map args transpile)) \")\"])\n\n\n(docs \"returns the last element if all elements of `args` are truthy, or the\nfirst non-truthy element if it exists\"\n      tags [ booleans ]\n      example (and (string? \"string\") (number? 10) (= 1 1)))\n(macro and (...args)\n       (ternary (= 1 (length args)) (transpile (first args))\n                [\"(\" (interleave \" && \" (map args transpile)) \")\"]))\n\n(docs \"modulus operator\"\n      tags [numbers]\n      example (mod 10 2))\n(macro mod (...args)\n       [\"(\" (interleave \" % \" (map args transpile)) \")\"])\n\n\n\n\n\n\n;; (macro *def-infix (macro-name word js-comparator)\n;;        (var docstring (\"compares `args` from left to right, \"\n;;                        \"returning true if each element is \"\n;;                        (.slice word.token 1 -1)\n;;                        \" than the next\"))\n\n;;        (var js-comparator (or js-comparator macro-name))\n\n;;        [\n;;         `(docs @docstring\n;;                tags [comparison]\n;;                examples [ (@macro-name a b c) (@macro-name a b) ])\n         \n;;          `(macro @macro-name (...args)\n;;                  (var js-comparator (quote @js-comparator))\n;;                  `(and ...@(map (args.slice 0 -1)\n;;                                 (#(item index)\n;;                                   [ item \" \" js-comparator \" \"\n;;                                     (get args (+ 1 index)) ]))))\n;;          ])\n\n;; (*def-infix > \"greater than\")\n;; (*def-infix <  \"less than\")\n;; (*def-infix <= \"less than or equal\")\n;; (*def-infix >= \"greater than or equal\")\n;; (*def-infix != \"not equal (using threequals)\" !==)\n;; (*def-infix = \"equal (using threequals)\" ===)\n\n(macro > (...args)\n       (var js-comparator \">\")\n       `(and ...@(map (args.slice 0 -1)\n                      (#(item index)\n                        [ item \" \" js-comparator \" \"  (get args (+ 1 index)) ]))))\n\n\n(macro < (...args)\n       (var js-comparator \"<\")\n       `(and ...@(map (args.slice 0 -1)\n                      (#(item index)\n                        [ item \" \" js-comparator \" \"  (get args (+ 1 index)) ]))))\n\n(macro <= (...args)\n       (var js-comparator \"<=\")\n       `(and ...@(map (args.slice 0 -1)\n                      (#(item index)\n                        [ item \" \" js-comparator \" \"  (get args (+ 1 index)) ]))))\n\n(macro >= (...args)\n       (var js-comparator \">=\")\n       `(and ...@(map (args.slice 0 -1)\n                      (#(item index)\n                        [ item \" \" js-comparator \" \"  (get args (+ 1 index)) ]))))\n(macro != (...args)\n       (var js-comparator \"!==\")\n       `(and ...@(map (args.slice 0 -1)\n                      (#(item index)\n                        [ item \" \" js-comparator \" \"  (get args (+ 1 index)) ]))))\n\n(macro = (...args)\n       (var js-comparator \"===\")\n       `(and ...@(map (args.slice 0 -1)\n                      (#(item index)\n                        [ item \" \" js-comparator \" \"  (get args (+ 1 index)) ]))))\n\n\n(docs \"increments `item` by `increment`\"\n      tags [numbers]\n      example (incr-by n 5))\n(macro incr-by (item increment)\n       [ (transpile item) \" += \" (transpile increment)])\n\n\n\n\n(docs \"increments item by 1\",\n      tags [numbers],\n      example (incr i))\n(macro incr (item)\n       [\"((\" (transpile item) \")++)\"])\n\n\n(docs \"decrements item by 1\",\n      tags [numbers],\n      example (decr i))\n(macro decr (item) [\"((\" (transpile item) \")--)\"])\n\n(docs \"uses the javascript new keyword to construct an object using\n      `constructor`, with `args` passed as arguments to the constructor.\"\n      tags [functions]\n      example (new RegExp \"hello\" 'g))\n\n(macro new (constructor ...args)\n       [\"(new \" '(call @constructor ...@args) \")\"])\n\n\n\n(docs \"builds a regex using `pattern` and `flags` as arguments to the RegExp constructor\"\n      tags [regex]\n      examples [ (regex \"[0-9]+\") (regex \"0x[0-9a-f]+\" 'i)])\n(macro regex (pattern flags)\n       '(new RegExp @pattern @(or flags 'undefined)))\n\n\n\n(docs \"predicate to test for equality with zero\"\n      tags [numbers]\n      example: (zero? n))\n(macro zero? (item) '(= @item 0))\n\n\n(docs \"returns true if the array `arr` has a length of zero\"\n      tags [arrays collections]\n      example: (empty? []))\n(macro empty? (arr)\n       `(= 0 (length @arr)))\n\n\n(docs \"returns true if `number` is not divisible by 2\"\n      tags [numbers]\n      example (odd? 5))\n(macro odd? (number)\n       '(= 1 (mod @number 2)))\n\n\n(docs \"returns true if `number` is divisible by 2 with no remainder\"\n      tags [numbers]\n      example (even? 10))\n(macro even? (number)\n       '(= 0 (mod @number 2)))\n\n\n(docs \"exposes the javascript typeof operator. most often, predicates\nsuch as `string?`, `function?`, `number?`, etc are preferred.\"\n      tags [type]\n      example: (typeof 5))\n(macro typeof (thing) [\"typeof \" (transpile thing)])\n\n\n(docs \"returns true if all of the `things` are javascript strings\"\n      tags [strings type]\n      examples: [ (string? test-object) (string? 'yes 'yes 'yes) ])\n(macro string? (...things)\n       '(and ...@(map things (#(thing) '(= (typeof @thing) 'string)))))\n\n\n(docs \"returns true if all of the `things` are functions\"\n      tags [functions type]\n      examples: [ (function? fn) (function? err cb) ])\n(macro function? (...things)\n       '(and ...@(map things (#(thing) '(= (typeof @thing) 'function)))))\n\n\n(docs \"returns true if all of the `things` are undefined, as tested\nwith `typeof`, not equality with literal undefined. This is the\ninverse of `defined?`\"\n      tags [type]\n      examples: [ (undefined? argument)\n                  (undefined? 1 2 undefined) ])\n(macro undefined? (...things)\n       '(and ...@(map things (#(thing) '(= (typeof @thing) 'undefined)))))\n\n\n(docs \"returns true if none of the `things` are undefined, as tested\nwith `typeof`. This is the inverse of `defined?`\"\n      tags [type]\n      examples: [ (defined? variable)\n                  (defined? var1 var2 var3) ])\n(macro defined? (...things)\n       '(and ...@(map things (#(thing) '(!= (typeof @thing) 'undefined)))))\n\n\n(docs \"returns true if all of the `things` are numbers, as tested\nwith `typeof`\"\n      tags [numbers type]\n      examples: [ (number? 1) (number? 1 2 3) ])\n(macro number? (...things)\n       '(and ...@(map things (#(thing) '(= (typeof @thing) 'number)))))\n\n\n;;nodoc\n(macro if (arg truebody falsebody)\n       [\"(function() {\"\n        (indent [\"if (\" (transpile arg) \") {\"\n                        (indent '(do ...@truebody))\n                        \"} else {\"\n                        (indent '(do ...@falsebody))\n                        \"}\"])\n         \"}).call(this)\"])\n\n\n(docs \"inserts the result of each subsequent call in `calls` as the\nsecond argument to the next macro. This is very much akin to clojure's\nthread-first arrow or elixir's pipe operator.  Advanced: in order to\nthread the preceding topic into a position other than the second\nposition, use the character `#` to specify topic position\"\n      tags [language]\n      examples: [\n(pipe \"a b c d\"\n      .to-upper-case\n      (.replace \"A\" \"X\")\n      (.split \" \")\n      first\n      (concat \" marks the spot\"))\n\n(pipe \"{\\\"a\\\": {\\\"b\\\": [ 1, 2, 3 ]}}\"\n      JSON.parse\n      (get 'a)\n      JSON.stringify)\n\n(pipe 3 (+ 1) (var a #))\n]\n     references: [ \"https://clojuredocs.org/clojure.core/-%3E\"\n                   \"http://elixir-lang.org/docs/v1.0/elixir/Kernel.html#|>/2\" ])\n(macro pipe (...calls)\n       (inject undefined calls\n               (#(value item)\n                 (if (undefined? value) item\n                     (scoped\n                      (var cloned (if (node? item 'literal 'dots)\n                                      `(@item)\n                                      (clone item)))\n\n                      (var placeholder (detect cloned.contents\n                                               (#(node)\n                                                 (and (node? node 'other-char)\n                                                      (= \"#\" node.token))))\n                           placeholder-index (cloned.contents.index-of placeholder)\n\n                           [ placeholder-left placeholder-right ] (if placeholder\n                                                                      [ placeholder-index (+ 1 placeholder-index) ]\n                                                                      [ 1 1 ]))\n\n                      (merge-into cloned\n                                  { contents [ ...(cloned.contents.slice 0 placeholder-left)\n                                               value\n                                               ...(cloned.contents.slice placeholder-right) ] }))))))\n\n(alias-macro pipe |>)\n\n\n(docs \"inserts `contents` transpiled to javascript as a comment in the\noutput file, removing it from execution.\"\n      tags [language]\n      example (comment (scoped 1)))\n(macro comment (...contents)\n       (map contents (#(content)\n                       [\"// \"(recurse-map (transpile content)\n                                    (#(item)\n                                      (ternary item\n                                               (pipe item transpile output-formatter\n                                                     (.replace (regex \"\\n\" 'g) \"\\n// \"))\n                                               null)))])))\n\n\n;; (docs \"checks if `first-thing` is equal to all of the `other-things`.\n;; Most of the time, there is only one other thing. Javascript threequals\n;; is always used.  Please note that if evaluating `first-thing` has\n;; side-effects, they will be called `(length other-things)` times.\"\n;;       examples [ (= 1 2)\n;;                  (= 10 (+ 5 5) (- 15 5)) ])\n\n\n(docs \"returns true if `thing` is an array in javascript. aliased as\n`list?`.\"\n      tags [type arrays]\n      example: (array? arr))\n\n(macro array? (thing)\n       (var transpiled (transpile thing))\n       [\"((\" transpiled \") && typeof (\" transpiled \") === \\\"object\\\" && (\"\n               transpiled \").constructor.name === \\\"Array\\\")\"])\n(alias-macro array? list?)\n\n\n(docs \"returns true if `thing` is an object that is not an array in javascript. aliased as\n`object?`.\"\n      tags [type objects]\n      example: (object? arr))\n\n(macro hash? (thing)\n       `(and (= 'object (typeof @thing))\n             (!= @thing null)\n             (!= (get @thing 'constructor 'name) 'Array)))\n(alias-macro hash? object?)\n\n(macro *scoped-without-return (...body)\n       [\"(function() {\" (indent ...body) \"}).call(this)\"])\n\n\n(macro *scoped-without-source (...body)\n       `(*scoped-without-return (do ...@body)))\n\n\n(docs \"evaluates statements in `body` if `condition` is true. `body`\n      is `scoped` in a self-evaluating function to support having a\n      return value from the if statement.\"\n      tags [ conditional flow-control language ]\n      example: (when (< 3 i) (console.log i) (get arr i)))\n\n(macro when (condition ...body)\n       (^*scoped-without-return\n         \"if (\" @condition \") {\"\n         (indent `(do ...@body))\n         \"}\"))\n\n\n(docs \"boolean negation, as determined by javascript truthiness\"\n      tags [booleans]\n      example: (not (string? 1))\n      references: [ \"https://developer.mozilla.org/en-US/docs/Glossary/Truthy\"\n                    \"https://developer.mozilla.org/en-US/docs/Glossary/Falsy\" ])\n(macro not (exp)\n       [\"!(\" (transpile exp) \")\"])\n\n\n\n\n\n(docs \"evaluates statements in `body` if `condition` is falsy. `body`\n      is `scoped` in a self-evaluating function to support having a\n      return value from the if statement.\"\n      tags [conditional flow-control]\n      example: (unless (< 3 i) (console.log i) (get arr i)))\n\n(macro unless (condition ...body)\n       [\"(function() {\"\n        (indent [\"if (\" '(not @condition) \") {\"\n                        (indent '(do ...@body))\n                        \"}\"])\n        \"}).call(this)\"])\n\n;;nodoc\n(macro assign (...args)\n       (interleave \"\\n\"\n             (bulk-map args (#(name value)\n                              (as-statement [ (transpile name) \" = \"\n                                                    (transpile value)])))))\n\n\n\n(docs \"outputs debug information about `arg`.  If `label` is\nomitted (only one argument is provided), the name of the variable or\nexpression of that first expression will be logged. Aliased as `pretty-log`\"\n      tags [language]\n      examples: [ (log-pretty 'my-label value)\n                  (log-pretty (+ 1 2)) ])\n(macro log-pretty (label arg)\n       (var node this)\n       (when (undefined? arg)\n             (assign arg label\n                     label [\"\\\"\" (prettify label false) \"\\\"\"]))\n       `(console.log (concat @[\"\\\"\" node.file \":\" node.line \"\\\"\"] \" \" @label \" = \" (prettify @arg))))\n(alias-macro log-pretty pretty-log)\n\n(docs \"iterates over `array`, evaluating `body` once for each value in\n`array`.  If `item` is a literal name, that will be the variable into\nwhich the `array` element is yielded (current value).  If `item` is an expression, it\ncan contain the current value, the index, and the `array`.\"\n      tags [ arrays language collections ]\n      references [\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach\"]\n      examples [ (each number [ 1 2 3 ] (console.log number))\n                 (each (letter index) `[ a b c d ]\n                       (set letters letter index)\n                       (pipe letter (.to-upper-case) (console.log))) ])\n                \n(macro each (item array ...body)\n       '(.for-each @array\n                   (lambda @{ node this\n                              args (if (node? item 'expression) item [item]) }\n                           ...@body)))\n\n\n\n\n\n\n\n\n;;nodoc\n;;deprecated\n(macro macro-expand (name)\n       (var macro (get macros (output-formatter (transpile name))))\n       (if macro\n           (macro.to-string)\n           \"undefined\"))\n\n\n\n\n(docs \"throws a new javascript error with arguments as the string\"\n      tags [language]\n      example (throw (new Error \"could not find matching socks\")))\n\n(macro throw (error)\n       [\"throw \" (transpile error)])\n\n\n\n\n\n(docs \"double-negates `expr`, converting it to a boolean\"\n      tags [type booleans]\n      examples: [ (as-boolean 0)\n                  (as-boolean true) ])\n(macro as-boolean (expr)\n       [\"(!!(\" (transpile expr) \"))\"])\n\n\n;;nodoc because this needs attention\n;;todo\n(macro try (tryblock catchblock)\n       [\"(function() {\"\n        (indent [\"try {\"\n                 (indent '(do @tryblock))\n                 \"} catch (e) {\"\n                 (indent '(do @catchblock))\n                 \"}\"])\n         \"}).call(this)\"])\n\n\n\n\n\n;; (docs \"sets or gets sibilant state. If one arg is provided, this macro\n;; gets the value.  If more than two args are provided, sibilant state is\n;; set in pairs.  deprecated. internal.\")\n\n(macro state (...pairs)\n       (if (= 1 (length pairs))\n           (get sibilant.state (output-formatter (transpile (first pairs))))\n           (do (bulk-map pairs (#(k v) (set sibilant.state (output-formatter (transpile k)) (eval (output-formatter (transpile v))))))\n               null)))\n\n\n;;nodoc\n;;internal\n(macro symbol ()\n       (var symbol-count (or (get sibilant.state 'symbol-count) 0)\n            new-symbol-count (+ 1 symbol-count))\n       (^state 'symbol-count new-symbol-count)\n       [(\"$_symbol\" new-symbol-count \"_$\")])\n\n\n\n\n\n(docs \"evaluates the `body` as long as `condition` is truthy,\nreturning the value of the last expression in `block` when `condition`\nceases to be truthy. See also `until`\"\n      tags [loops flow-control]\n      example: (while (> 5 i) (console.log i) (decr i)))\n(macro while (condition ...body)\n       (var symbol (^symbol))\n       '(*scoped-without-source\n         (var @symbol)\n         @{ type 'output\n               contents [\"while (\" (transpile condition) \") {\"\n                          (indent '(assign @symbol (*scoped-without-source ...@body)))\n                          \"}\"] }\n         @symbol))\n\n\n\n\n(docs \"evaluates the `body` as long as `condition` is falsy,\nreturning the value of the last expression in `block` when `condition`\nceases to be falsy. See also `while`\"\n      tags [loops flow-control]\n      example: (until (< 5 i) (console.log i) (incr i)))\n\n(macro until (condition ...body)\n       '(while (not @condition) ...@body))\n\n\n\n\n(docs \"returns true if the `string` matches `regexp`.  Deprecated in\n      preference to `.match` (`send` dot-invocation).\"\n      tags [regex strings]\n      example: (match? (regex \"^[a-z]+$\" 'i) 'word))\n(macro match? (regexp string)\n       '(.match @string @regexp))\n\n(docs \"similar to `match?` but builds a regex out of the `pattern` and `flags`.\"\n      tags [regex strings]\n      example (match-regex? 'word \"^[a-z]+$\" 'i))\n(macro match-regex? (string pattern flags)\n       '(match? (regex @pattern @flags) @string))\n\n\n(docs \"replaces the first occurance of `pattern` (as a regex) with `replacement`\"\n      tags [regex strings]\n      example: (replace \"hello world\" \"l+o\" \"y there,\"))\n(macro replace (string pattern replacement)\n       '(.replace @string\n              (regex @pattern)\n              @replacement))\n\n(docs \"replaces all occurrances of `pattern` (as a regex) with `replacement`\"\n      tags [regex strings]\n      example: (replace-all \"503-555-1212\" \"[0-9]\" \"#\"))\n(macro replace-all (string pattern replacement)\n       '(.replace @string (regex @pattern 'g) @replacement))\n\n\n\n\n\n\n(docs \"most often called as its alias, `#>`, thunk creates a function\nwith no named arguments. To refer to arguments anonymously, use #n,\nsuch as #0 for the first argument.\"\n      tags [functions language]\n      examples: [ (.map [ 1 2 3 ] (#> (+ 1 #0)))\n                  (window.set-timeout (#> (console.log 'here)) 10) ])\n(macro thunk (...body)\n       (var node this\n            lambda-options { node node args [] })\n\n       (when (not (node? (first body)))\n             (merge-into lambda-options (first body))\n             (assign body (rest body)))\n\n       '(lambda @lambda-options\n       ...@(map-node body\n                 (#(node)\n                   (if (node? node 'arg-placeholder)\n                       '(argument @(replace node.token \"^#\" \"\"))\n                       node)))))\n(alias-macro thunk #>)\n\n\n\n\n\n(docs \"most often called as its alias, `#->`, pipe-thunk applies a pipe chain to the argument of a function and returns the result\"\n      tags [functions language]\n      examples [ (.map `[ a b c ] (#-> (.to-upper-case) (concat \" is a letter\"))) ])\n(macro pipe-thunk (...calls) `(thunk @{ node this } (pipe #0 ...@calls)))\n(alias-macro pipe-thunk #->)\n\n\n\n\n\n\n(docs \"returns the property names of `obj`.\"\n      tags [objects collections]\n      references: [ \"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/keys\" ]\n      example (keys { a 1 b 2 }))\n(macro keys (obj)\n       '(Object.keys @obj))\n\n\n\n\n\n\n(docs \"uses the javascript delete keyword on any number of `objects`.\n      Use in conjunction with `get` or dotted literal notation (a.b).\"\n      tags [objects collections]\n      examples [ (delete object.a object.b)\n                 (delete (get object attribute) (get object \"other attribute\")) ])\n(macro delete (...objects)\n       (interleave \"\\n\" (map objects (#(obj)\n                                 (as-statement [\"delete \" (transpile obj)])))))\n\n\n\n\n\n\n\n(docs \"deletes each macro name in `macro-names` from the current namespace. Use carefully\"\n      tags [macros language])\n(macro delete-macro (...macro-names)\n       (each macro-name macro-names\n             (delete (get sibilant.macros.namespace (output-formatter (transpile macro-name)))))\n       null)\n(alias-macro delete-macro delmacro)\n\n\n\n\n\n\n(docs \"moves macro from `current-macro-name` to `new-macro-name`. Use carefully\"\n      tags [macros language])\n(macro rename-macro (current-macro-name new-macro-name)\n       (^alias-macro current-macro-name new-macro-name)\n       (^delete-macro current-macro-name)\n       null)\n\n\n\n\n\n\n\n\n(docs \"transforms function arguments into an array, using the Array prototype's slice\"\n      tags [functions]\n      example (arguments))\n(macro arguments ()\n       [\"(Array.prototype.slice.apply(arguments))\"])\n\n\n\n\n\n\n\n(docs \"`get`s the argument at `index` in the current function context. Inside of a `thunk` (`#>`), this can be abbreviated with `#n`, where `n` is the argument index.\"\n      tags [functions]\n      example (argument 3))\n(macro argument (index)\n       '(get arguments @index))\n\n\n\n\n(docs \"iterates over each attribute in `obj`\"\n      tags [objects collections]\n      example (each-key key { a 1 b 2 } (console.log key)))\n(macro each-key (as obj ...body)\n       `(pipe @obj (keys)\n              (.for-each (lambda @{ args: (if (node? as 'expression) as [as])\n                                    node: this }\n                                 ...@body))))\n\n\n\n\n\n\n\n(docs \"uses the javascript switch construction to test equality.  documentation todo: needs better description\"\n      tags [flow-control conditional deprecated]\n      examples: [\n                 (switch char\n                         ('a \"it was an a\")\n                         ('b (console.log \"found a b!\")\n                             \"it was a b\")\n                         ([1 2 3 4 5] \"it was an integer from one to five\")\n                         (default \"not sure\"))\n                 ])\n\n(macro switch (obj ...cases)\n       [\"(function() {\"\n         (indent [\"switch(\" (transpile obj) \") {\"\n                   (map cases (#(case-def)\n                                (var case-name-node (first case-def.contents)\n                                     case-labels (if (node? case-name-node 'expression 'bracket)\n                                                     case-name-node.contents\n                                                     [case-name-node])\n                                     case-string (interleave \"\\n\"\n                                                             (map case-labels (#(c)\n                                                                                (if (= 'default c.token)\n                                                                                    \"default:\"\n                                                                                    [\"case \" (transpile c) \":\"])))))\n                                [\"\\n\" case-string (indent '(do ...@(rest case-def.contents)))]))\n                   \"}\"])\n         \"}).call(this)\"])\n\n\n\n\n\n\n\n\n\n\n\n(docs \"tests any number of `alternating-conditions-and-branches`.  If\n      an odd number of branches are supplied, the final branch is a\n      default else clause.  To evaluate more than one expression as a\n      branch, use the `do` macro, as shown in the examples:\"\n      tags [conditional flow-control]\n      examples [ (if true (console.log 'here))\n                 (if (= 1 arguments.length) (console.log \"one argument\")\n                     (= 'blue favorite-color) (console.log \"blue\")\n                     (assign examples 'difficult))\n                 (if (foo?) (do (a b)\n                                (c))\n                     (bar?) (do (baz)\n                                (wibble))\n                     (do (d e)\n                         (console.log 'default))) ])\n\n\n\n(macro if (...alternating-conditions-and-branches)\n       [\"(function() {\"\n        (indent\n         (interleave \" else \"\n               (bulk-map alternating-conditions-and-branches\n                         (#(cond val)\n                           (if (!= (typeof val) 'undefined)\n                                 [\"if (\" (transpile cond) \") {\"\n                                   (indent '(do @val))\n                                   \"}\"]\n                                 [\"{\" (indent '(do @cond)) \"}\"])))))\n        \"}).call(this)\"])\n\n\n\n\n\n\n\n\n\n\n\n\n;; (docs \"similar to `pipe`, this macro allows function calls to be applied\n;; in sequence, as is common in fluent interfaces. deprecated in preference to `pipe`\"\n;;       tags [deprecated language]\n;;       example (chain a (b c d) (e) (f g)))\n\n(macro chain (object ...calls)\n       (console.log \"DEPRECATION WARNING: DO NOT USE CHAIN\")\n       (console.log (\"  \" this.file \":\" this.line \":\" this.col))\n       (if (= 0 calls.length) (transpile object)\n           (= 1 calls.length) '(send @object ...@(get (first calls) 'contents))\n           (do\n            (var lines (map calls (#(call index)\n                                    [\".\" (transpile (first call.contents))\n                                         \"(\" (interleave \", \" (map (rest call.contents) transpile)) \")\"])))\n\n            [ (transpile object)\n              (first lines)\n              \"\\n  \"\n              (recurse-indent\n               (interleave \"\\n\" (rest lines)))])))\n\n\n\n\n\n\n\n(docs \"uses the javascript `instanceof` operator to check if `item` is of `type`.\"\n      tags [language type]\n      example (instance-of? (new Date) Date))\n(macro instance-of? (item type)\n       [\"(\" (transpile item) \" instanceof \" (transpile type) \")\"])\n\n\n\n\n\n\n(docs \"returns true if `haystack` includes `needle`.  `haystack` can be a string or array/list.\"\n      tags [arrays collections]\n      examples [ (includes? 'hello 'h) (includes? `[ Veni vidi vici] 'vidi) ])\n(macro includes? (haystack needle)\n       '(pipe @haystack (.index-of @needle) (!= -1)))\n\n\n\n\n\n\n\n(docs \"returns true if `haystack` does NOT include `needle`.\n`haystack` can be a string or array/list\"\n      tags [arrays collections]\n      examples [ (excludes? 'hello 10) (excludes? `[ Veni vidi vici] 'attenti) ])\n(macro excludes? (haystack needle)\n       `(pipe @haystack (.index-of @needle) (= -1)))\n\n\n\n\n\n\n(docs \"similar to the javascript truthiness predicate `as-boolean`, returns true unless the `thing` is undefined or null\"\n      tags [type]\n      example (exists? window))\n(macro exists? (thing)\n       `(and (defined? @thing) (!= @thing null)))\n\n\n\n\n\n(macro with-state (k v ...body)\n       (var before (^state k))\n       (^state k v)\n       (var return-value\n            (interleave \"\\n\" (map body transpile)))\n       (^state k before)\n       return-value)\n\n\n\n\n\n\n(docs \"combines elements of array `arr` into a string, inserting\n`glue` string between each element.  if `glue` is omitted (only one\nargument provided), the elements of `arr` are joined with an empty\nstring\"\n\n      tags [arrays collections strings]\n      examples [ (join `[ a few words ]  \", \" )\n                 (join `[ several more words ]) ])\n\n(macro join (arr glue)\n       (if (and (defined? glue) (undefined? arr))\n           (assign arr glue glue undefined))\n       `(.join @arr @(or glue \"\\\"\\\"\")))\n\n\n\n\n(macro *destructure (pairs)\n     (var destructured [])\n     (bulk-map pairs (#(lhs rhs)\n                       (var transpiled-rhs (transpile rhs))\n                       (switch lhs.type\n                               ('bracket\n                                (var literal-rhs? (|> transpiled-rhs (output-formatter) (match-regex? \"^[\\._a-zA-Z0-9]+$\"))\n                                     source (if literal-rhs?\n                                                transpiled-rhs\n                                                (do                             \n                                                 (var symbol (^symbol))\n                                                 (destructured.push [symbol transpiled-rhs])\n                                                 symbol)))\n                                (each (item index) lhs.contents\n                                      (destructured.push [(transpile item) '(get @source @index)]))\n                                (unless literal-rhs?\n                                        (destructured.push [source 'undefined])))\n                               ('brace\n                                (var literal-rhs? (|> transpiled-rhs (output-formatter) (match-regex? \"^[\\._a-zA-Z0-9]+$\"))\n                                     source (if literal-rhs?\n                                                transpiled-rhs\n                                                (do                             \n                                                 (var symbol (^symbol))\n                                                 (destructured.push [symbol transpiled-rhs])\n                                                 symbol)))\n                                (each (item index) lhs.contents\n                                      (var tr-item (transpile item))\n                                      (destructured.push [tr-item '(get @source @[\"\\\"\" tr-item \"\\\"\"])]))\n                                (unless literal-rhs?\n                                        (destructured.push [source 'undefined])))\n\n                               (default\n                                (destructured.push [ (transpile lhs)\n                                                     (if rhs transpiled-rhs 'undefined)])))))\n     destructured)\n\n(docs \"registers variables in `pairs` inside of the current scope using the javascript var keyword.\ndestructuring from arrays and objects is also supported, as shown in the examples\"\n      tags [ variables language ]\n      examples: [ (var a 1 b 2)\n                  (var a [ 1 2 3 ] [ b c d ] a)\n                  (var a)\n                  (var { log dir } console)\n                  (var {a} {a 1 b 2} c 3)\n                  (var a 1 [b c] [2 3]) ])\n\n(macro var (...pairs)\n       (as-statement\n        [\"var \" (|> pairs\n                    (^*destructure)\n                    (map (#(pair) [(first pair) \" = \" (second pair)]))\n                    (interleave \",\\n    \")) ]))\n\n\n\n\n(docs \"assigns alternating keys and values in `args`.  This works much\nlike `var`, but without the var keyword.  It is important to\nunderstand variable scope in javascript in order to use this macro safely.\nThis macro supports destructuring, as shown in examples\"\n      tags [language variables]\n      examples [ (assign a 1)\n(assign a 1 b 2)\n(assign [ a b ] [ 1 2 ])\n(assign [ a b ] c)\n(assign { a b } c\n        [ x y ] a)])\n\n(macro assign (...pairs)\n        (|> pairs\n            (^*destructure)\n            (map (#(pair) (as-statement [(first pair) \" = \" (second pair)])))\n            (interleave \"\\n\")))\n\n\n(docs \"sets default values for variables in current scope. `pairs` are\nalternating variable names and default values\"\n      tags [variables language]\n      example (default a 10 b 20))\n(macro default (...pairs)\n       (interleave \"\\n\" (bulk-map pairs (#(name value)\n                                  '(assign @name (ternary (defined? @name) @name @value))))))\n\n\n(macro import-namespace (namespace)\n       (var namespace-as-string (output-formatter (transpile namespace)))\n       (unless (sibilant.macros.namespaces.has-own-property namespace-as-string)\n               (set sibilant.macros.namespaces namespace-as-string {}))\n       (sibilant.macros.search-path.unshift namespace-as-string)\n       undefined)\n\n\n(macro namespace (namespace)\n       (^core/import-namespace namespace)\n       (set sibilant.macros 'namespace\n            (get sibilant.macros.namespaces (output-formatter (transpile namespace))))\n       undefined)\n\n\n\n\n\n\n(docs \"checks if `object` has property `key`.  returns true or false.\"\n      tags [collections objects]\n      example (has-key? object 'a))\n\n(macro has-key? (object key)\n       `(.has-own-property @object @key))\n\n\n\n\n\n\n\n(docs \"retreives object properties, potentially deeply. If more than one `keys` are provided,\n`get` fetches deeply into nested objects or arrays.\nWhen javascript dot notation can be used (`a.b = 3`), it is.\nOtherwise, bracket notation is used.\"\n      tags [collections objects]\n      examples [ (get an-object 'static-attribute-name)\n                 (get object dynamic-attribute-name)\n                 (get object \"these attributes\" \"can't be dotted\")\n                 (get array 0)\n                 (get object 'a 'b c)\n                 (get array 0 1 2) ])\n\n\n(macro get (obj ...keys)\n       [(transpile obj)\n         (map keys (#(key)\n                     (var transpiled (transpile key)\n                          output (output-formatter transpiled))\n\n                     (if (match-regex? output \"^\\\"[a-zA-Z0-9]+\\\"$\")\n                         [\".\" (replace-all output \"\\\"\" \"\") ]\n                         [\"[\" transpiled \"]\"])))])\n\n\n\n\n\n\n\n\n\n\n(docs \"assigns object properties to `arr` in pairs, alternating between keys and values.\nWhen javascript dot notation can be used (`a.b = 3`), it is.  Otherwise, bracket notation is used\"\n      tags [collections objects]\n      examples [ (set an-object 'static-attribute-name 'value)\n                 (set object dynamic-attribute-name \"key name determined at runtime\")\n                 (set array 0 \"first element of array\")\n                 (set object \"can't be dotted\" 'value)\n                 (set object 'first-attribute 'first-value\n                      'second-attribute 'second-value) ])\n\n(macro set (arr ...kv-pairs)\n       (interleave \"\\n\" (bulk-map kv-pairs (#(k v) `(assign (get @arr @k) @v)))))\n\n(docs \"checks if a string is identical to the lower-cased version of itself\"\n      tags [strings]\n      example (lower-case? \"abc\"))\n(macro lower-case? (str)\n       `(= (.to-lower-case @str) @str))\n\n\n\n(docs \"checks if a string is identical to the upper-cased version of itself\"\n      tags [strings]\n      example (lower-case? \"abc\"))\n(macro upper-case? (str)\n       `(= (.to-upper-case @str) @str))\n\n\n(docs \"inserts a pragma for source-mapping-url\"\n      tags []\n      example (source-mapping-url \"/example.map\"))\n\n(macro source-mapping-url (url)\n       [ \"//# sourceMappingURL=\" (|> url transpile output-formatter eval) \"\\n\" ])\n\n\n(docs \"sorts `array-of-objects` by `attribute` using locale-compare\"\n      tags [collections objects arrays experimental]\n      example (|> [ {state 'ca} {state 'or} {state 'ny} ] (sort-by 'state))\n      references [\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/localeCompare\"])\n\n(macro sort-by (array-of-objects attribute)\n       `(.sort @array-of-objects\n               (#-> (get @attribute)\n                    .to-string\n                    (.locale-compare (get #1 @attribute)))))\n"]}