(def bulk-map (arr fn)
  (var index 0
          group-size fn.length
          ret-arr [])

  (while (< index arr.length)
    (send ret-arr push
          (apply fn (send arr slice
                          index (+ index group-size))))
    (incr-by index group-size))
  ret-arr)

(def inject (start items fn)
  (var value start)
  (when (list? items)
    (each (item index) items
      (assign value (fn value item index))))
  value)

(def map (items fn)
  (inject [] items
          (#(collector item index)
            (send collector push (fn item index))
            collector)))

(def select (items fn)
  (inject [] items
          (#(collector item index)
            (when (fn item index)
              (send collector push item))
            collector)))

(def detect (items fn)
  (var return-item undefined
          index 0
          items (or items []))

  (until (or (= items.length index) return-item)
         (when (fn (get items index) index)
           (assign return-item (get items index)))
         (incr index))

  return-item)

(def reject (items fn)
  (var args [ items fn ])
  (select items (thunk (not (apply fn arguments)))))

(def compact (arr)
  (select arr (#(item)
                (as-boolean item))))

(def flatten (...items)
  (inject [] items
          (#(collector item)
            (collector.concat
             (if (list? item)
               (apply flatten item)
               item)))))
