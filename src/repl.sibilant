(.install (require "source-map-support"))
(meta "//# sourceMappingURL=./repl.map\n")

(var input      (process.open-stdin)
     output     process.stdout
     vm         (require 'vm)
     readline   (.create-interface (require 'readline) input output)
     sibilant   (require "./sibilant")
     context    undefined
     cmd-buffer ""
     util       (require 'util))

(def create-context ()
     (var context (vm.create-context))
     (set module 'filename (concat (process.cwd) "/exec"))
     (set context
          'module  module
          'require require)
     (each-key key global (set context key (get global key)))
     context)

(assign context (create-context))

(def display-prompt ()
     (readline.set-prompt
      (concat (if (> cmd-buffer.length 10)
                  ("..." (cmd-buffer.slice -10))
                  (if (> cmd-buffer.length 0) cmd-buffer "sibilant"))
              "> "))
     (readline.prompt))

(def handle-line (cmd)
     (var js-line "")

     (try
      (do
       (assign cmd-buffer (concat cmd-buffer cmd)
               js-line (sibilant.sibilize cmd-buffer))

       (var safe-js (if (= (first js-line) "{")
                        (pipe js-line
                              ((sibilant.resolve-macro 'scoped))
                              (sibilant.transpile)
                              (sibilant.output-formatter))
                        js-line))

       (console.log js-line)
       (var result (vm.run-in-context safe-js context "sibilant-repl"))
       (set readline.history 0 cmd-buffer)
       (when (defined? result)
             (output.write ("result: "
                            (util.inspect result) "\n")))
       (set context "_" result)
       (assign cmd-buffer ""))
      (do
       (if (e.message.match /unclosed node:/)
           (do
            (assign cmd-buffer (concat cmd-buffer " "))
            (readline.history.shift))
           (do
            (set readline.history 0 cmd-buffer)
            (output.write (concat e.stack "\n"))
            (assign  cmd-buffer "")))))
     (display-prompt))

(readline.on 'line handle-line)

(readline.on 'close input.destroy)

(display-prompt)
