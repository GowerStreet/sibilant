(var parser {})
(set sibilant 'parser parser)
(set parser 'tokens
     { 'regex              "(\\/(\\\\\\\/|[^\\/\\n])+\\/[glim]*)"
       'comment            "(;.*)"
       'string             "(\"(([^\"]|(\\\\\"))*[^\\\\])?\")"
       'number             "(-?[0-9][0-9.,]*)"
       'literal            "(-?[*.$a-zA-Z_][*.a-zA-Z0-9-_]*(\\?|!)?)"
       'special            "([&'])"
       'tick               "'"
       'hat                "(\\^)"
       'dots               "(\\.+)"
       'other-char         "([#><=!\\+\\/\\*-]+)"
       'open-expression    "(\\(|\\{|\\[)"
       'close-expression    "(\\)|\\}|\\])"
       'newline "\\n"
       'whitespace "\\s"
       'ignored "." })

;;(set parser.tokens 'special-literal (concat parser.tokens.special parser.tokens.literal))

(set parser 'token-precedence  [ 'regex
                                 'comment
                                 'string
                                 'number
                                 'dots
                                 'tick
                                 'hat
                                 'special
                                 'literal
                                 'other-char
                                 'open-expression
                                 'close-expression
                                 'newline
                                 'whitespace
                                 'ignored
                                 ]
     'ordered-regexes (parser.token-precedence.map
                       (#(x)
                         (var r (regex ("^" (get parser.tokens x))))
                         (set r 'name x)
                         r)))


(var ordered-regexes parser.ordered-regexes)


(def parser.parse (string context)
     (var context (if context context { position 0
                        stack []
                        line 1
                        last-newline 0 }))

     (var match true
          regex-name null
          remaining-input string)

     (while match
            (detect ordered-regexes
                    (#(r)
                      (assign match (r.exec remaining-input)
                              regex-name r.name)
                      match))

            (when (exists? match)
                  (var match-string (first match)
                       length (length match-string)
                       next-position (+ context.position length))

                  (when (= 'newline regex-name)
                        (incr context.line)
                        (set context 'last-newline context.position))

                  (when (and (= 'string regex-name)
                             (!= -1 (match-string.index-of "\n")))
                        (var string-newline-count (- (length (match-string.split "\n")) 1))
                        (incr-by context.line string-newline-count)
                        (set context 'last-newline
                             (+ context.position (match-string.last-index-of "\n"))))

                  (context.stack.push { contents []
                                        modifiers []
                                        dir sibilant.dir
                                        file sibilant.file
                                        token match-string
                                        type regex-name
                                        start context.position
                                        line context.line
                                        col (- context.position context.last-newline)
                                        end next-position })

                  (set context 'position next-position)
                  (assign remaining-input (if remaining-input.length
                                              (remaining-input.slice length)
                                              ""))))
     context.stack)

(var parse parser.parse)
