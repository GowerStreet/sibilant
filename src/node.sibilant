(require! 'util 'path 'fs)

(var sibilant exports
     error    (#(str) (throw str))
     inspect  util.inspect)

(set sibilant 'dir (process.cwd))

(def relative-dir-and-file (file-name)
     (|> [ (path.dirname file-name) file-name ]
         (.map (#> (path.relative (process.cwd) #0)))))


(def sibilant.transpile-file (file-name)
     (with-file file-name
                (#>
                 (var source (|> file-name
                                 (fs.read-file-sync 'utf8)
                                 sibilant.strip-shebang))

                 (set sibilant.source-cache file-name source)

                 (|> source parse restructure transpile))))

(def with-file (file-name fn)
     (with-dir-and-file ...(relative-dir-and-file file-name) (#> (fn file-name))))

(def sibilant.sourcemap-file (file-name)
     (with-file file-name
                (#->
                 (fs.read-file-sync 'utf8)
                 sibilant.strip-shebang
                 sourcemap)))


(set require.extensions ".sibilant"
     (#(module filename)
       (var content (sibilant.sibilize-file filename))
       (module.*compile content filename)))

(set require.extensions ".son"
     (#(module filename)
       (var content (sibilant.sibilize-json filename)
            json (try (JSON.parse content)
                      (do (console.error "could not parse:\n" content)
                          (throw e))))
       
       (set module 'exports json)))


(def sibilant.package-info ()
     (|> **dirname
         (concat "/../package.json")
         (fs.read-file-sync 'utf8)
         JSON.parse))

(def sibilant.version-string ()
     (var package (sibilant.package-info))
     (concat package.name " version " package.version
             "\n(at " (path.join **dirname "..") ")"))


(def sibilant.include (file)
     (unless (match-regex? file "\\.(sibilant|son)$")
           (assign file (concat file ".sibilant")))

     (when (match-regex? file "^\\.\\.?/")
           (assign file (path.resolve sibilant.dir file)))

     (var resolved-file
          (try (require.resolve file)
               (error ("Failed to resolve file for inclusion: " file))))

     (sibilant.transpile-file resolved-file))
