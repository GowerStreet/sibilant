(var restructurers {}
     acceptable-pairs { "(" ")" "[" "]" "{" "}" }
     bracket-types { "(" 'expression
                     "[" 'bracket
                     "{" 'brace })

(def restructure (input)
     (var output { type 'root
                   contents []
                   file sibilant.file
                   col 0
                   line 1 }
          context { parse-stack [output]
                    output output
                    input input
                    specials 0 })

     (inject context input
             (#(context token index)
               (var restructurer (or (get restructurers token.type) restructurers.default))
               (restructurer token context index)))

     (unless (= 1 (length context.parse-stack))
             (throw ("unclosed node: " (prettify (first context.parse-stack) false))))

     output)

(set sibilant 'restructure restructure)

(def restructurers.open-expression (token context)
     (var first (first context.parse-stack))
     (set token
          'contents []
          'type (get bracket-types token.token)
          'parent first)
     (accept-specials token context)
     (send first.contents push token)
     (context.parse-stack.unshift token)
     context)


(def restructurers.close-expression (node context index)
     (var first (first context.parse-stack))

     (when (node? first 'root)
           (throw ("unexpected " node.token " on "node.file":"node.line":"node.col)))
     (when (!= (get acceptable-pairs first.token) node.token)
           (throw ("trying to close " (yellow (sibilant.pretty-print first))
                                      "\n   on "first.file":"first.line":"first.col
                                      "\n   with "(sibilant.pretty-print node)
                                      "\n   on "node.file":"node.line":"node.col
                                      "\n")))

     (set first 'end node.end 'closed true)
     (context.parse-stack.shift)
     (close-specials first context)
     (when (zero? context.parse-stack.length)
           (throw ("unbalanced parens:\n"
                   (call inspect parse-stack))))
     context)

(def open-special (node context)
     (incr context.specials)

     (var first (first context.parse-stack))
     (set node
          'contents []
          'parent first)

     (first.contents.push node)
     (context.parse-stack.unshift node)
     context)

(def accept-specials (node context)
     (set node 'specials (get context 'specials))
     (set context 'specials 0)
     context)

(def close-specials (node context)
     (when (> node.specials 0)
           (decr node.specials)
           (context.parse-stack.shift)
           (close-specials node context))
     context)

(def restructurers.hat (node context index) (open-special node context))
(def restructurers.dots (node context index) (open-special node context))
(def restructurers.tick (node context index) (open-special node context))
(def restructurers.at (node context index) (open-special node context))

(def restructurers.whitespace (token context index) context)
(def restructurers.newline (token context index) context)
(def restructurers.comment (token context index) context)
(def restructurers.ignored (token context index) context)

(def restructurers.default (token context index)
     (accept-specials token context)
     (send (get (first context.parse-stack) 'contents) push token)
     (close-specials token context))
