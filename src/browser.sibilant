(meta "//# sourceMappingURL=browser.map\n")

(chainable $ $.get)

((#(root)
   (var sibilant {} exports sibilant)
   (def error (str) (throw str))
   (def inspect (item) (if item.to-source (item.to-source) (item.to-string)))
   (set root 'sibilant sibilant)

   (include "../include/functional"
            "./pretty-printer"
            "./output-formatter"
            "../include/functional"
            "./parser"
            "./restructurer"
            "./macros"
            "./helpers"
            "./core"
            "./transpiler"
            "./require-and-include")

   (var package (include "../package.son"))
   (def sibilant.package-info package)

   (def sibilant.version-string ()
        (concat package.name " browser version " package.version))

   (set sibilant 'dir 'browser)

   (when (defined? $)
         ($ (#>
             (var sibilant root.sibilant
                  scripts ($.make-array ($ "script[type=\"application/sibilant\"][src]"
                                           (map (#> this.src)))))

             (def sibilant.initialize () false)

             
             (def eval-code (js)
                  ((new Function js)))

             (def sibilant.include (url)
                  ($.get url (done (#> (eval-code (sibilize #0))))))

             (def sibilant.load-macros (fn)
                  (chain (sibilant.include "/javascripts/macros.sibilant")
                         (done (#> (when (function? fn) (fn sibilant))))))

             (chain (sibilant.load-macros) (then (map scripts sibilant.include))))))) this)
