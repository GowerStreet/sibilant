(meta "//# sourceMappingURL=../maps/browser.map\n")

(chainable $ $.get)

((#(root)
   (var sibilant {} exports sibilant)
   (def error (str) (throw str))
   (def inspect (item)
        (if item.to-source (item.to-source) (item.to-string)))
   (set root 'sibilant sibilant)

   (include "../include/functional"
            "./pretty-printer"
            "./output-formatter"
            "../include/functional"
            "./parser"
            "./restructurer"
            "./macros"
            "./docs"
            "./helpers"
            "./core"
            "./transpiler"
            "./docs"
            "./require-and-include")

   (alias-macro macro macro-tmp)

   (macro macro (name args ...body)
          (var name-tr (output-formatter (transpile name))
               options )
          `(set sibilant.macros.namespaces.core (quote @name-tr)
                (lambda @{ name name args args node this body body })))

   (include "../include/macros.sibilant")

   (rename-macro macro-tmp macro)


   (var package (include "../package.son"))
   (def sibilant.package-info package)

   (def sibilant.version-string ()
        (concat package.name " browser version " package.version))

   (set sibilant 'dir 'browser)

   ($ (#>
       (var sibilant root.sibilant
            scripts ($.make-array ($ "script[type=\"application/sibilant\"][src]"
                                     (map (#> this.src)))))

       (def sibilant.initialize () false)
       
       (def eval-code (js)
            ((new Function js)))

       (def sibilant.include (url)
            ($.get url (done (#> (eval-code (sibilize #0))))))

       (map scripts sibilant.include)))) this)
