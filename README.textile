h1. Sibilant

There's a ridiculous amount of documentation I need to do, but I wanted to get this out.

You've seen coffeescript, the language that is parsed by javascript and "compiles" to javascript.  Sibilant is like that, but inspired by lisp.  Everything is a list.  Macros that output javascript can be defined in sibilant and included at translation time.

h2. Installation

@bash$ npm install sibilant@

h2. Repl

<pre><code>bash$ sibilant
sibilant> (defvar sys (require 'sys))
sibilant> (sys.puts "hello world")
hello world
sibilant> (defun hello (&rest args)
...est args) > (sys.puts (sys.inspect args)))
result: [Function]
sibilant> (hello 'world)
[ 'world' ]
</code></pre>

h2. Convert a file

@bash$ sibilant package.lisp@

This outputs to stdout.  To print to a file, use unix.

@bash$ sibilant package.lisp > package.json@

This is actually how package.json is generated.

h2. Examples

Check out "the examples directory":http://github.com/jbr/sibilant/tree/master/examples/ to get a sense of what's possible.  Here's the example from "nodejs.org":http://nodejs.org/:

<pre><code>(defvar http (require 'http))

(defvar server (http.create-server (lambda (request, response)
  (response.write-head 200 (hash "Content-Type" "text/plain"))
  (response.end "Hello World\n"))))

(server.listen 8124 "127.0.0.1")
(console.log "Server running at http://127.0.0.1:8124/")</code></pre>
