{"version":3,"sources":["/Users/jbr/code/sibilant/src/restructurer.sibilant"],"names":[],"mappings":"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","sourcesContent":["(var restructurers {}\n     acceptable-pairs { \"(\" \")\" \"[\" \"]\" \"{\" \"}\" }\n     bracket-types { \"(\" 'expression\n                     \"[\" 'bracket\n                     \"{\" 'brace })\n\n(def restructure (input)\n     (var output { type 'root contents [] modifiers [] file sibilant.file col 0 line 1 })\n     (inject { parse-stack [output], output output, input input } input\n             (#(context token index)\n               (var restructurer (or (get restructurers token.type) restructurers.default))\n               (restructurer token context index)))\n     output)\n\n(set sibilant 'restructure restructure)\n\n(def restructurers.open-expression (token context index)\n     (var first (first context.parse-stack))\n     (set token 'contents []\n          'type (get bracket-types token.token)\n          'parent first)\n     (send first.contents push token)\n     (context.parse-stack.unshift token)\n     context)\n\n(def code-context (node context)\n     (var context (or context 5))\n\n     (if node.input\n         (do\n          (var n (- node.col 1)\n               pointer \"\"\n               lines (chain node.input\n                            (split \"\\n\")\n                            (slice\n                             (- node.line context)\n                             (+ node.line context))))\n\n          (while (decr n) (assign pointer (pointer.concat \"-\"))) \n          \n          (join \"\\n\" (chain (lines.slice 0 context)\n                            (concat [(concat pointer \"^\" )])\n                            (concat (lines.slice context (* 2 context))))))\n         (sibilant.pretty-print node)))\n\n(def restructurers.close-expression (node context index)\n     (var first (first context.parse-stack))\n     (when (!= (get acceptable-pairs first.token) node.token)\n           (throw (\"trying to close \" (yellow (sibilant.pretty-print first))\n                                      \"\\n   on \"first.file\":\"first.line\":\"first.col\n                                      \"\\n   with \"(sibilant.pretty-print node)\n                                      \"\\n   on \"node.file\":\"node.line\":\"node.col\n                                      \"\\n\")))\n\n     (set first 'end node.end)\n     (context.parse-stack.shift)\n     (when (zero? context.parse-stack.length)\n           (throw (\"unbalanced parens:\\n\"\n                   (call inspect parse-stack))))\n     context)\n\n(def restructurers.hat (node context index)\n     (var next-node (get context.input (+ 1 index)))\n     (next-node.modifiers.push node)\n     context)\n\n(def restructurers.dots (node context index)\n     (var next-node (get context.input (+ 1 index)))\n     (next-node.modifiers.push node)\n     context)\n\n(def restructurers.tick (node context index)\n     (var next-node (get context.input (+ 1 index)))\n     (next-node.modifiers.push node)\n     context)\n(def restructurers.at (node context index)\n     (var next-node (get context.input (+ 1 index)))\n     (next-node.modifiers.push node)\n     context)\n\n(def restructurers.whitespace (token context index) context)\n(def restructurers.newline (token context index) context)\n(def restructurers.ignored (token context index) context)\n\n(def restructurers.default (token context index)\n     (send (get (first context.parse-stack) 'contents) push token)\n     context)\n"]}