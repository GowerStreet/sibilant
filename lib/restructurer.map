{"version":3,"sources":["/Users/jbr/code/sibilant/src/restructurer.sibilant"],"names":[],"mappings":"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","sourcesContent":["(var restructurers {}\n     acceptable-pairs { \"(\" \")\" \"[\" \"]\" \"{\" \"}\" }\n     bracket-types { \"(\" 'expression\n                     \"[\" 'bracket\n                     \"{\" 'brace })\n\n(def restructure (input)\n     (var output { type 'root\n                   contents []\n                   file sibilant.file\n                   col 0\n                   line 1 }\n          context { parse-stack [output]\n                    output output\n                    input input\n                    specials 0 })\n\n     (inject context input\n             (#(context token index)\n               (var restructurer (or (get restructurers token.type) restructurers.default))\n               (restructurer token context index)))\n     output)\n\n(set sibilant 'restructure restructure)\n\n(def restructurers.open-expression (token context)\n     (var first (first context.parse-stack))\n     (set token\n          'contents []\n          'type (get bracket-types token.token)\n          'parent first)\n     (accept-specials token context)\n     (send first.contents push token)\n     (context.parse-stack.unshift token)\n     context)\n\n\n(def restructurers.close-expression (node context index)\n     (var first (first context.parse-stack))\n\n     (when (!= (get acceptable-pairs first.token) node.token)\n           (throw (\"trying to close \" (yellow (sibilant.pretty-print first))\n                                      \"\\n   on \"first.file\":\"first.line\":\"first.col\n                                      \"\\n   with \"(sibilant.pretty-print node)\n                                      \"\\n   on \"node.file\":\"node.line\":\"node.col\n                                      \"\\n\")))\n\n     (set first 'end node.end)\n     (context.parse-stack.shift)\n     (close-specials first context)\n     (when (zero? context.parse-stack.length)\n           (throw (\"unbalanced parens:\\n\"\n                   (call inspect parse-stack))))\n     context)\n\n(def open-special (node context)\n     (incr context.specials)\n\n     (var first (first context.parse-stack))\n     (set node\n          'contents []\n          'parent first)\n\n     (first.contents.push node)\n     (context.parse-stack.unshift node)\n     context)\n\n(def accept-specials (node context)\n     (set node 'specials (get context 'specials))\n     (set context 'specials 0)\n     context)\n\n(def close-specials (node context)\n     (when (> node.specials 0)\n           (decr node.specials)\n           (context.parse-stack.shift)\n           (close-specials node context))\n     context)\n\n(def restructurers.hat (node context index) (open-special node context))\n(def restructurers.dots (node context index) (open-special node context))\n(def restructurers.tick (node context index) (open-special node context))\n(def restructurers.at (node context index) (open-special node context))\n\n(def restructurers.whitespace (token context index) context)\n(def restructurers.newline (token context index) context)\n(def restructurers.ignored (token context index) context)\n\n(def restructurers.default (token context index)\n     (accept-specials token context)\n     (send (get (first context.parse-stack) 'contents) push token)\n     (close-specials token context))\n"]}