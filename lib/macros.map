{"version":3,"sources":["/Users/jbr/code/sibilant/src/macros.sibilant"],"names":[],"mappings":"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","sourcesContent":["(var macros {})\n(set sibilant 'macros macros 'debug false)\n\n\n(def recurse-indent (...args)\n     (map args\n          (#(arg)\n            (if (node? arg) (do (set arg 'contents (apply recurse-indent (compact (flatten arg.contents)))) arg)\n                (list? arg) (apply recurse-indent arg)\n                (number? arg) (arg.to-string)\n                (string? arg)\n                (chain arg\n                       (replace (regex \"\\\\n\" 'g) \"\\n  \")\n                       (replace (regex \"\\\\n\\\\s+\\\\n\" 'g) \"\\n\\n\"))\n\n                 arg))))\n\n(def indent (...args)\n     [\"\\n  \" (recurse-indent args) \"\\n\"])\n\n\n(def escape-regex (string)\n     (string.replace (regex \"[\\\\-\\\\[\\\\]\\\\/\\\\{\\\\}\\\\(\\\\)\\\\*\\\\+\\\\?\\\\.\\\\\\\\\\^\\\\$\\\\|]\" 'g) \"\\\\$&\"))\n\n(def ^return (token)\n     (when sibilant.debug (console.log \"returning \" (prettify token)))\n     (var default-return (as-statement [\"return \" (transpile token)]))\n     (if (and token token.contents token.contents.length)\n         (switch (get (first token.contents) 'token)\n                 (('return 'throw 'do) (transpile token))\n                 ('delete\n                  (var delete-macro (get macros 'delete))\n                  (if (< token.contents.length 3) default-return\n                      [ (as-statement (apply delete-macro (token.contents.slice 1 -1)))\n                        \"\\nreturn \"\n                        (as-statement (call delete-macro (last token.contents)))]))\n                 ('assign\n                  (if (< token.contents.length 4) default-return\n                      [ (apply ^assign\n                               (token.contents.slice 1 (- token.contents.length 2)))\n                        \"\\nreturn \"\n                        (apply ^assign (token.contents.slice -2))]))\n                 ('var\n                  [ (transpile token) \"\\nreturn \" (transpile (if (even? token.contents.length)\n                                                                 (last token.contents)\n                                                                 (first (token.contents.slice -2))))])\n                 ('set\n                  (if (< token.contents.length 5) default-return\n                      (do\n                       (var obj (second token.contents)\n                            non-return-part (token.contents.slice 2 (- token.contents.length 2))\n                            return-part (token.contents.slice -2))\n                       (non-return-part.unshift obj)\n                       (return-part.unshift obj)\n                       [ (^set ...non-return-part)\n                         \"\\nreturn \"\n                         (^set ...return-part)])))\n                 (default default-return))\n         default-return))\n\n\n(def statement? (transpiled)\n     (if (node? transpiled) (statement? transpiled.contents)\n         (list? transpiled) (statement? (last transpiled))\n         (string? transpiled) (= \";\" (last transpiled))\n         false))\n\n(def as-statement (node)\n     (var transpiled (transpile node))\n\n     (if (empty-node? transpiled) undefined\n         (statement? transpiled) transpiled\n         [ transpiled \";\" ]))\n\n(def ^do (...body)\n     (if (= 1 body.length) (^return (first body))\n         body.length [ (interleave \"\\n\" (map (body.slice 0 -1) (#(node) (as-statement node))))\n                       \"\\n\"\n                       (^return (last body)) ]\n         \"\"))\n\n(def ^empty-list () 'null)\n\n(def ^def (fn-name args ...body)\n     (var fn-name-tr (transpile fn-name) this-node this)\n\n     (as-statement [ (if (match? (regex \"\\\\.\") (output-formatter fn-name-tr)) \"\" \"var \")\n                     fn-name-tr \" = \"\n                     (^lambda { name fn-name args args node this-node } ...body )\n                     ] ))\n\n(def ^macro (name args ...body)\n     (var name-tr (output-formatter (transpile name))\n          options { name name args args node this}\n          js (output-formatter (^lambda options ...body)))\n\n     (when sibilant.debug (console.log js))\n     \n     (try (set macros name-tr (eval js))\n          (error (\"error in parsing macro \"\n                  (sibilant.pretty-print name) \":\\n\" js)))\n\n     undefined)\n\n(def ^concat (...args)\n     [\"(\" (interleave \" + \" (map args transpile)) \")\"])\n\n(def ^reverse (arr)\n     (var reversed [])\n     (each (item) arr (reversed.unshift item))\n     reversed)\n\n(var reverse ^reverse)\n\n(def ^lambda (args-or-options ...body)\n     (var args (or (get args-or-options 'args) args-or-options)\n          body (or (get args-or-options 'body) body)\n          args (if (node? args 'expression) args.contents\n                   (and (node? args) (empty? body)) (do (assign body [ args ]) [])\n                   args)\n          name (when args-or-options.name\n                     (chain (output-formatter (transpile args-or-options.name))\n                            (replace (regex \"\\\\W+\" 'g) \"$\")\n                            (concat \"$\")))\n          rest (detect args\n                       (#(arg) (node? arg 'dots))))\n\n     (var this-node this\n          node (detect\n                [ this-node args-or-options.node args-or-options.name args (first body) ]\n                (#(n) (and (node? n) (get n 'file)))))\n     [\"(function\" (if name (\" \" name) \"\") \"(\"\n       (interleave \", \" (map args transpile)) \") {\"\n       (if (or args-or-options.name node)\n           (indent [\"/*\"\n                     (if args-or-options.name (\" \" (sibilant.pretty-print args-or-options.name false)) \"\")\n                     (if node (\" \" node.file \":\" node.line \":\" node.col) \"\")\n                     \" */\"]) \"\")\n       (when (exists? rest)\n             (indent (as-statement [\"var \" (transpile rest)\n                       \" = Array.prototype.slice.call(arguments, \"\n                       (- args.length 1) \")\"])))\n\n       (indent (apply ^do body))\n       \"})\"])\n\n(set macros \"#\" ^lambda)\n\n(def ^quoted-hash (...pairs)\n     (var cached-quote-value ^hash.quote-keys)\n     (set ^hash 'quote-keys true)\n     (var value (^hash ...pairs))\n     (set ^hash 'quote-keys cached-quote-value)\n     value)\n\n(def ^hash (...pairs)\n     (when (odd? pairs.length)\n           (error (\"odd number of key-value pairs in hash: \"\n                   (call inspect pairs))))\n\n     (var quote-keys ^hash.quote-keys\n          pair-strings (bulk-map pairs (#(key value)\n                                         [ (if (and quote-keys (not (node? key 'string)))\n                                               [\"\\\"\" (transpile key) \"\\\"\"]\n                                               (transpile key))\n                                           \": \"\n                                           (transpile value)])))\n     (if (>= 1 pair-strings.length)\n         [\"{ \" (interleave \", \" pair-strings) \" }\"]\n         [\"{\" (indent (interleave \",\\n\" pair-strings)) \"}\"]))\n\n\n(def qescape (content)\n     (if (not (exists? content)) \"\"\n         (string? content) (chain content\n                                  (replace (regex \"\\\"\" 'g) \"\\\\\\\"\")\n                                  (replace (regex \"\\\\n\" 'g) \"\\\\n\\\" +\\n\\\"\"))\n         content))\n\n(def log-pretty (label arg)\n     (console.log (concat label \": \" (prettify arg)))\n     arg)\n\n(def ^quote (content)\n     (if (string? content) (\"\\\"\" (qescape content) \"\\\"\")\n         (number? content) (^quote (content.to-string))\n         (node? content 'literal) [\"\\\"\" (transpile content) \"\\\"\"]\n         (node? content 'expression)\n         (^call 'expand-quote (^quote content.node-id)\n                (apply ^quoted-hash (alternating-keys-and-values (find-unquotes content))))\n         (do\n          (console.log (\"unknown content\" (prettify content)))\n          content)))\n\n(def ^debug (val)\n     (set sibilant 'debug (eval (output-formatter (transpile val)))) null)\n\n(def map-node (node fn)\n     (if (node? node)\n         (do\n          (var mapped-node (fn node))\n          (if (node? mapped-node)\n              (merge-with mapped-node { contents (map-node node.contents fn) })\n              mapped-node))\n         (list? node) (map node (#(c) (map-node c fn)))\n         (fn node)))\n\n(def each-node (node fn)\n     (if (node? node) (when (fn node) (each-node node.contents fn))\n         (list? node) (each (c) node (each-node c fn))\n         (fn node)))\n\n(def expand-quote (node-id expansions)\n     (var expanded-nodes (map-node (get sibilant.node-cache node-id)\n                                   (#(node)\n                                     (log-pretty node-id\n         (if (node? node)\n             (or (get expansions node.node-id) (clone node))\n             node)))))\n\n     (transpile expanded-nodes))\n\n(def unquote? (node)\n     (node? node 'at))\n\n(def find-unquotes (node)\n     (var unquotes {})\n     (each-node node (#(n)\n                       (when (unquote? n)\n                             (set unquotes n.node-id (transpile n)))\n                       (not (node? n 'tick))))\n     unquotes)\n\n(def alternating-keys-and-values (hash)\n     (flatten (map (keys hash)\n                   (#(key) [key, (get hash key)]))))\n\n\n(def ^list (...args)\n       (var arg-segments [])\n       (if (empty? args) \"[]\"\n           (do\n            (def simple-list (args)\n                 [\"[ \" (interleave \", \" (map args (#(arg) arg.transpiled))) \" ]\"])\n\n            (args.for-each (#(arg)\n                  (if (node? arg 'dots) (arg-segments.push {transpiled (transpile arg)})\n                   (list? (last arg-segments)) (send (last arg-segments) push {transpiled (transpile arg)})\n                   (arg-segments.push [{transpiled (transpile arg)}]))))\n\n            (assign arg-segments (map arg-segments\n                                      (#(segment)\n                                        (if (list? segment)\n                                            (simple-list segment)\n                                            segment.transpiled))))\n\n            (if (= 1 (length arg-segments))\n                (first arg-segments)\n                [(first arg-segments) \".concat(\" (interleave \", \" (rest arg-segments))\")\"]))))\n\n\n(def ^call (fn-name ...args)\n;;     (console.log (\"\" (prettify args) \" has dots: \" (any? args (#(arg) (node? arg 'dots))) (prettify (macros.list ...args))))\n     (if (any? args (#(arg) (node? arg 'dots)))\n           (macros.apply fn-name (macros.list ...args))\n           [ (transpile fn-name)\n                   \"(\" (interleave \", \" (map args transpile)) \")\" ]))\n\n"]}