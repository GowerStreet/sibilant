{"version":3,"sources":["/Users/jbr/code/sibilant/src/macros.sibilant"],"names":[],"mappings":"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","sourcesContent":["(var macros {})\n(set sibilant 'macros macros)\n\n(def recurse-indent (...args)\n     (map args\n          (#(arg)\n            (if (node? arg) (do (set arg 'contents (apply recurse-indent (compact (flatten arg.contents)))) arg)\n                (list? arg) (apply recurse-indent arg)\n                (number? arg) (arg.to-string)\n                (string? arg)\n                (chain arg\n                       (replace (regex \"\\\\n\" 'g) \"\\n  \")\n                       (replace (regex \"\\\\n\\\\s+\\\\n\" 'g) \"\\n\\n\"))\n\n                 arg))))\n\n(def indent (...args)\n     [\"\\n  \" (recurse-indent args) \"\\n\"])\n\n\n(def escape-regex (string)\n     (string.replace (regex \"[\\\\-\\\\[\\\\]\\\\/\\\\{\\\\}\\\\(\\\\)\\\\*\\\\+\\\\?\\\\.\\\\\\\\\\^\\\\$\\\\|]\" 'g) \"\\\\$&\"))\n\n(def ^return (token)\n     (when sibilant.debug (console.log \"returning \" (prettify token)))\n     (var default-return (as-statement [\"return \" (transpile token)]))\n     (if (and token token.contents token.contents.length\n              (empty? (get (first token.contents) 'modifiers)))\n         (switch (get (first token.contents) 'token)\n                 (('return 'throw 'do) (transpile token))\n                 ('delete\n                  (var delete-macro (get macros 'delete))\n                  (if (< token.contents.length 3) default-return\n                      [ (as-statement (apply delete-macro (token.contents.slice 1 -1)))\n                        \"\\nreturn \"\n                        (as-statement (call delete-macro (last token.contents)))]))\n                 ('assign\n                  (if (< token.contents.length 4) default-return\n                      [ (apply ^assign\n                               (token.contents.slice 1 (- token.contents.length 2)))\n                        \"\\nreturn \"\n                        (apply ^assign (token.contents.slice -2))]))\n                 ('var\n                  [ (transpile token) \"\\nreturn \" (transpile (if (even? token.contents.length)\n                                                                 (last token.contents)\n                                                                 (first (token.contents.slice -2))))])\n                 ('set\n                  (if (< token.contents.length 5) default-return\n                      (do\n                       (var obj (second token.contents)\n                            non-return-part (token.contents.slice 2 (- token.contents.length 2))\n                            return-part (token.contents.slice -2))\n                       (non-return-part.unshift obj)\n                       (return-part.unshift obj)\n                       [ (^set ...non-return-part)\n                         \"\\nreturn \"\n                         (^set ...return-part)])))\n                 (default default-return))\n         default-return))\n\n\n(def ^list (...args) [\"[ \" (interleave \", \" (map args transpile)) \" ]\"])\n\n(def statement? (transpiled)\n     (if (node? transpiled) (statement? transpiled.contents)\n         (list? transpiled) (statement? (last transpiled))\n         (string? transpiled) (= \";\" (last transpiled))\n         false))\n\n(def as-statement (node)\n     (var transpiled (transpile node))\n\n     (if (empty-node? transpiled) undefined\n         (statement? transpiled) transpiled\n         [ transpiled \";\" ]))\n\n(def ^do (...body)\n     (if (= 1 body.length) (^return (first body))\n         body.length [ (interleave \"\\n\" (map (body.slice 0 -1) (#(node) (as-statement node))))\n                       \"\\n\"\n                       (^return (last body)) ]\n         \"\"))\n\n(def ^empty-list () 'null)\n\n(def ^call (fn-name ...args)\n     [ (transpile fn-name)\n       \"(\" (interleave \", \" (map args transpile)) \")\"])\n\n(def ^def (fn-name args ...body)\n     (var fn-name-tr (transpile fn-name) this-node this)\n\n     (as-statement [ (if (match? (regex \"\\\\.\") (output-formatter fn-name-tr)) \"\" \"var \")\n                     fn-name-tr \" = \"\n                     (^lambda { name fn-name args args node this-node } ...body )\n                     ] ))\n\n(def ^macro (name args ...body)\n     (var name-tr (output-formatter (transpile name))\n          options { name name args args node this}\n          js (output-formatter (^lambda options ...body)))\n\n     (when sibilant.debug (console.log js))\n     \n     (try (set macros name-tr (eval js))\n          (error (\"error in parsing macro \"\n                  (sibilant.pretty-print name) \":\\n\" js)))\n\n     undefined)\n\n(def ^concat (...args)\n     [\"(\" (interleave \" + \" (map args transpile)) \")\"])\n\n(def ^reverse (arr)\n     (var reversed [])\n     (each (item) arr (reversed.unshift item))\n     reversed)\n\n(var reverse ^reverse)\n\n(def ^lambda (args-or-options ...body)\n     (var args (or (get args-or-options 'args) args-or-options)\n          body (or (get args-or-options 'body) body)\n          args (or args.contents args)\n          name (when args-or-options.name\n                     (chain (output-formatter (transpile args-or-options.name))\n                            (replace (regex \"\\\\W+\" 'g) \"$\")\n                            (concat \"$\")))\n          rest (detect args\n                       (#(arg)\n                         (when arg.modifiers\n                               (var mod (first arg.modifiers))\n                               (and mod (= \"...\" mod.token))))))\n     \n     (var this-node this\n          node (detect\n                [ this-node args-or-options.node args-or-options.name args (first body) ]\n                (#(n) (and (node? n) (get n 'file)))))\n     [\"(function\" (if name (\" \" name) \"\") \"(\"\n       (interleave \", \" (map args transpile)) \") {\"\n       (if (or args-or-options.name node)\n           (indent [\"/*\"\n                     (if args-or-options.name (\" \" (sibilant.pretty-print args-or-options.name false)) \"\")\n                     (if node (\" \" node.file \":\" node.line \":\" node.col) \"\")\n                     \" */\"]) \"\")\n       (when (exists? rest)\n             (indent (as-statement [\"var \" (transpile rest)\n                       \" = Array.prototype.slice.call(arguments, \"\n                       (- args.length 1) \")\"])))\n\n       (indent (apply ^do body))\n       \"})\"])\n\n(set macros \"#\" ^lambda)\n\n(def ^hash (...pairs)\n     (when (odd? pairs.length)\n           (error (\"odd number of key-value pairs in hash: \"\n                   (call inspect pairs))))\n\n     (var quote-keys ^hash.quote-keys\n          pair-strings (bulk-map pairs (#(key value)\n                                         [ (if (and quote-keys (not (node? key 'string)))\n                                               [\"\\\"\" (transpile key) \"\\\"\"]\n                                               (transpile key))\n                                           \": \"\n                                           (transpile value)])))\n     (if (>= 1 pair-strings.length)\n         [\"{ \" (interleave \", \" pair-strings) \" }\"]\n         [\"{\" (indent (interleave \",\\n\" pair-strings)) \"}\"]))\n\n\n(def qescape (content)\n     (if (not (exists? content)) \"\"\n\n         (string? content) (content.replace (regex \"\\\"\" 'g) \"\\\\\\\"\")\n\n         (and (not (defined? content.unquote) (= content.type 'output)))\n           (do\n            (set content 'contents (qescape content.contents))\n            content)\n\n         (list? content) (map content qescape)\n\n         content))\n\n(def ^quote (content)\n     (if (string? content) (\"\\\"\" (qescape content) \"\\\"\")\n         [\"[\\\"\"\n           (qescape (transpile content))\n           \"\\\"]\"]))\n\n(def ^unquote (content)\n     { type 'output contents [ \"\\\", \" (transpile content) \", \\\"\"] unquote true })\n\n(def ^debug (val)\n     (set sibilant 'debug (eval (output-formatter (transpile val)))) null)"]}