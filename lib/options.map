{"version":3,"sources":["/Users/jbr/code/sibilant/include/functional.sibilant","/Users/jbr/code/sibilant/src/options.sibilant"],"names":[],"mappings":"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","sourcesContent":["(def bulk-map (arr fn)\n  (var index 0\n          group-size fn.length\n          ret-arr [])\n\n  (while (< index arr.length)\n    (send ret-arr push\n          (apply fn (send arr slice\n                          index (+ index group-size))))\n    (incr-by index group-size))\n  ret-arr)\n\n(def inject (start items fn)\n  (var value start)\n  (when (list? items)\n    (each (item index) items\n      (assign value (fn value item index))))\n  value)\n\n(def map (items fn)\n  (inject [] items\n          (#(collector item index)\n            (send collector push (fn item index))\n            collector)))\n\n(def select (items fn)\n  (inject [] items\n          (#(collector item index)\n            (when (fn item index)\n              (send collector push item))\n            collector)))\n\n(def detect (items fn)\n  (var return-item undefined\n          index 0\n          items (or items []))\n\n  (until (or (= items.length index) return-item)\n         (when (fn (get items index) index)\n           (assign return-item (get items index)))\n         (incr index))\n\n  return-item)\n\n(def all? (items fn)\n     (undefined? (detect items (#(item index) (not (fn item index))))))\n\n(def none? (items fn)\n     (undefined? (detect items fn)))\n\n(def any? (items fn)\n     (defined? (detect items fn)))\n\n(def reject (items fn)\n  (var args [ items fn ])\n  (select items (thunk (not (apply fn arguments)))))\n\n(def compact (arr)\n     (select arr (#(item)\n                   (and\n                    (!= null item)\n                    (!= false item)\n                    (defined? item)))))\n\n(def interleave (glue arr)\n     (if (list? glue) (inject [] arr\n             (#(collector item index)\n               (collector.concat [item (get glue index)])))\n\n         \n     (inject [(first arr)] (rest arr)\n             (#(collector item index) (collector.concat [glue item])))))\n\n\n(def flatten (...items)\n  (inject [] items\n          (#(collector item)\n            (collector.concat\n             (if (list? item)\n               (apply flatten item)\n               item)))))\n\n\n(def recurse-map (item fn)\n     (if (list? item) (map item (#(subitem) (recurse-map subitem fn)))\n         (fn item)))\n\n(def pluck (items attribute)\n     (map items (#(item) (get item attribute))))\n\n(def merge-into (into from)\n     (each (key) (keys from) (set into key (get from key)))\n     into)\n\n(def clone (object)\n     (inject {} (keys object)\n             (#(collector key)\n               (set collector key (get object key))\n               collector)))\n\n(def map-values (object fn)\n     (inject {} (keys object)\n             (#(collector key index)\n               (set collector key (fn (get object key) key))\n               collector)))\n\n(def merge-with (into from)\n     (merge-into (clone into) from))\n","(include \"../include/functional\")\n\n(def extract-options (config args)\n  (var args (or args (process.argv.slice 2))\n       default-label 'unlabeled\n       current-label default-label\n       after-break false\n       config (or config {})\n       unlabeled [])\n\n  (def label? (item) (and (string? item) (send /^-/ test item)))\n\n  (def synonym-lookup (item)\n    (var config-entry (get config item))\n    (if (string? config-entry)\n      (synonym-lookup config-entry)\n      item))\n\n  (def takes-args? (item)\n    (!= false (get config (label-for item))))\n\n  (assign default-label (synonym-lookup default-label)\n          current-label default-label)\n\n  (def label-for (item)\n    (synonym-lookup (item.replace /^-+/ \"\")))\n\n  (def add-value (hash key value)\n    (var current-value (get hash key))\n    (when (undefined? current-value)\n      (assign current-value [])\n      (set hash key current-value))\n    (when (!= true value)\n      (current-value.push value)))\n\n  (def reset-label ()\n    (assign current-label default-label))\n\n  (inject {} args\n          (lambda (return-hash item index)\n            (if (= \"--\" item) (assign after-break true)\n                (if after-break\n                  (add-value return-hash 'after-break item)\n                  (if (label? item)\n                    (do\n                      (assign current-label (label-for item))\n                      (add-value return-hash current-label true)\n                      (when (not (takes-args? item)) (reset-label)))\n                    (do\n                      (add-value return-hash current-label item)\n                      (reset-label)))))\n            return-hash)))\n\n(def process-options (config)\n  (var options (extract-options config))\n  (when config\n    (def handle-pair (key value)\n      (var handle (get config key))\n      (when (string? handle) (handle-pair handle value))\n      (when (function? handle) (handle value options)))\n    (each (key) (keys options) (handle-pair key (get options key))))\n\n  options)\n\n(set module 'exports process-options)\n"]}