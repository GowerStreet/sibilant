{"version":3,"sources":["/Users/jbr/code/sibilant/src/browser.sibilant","/Users/jbr/code/sibilant/include/macros.sibilant","/Users/jbr/code/sibilant/include/functional.sibilant","/Users/jbr/code/sibilant/src/colors.sibilant","/Users/jbr/code/sibilant/src/pretty-printer.sibilant","/Users/jbr/code/sibilant/src/output-formatter.sibilant","/Users/jbr/code/sibilant/src/parser.sibilant","/Users/jbr/code/sibilant/src/restructurer.sibilant","/Users/jbr/code/sibilant/src/macros.sibilant","/Users/jbr/code/sibilant/src/helpers.sibilant","/Users/jbr/code/sibilant/src/core.sibilant","/Users/jbr/code/sibilant/src/transpiler.sibilant","/Users/jbr/code/sibilant/src/require-and-include.sibilant"],"names":[],"mappings":"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","sourcesContent":["(meta \"//# sourceMappingURL=browser.map\\n\")\n\n(chainable $ $.get)\n\n((#(root)\n   (var sibilant {} exports sibilant)\n   (def error (str) (throw str))\n   (def inspect (item) (if item.to-source (item.to-source) (item.to-string)))\n   (set root 'sibilant sibilant)\n\n   (include \"../include/functional\")\n   (include \"./pretty-printer\")\n   (include \"./output-formatter\")\n   (include \"../include/functional\")\n   (include \"./parser\")\n   (include \"./restructurer\")\n   (include \"./macros\")\n   (include \"./helpers\")\n   (include \"./core\")\n   (include \"./transpiler\")\n   (include \"./require-and-include\")\n\n                                        ;   (var package (include \"../package.son\"))\n   (var package {version \"BROWSER\"})\n   (def sibilant.package-info () package)\n\n   (def sibilant.version-string ()\n        (concat package.name \" browser version \" package.version))\n\n   (set sibilant 'dir \"browser\")\n\n   (when (defined? $)\n         ($ (#>\n             (var sibilant root.sibilant\n                  scripts ($.make-array ($ \"script[type=\\\"application/sibilant\\\"][src]\"\n                                           (map (#> this.src)))))\n\n             (def sibilant.initialize () false)\n\n             \n             (def eval-code (js)\n                  ((new Function js)))\n\n             (def sibilant.include (url)\n                  ($.get url (done (#> (eval-code (sibilize #0))))))\n\n             (def sibilant.load-macros (fn)\n                  (chain (sibilant.include \"/javascripts/macros.sibilant\")\n                         (done (#> (when (function? fn) (fn sibilant))))))\n\n             (chain (sibilant.load-macros) (then (map scripts sibilant.include))))))) this)\n","(namespace core)\n\n(macro ternary (cond if-true if-false)\n       [\"(\" (transpile cond) \") ? \"\n            (transpile if-true) \" : \"\n            (transpile if-false)])\n\n(macro join (glue arr)\n       [\"(\" (transpile arr) \").join(\" (transpile glue) \")\"])\n\n(macro set (arr ...kv-pairs)\n       (interleave \"\\n\" (bulk-map kv-pairs\n                                  (#(k v)\n                                    (as-statement [\"(\" (transpile arr) \")\"\n                                                    \"[\" (transpile k) \"] = \" (transpile v) ])))))\n\n(macro var (...pairs)\n       (as-statement\n        [\"var \"\n         (interleave \",\\n    \"\n               (bulk-map pairs\n                         (#(name value)\n                           [ (transpile name) \" = \" (transpile value) ])))\n         ]))\n\n(macro get (obj ...keys)\n       [\"(\" (transpile obj) \")\" (map keys (#(key)\n                                            [\"[\" (transpile key) \"]\"]))])\n\n(macro alias-macro (current-macro-name desired-macro-name)\n       (var current-macro-name (output-formatter (transpile current-macro-name))\n            desired-macro-name (output-formatter (transpile desired-macro-name)))\n       (set sibilant.macros.namespace\n            desired-macro-name (get sibilant.macros.namespace current-macro-name))\n       null)\n\n(macro send (object method ...args)\n       [(transpile object) \".\" (transpile method)\n               \"(\" (interleave \", \" (map args transpile)) \")\"])\n\n(macro apply (fn arglist)\n       '(send @fn apply this @arglist))\n\n(macro cons (first rest)\n       [\"[ \" (transpile first) \" ].concat(\" (transpile rest) \")\"])\n\n(macro append (list ...additional)\n       '(send @list concat (list ...@additional)))\n\n(macro length (arr)\n       '(get @arr 'length))\n\n(macro first (arr) '(get @arr 0))\n(macro second (arr) '(get @arr 1))\n(macro third (arr) '(get @arr 2))\n(macro fourth (arr) '(get @arr 3))\n(macro fifth (arr) '(get @arr 4))\n(macro sixth (arr) '(get @arr 5))\n(macro seventh (arr) '(get @arr 6))\n(macro eighth (arr) '(get @arr 7))\n(macro ninth (arr) '(get @arr 8))\n(macro rest (arr)\n       '(send @arr slice 1))\n\n(macro last (arr)\n       '(first (send @arr slice -1)))\n\n\n(macro = (a b) [ (transpile a) \" === \" (transpile b) ])\n(macro +   (...args)\n       [\"(\" (interleave \" + \" (map args transpile)) \")\"])\n(macro -   (...args)\n       [\"(\" (interleave \" - \" (map args transpile)) \")\"])\n(macro *   (...args)\n       [\"(\" (interleave \" * \" (map args transpile)) \")\"])\n(macro /   (...args)\n           [\"(\" (interleave \" / \" (map args transpile)) \")\"])\n(macro or  (...args)\n       [\"(\" (interleave \" || \" (map args transpile)) \")\"])\n\n(macro and (...args)\n       (ternary (= 1 (length args)) (transpile (first args))\n                [\"(\" (interleave \" && \" (map args transpile)) \")\"]))\n\n(macro mod (...args)\n       [\"(\" (interleave \" % \" (map args transpile)) \")\"])\n\n(macro infix-comparator (comparator args)\n       [\"(\" (interleave \" && \"\n                  (map (args.slice 0 -1)\n                       (#(item index)\n                         [ item \" \" comparator \" \" (get args (+ 1 index))])))\n            \")\"])\n\n(macro >  (...args) (^infix-comparator  \">\"  (map args transpile)))\n(macro <  (...args) (^infix-comparator  \"<\"  (map args transpile)))\n(macro <= (...args) (^infix-comparator \"<=\"  (map args transpile)))\n(macro >= (...args) (^infix-comparator \">=\"  (map args transpile)))\n(macro != (...args) (^infix-comparator \"!==\" (map args transpile)))\n\n(macro pow (base exponent)\n       '(Math.pow @base @exponent))\n\n(macro incr-by (item increment)\n       [ (transpile item) \" += \" (transpile increment)])\n\n(macro incr (item)\n       [\"((\" (transpile item) \")++)\"])\n\n(macro decr (item)\n       [\"((\" (transpile item) \")--)\"])\n\n(macro new (...args)\n       [\"(new \" '(call ...@args) \")\"])\n\n(macro regex (string glim)\n       '(new RegExp @string @(or glim 'undefined)))\n\n(macro timestamp ()\n       [\"\\\"\" (send (new Date) to-string) \"\\\"\"])\n\n(macro comment (...contents)\n       (map contents (#(content)\n                       [\"// \"(recurse-map (transpile content)\n                                    (#(item)\n                                      (ternary item\n                                               (send (output-formatter (transpile item)) replace\n                                                     (regex \"\\n\" 'g) \"\\n// \")\n                                               null)))])))\n\n(macro zero? (item) '(= @item 0))\n\n(macro empty? (arr)\n       [\"((\" (transpile arr) \").length === 0)\"])\n\n(macro odd? (number)\n       '(= 1 (mod @number 2)))\n\n(macro even? (number)\n       '(= 0 (mod @number 2)))\n\n(macro typeof (thing) [\"typeof \" (transpile thing)])\n\n\n(macro function? (...things)\n       '(and ...@(map things (#(thing) '(= (typeof @thing) 'function)))))\n(macro undefined? (...things)\n       '(and ...@(map things (#(thing) '(= (typeof @thing) 'undefined)))))\n(macro defined? (...things)\n       '(and ...@(map things (#(thing) '(!= (typeof @thing) 'undefined)))))\n(macro number? (...things)\n       '(and ...@(map things (#(thing) '(= (typeof @thing) 'number)))))\n\n(macro if (arg truebody falsebody)\n       [\"(function() {\"\n        (indent [\"if (\" (transpile arg) \") {\"\n                        (indent '(do ...@truebody))\n                        \"} else {\"\n                        (indent '(do ...@falsebody))\n                        \"}\"])\n         \"})()\"])\n\n(macro = (first-thing ...other-things)\n       (var transpiled-first-thing (transpile first-thing))\n       [\"(\" (interleave \" &&\\n \"\n                  (map other-things\n                       (#(thing)\n                         [ transpiled-first-thing\n                                 \" === \"\n                                 (transpile thing) ])))\n            \")\"])\n\n\n(macro string? (thing)\n       [\"typeof(\" (transpile thing) \") === \\\"string\\\"\"])\n\n(macro list? (thing)\n       (var transpiled (transpile thing))\n       [\"((\" transpiled \") && typeof (\" transpiled \") === \\\"object\\\" && (\"\n               transpiled \").constructor.name === \\\"Array\\\")\"])\n\n\n(macro when (arg ...body)\n       [\"(function() {\"\n        (indent [\"if (\" (transpile arg) \") {\"\n                        (indent '(do ...@body))\n                        \"}\"])\n        \"})()\"])\n\n\n(macro not (exp)\n       [\"(!\" (transpile exp) \")\"])\n\n(macro unless (arg ...body)\n       [\"(function() {\"\n        (indent [\"if (\" '(not @arg) \") {\"\n                        (indent '(do ...@body))\n                        \"}\"])\n        \"})()\"])\n\n\n(macro slice (arr start end)\n       '(send @arr slice @start @end))\n\n(macro inspect (...args)\n       (interleave \" + \\\"\\\\n\\\" + \"\n             (map args\n                  (#(arg)\n                    [\"\\\"\" arg \":\\\" + \" (transpile arg)]))))\n\n(macro each (item array ...body)\n       '(send @array for-each\n              (lambda @{ node this args item } ...@body)))\n\n(macro assign (...args)\n       (interleave \"\\n\"\n             (bulk-map args (#(name value)\n                              (as-statement [ (transpile name) \" = \"\n                                                    (transpile value)])))))\n\n\n\n(macro macro-expand (name)\n       (var macro (get macros (output-formatter (transpile name))))\n       (if macro\n           (macro.to-string)\n           \"undefined\"))\n\n(macro throw (...string)\n       [\"throw new Error (\" (interleave \" \" (map string transpile)) \")\"])\n\n(macro as-boolean (expr)\n       [\"(!!(\" (transpile expr) \"))\"])\n\n(macro try (tryblock catchblock)\n       [\"(function() {\"\n        (indent [\"try {\"\n                 (indent '(do @tryblock))\n                 \"} catch (e) {\"\n                 (indent '(do @catchblock))\n                 \"}\"])\n         \"})()\"])\n\n(macro log-pretty (label arg)\n       (var node this)\n       (when (undefined? arg)\n             (assign arg label\n                     label [\"\\\"\" (prettify label false) \"\\\"\"]))\n       `(console.log (concat @[\"\\\"\" node.file \":\" node.line \"\\\"\"] \" \" @label \" = \" (prettify @arg))))\n(alias-macro log-pretty pretty-log)\n\n\n(macro state (...pairs)\n       (if (= 1 (length pairs))\n           (get sibilant.state (output-formatter (transpile (first pairs))))\n           (do (bulk-map pairs (#(k v) (set sibilant.state (output-formatter (transpile k)) (eval (output-formatter (transpile v))))))\n               null)))\n\n(macro symbol ()\n       (var symbol-count (or (get sibilant.state 'symbol-count) 0)\n            new-symbol-count (+ 1 symbol-count))\n       (^state 'symbol-count new-symbol-count)\n       [\"$_symbol\" new-symbol-count \"_$\"])\n\n(macro while (condition ...block)\n       (var symbol (^symbol))\n       '(scoped-without-source\n         (var @symbol)\n         @[\"while (\" (transpile condition) \") {\"\n           (indent '(assign @symbol (scoped-without-source ...@block)))\n            \"}\"]\n         @symbol))\n\n(macro until (condition ...block)\n       '(while (not @condition) ...@block))\n\n(macro match? (regexp string)\n       '(send @string match @regexp))\n\n(macro match-regex? (string regexp-string glim)\n       '(match? (regex @regexp-string @glim) @string))\n\n(macro replace (string regexp-string replacement)\n       '(send @string replace\n              (regex @regexp-string)\n              @replacement))\n\n(macro replace-all (string regexp-string replacement)\n       '(send @string replace (regex @regexp-string 'g) @replacement))\n\n(macro thunk (...body)\n       '(lambda @{ node this args [] }\n       ...@(map-node body\n                 (#(node)\n                   (if (node? node 'arg-placeholder)\n                       '(argument @(replace node.token \"^#\" \"\"))\n                       node)))))\n(alias-macro thunk #>)\n\n(macro keys (obj)\n       '(Object.keys @obj))\n\n(macro delete (...objects)\n       (interleave \"\\n\" (map objects (#(obj)\n                                 (as-statement [\"delete \" (transpile obj)])))))\n\n(macro delmacro (...macro-names)\n       (each (macro-name) macro-names\n             (delete (get sibilant.macros.namespace (output-formatter (transpile macro-name)))))\n       null)\n(alias-macro delmacro delete-macro)\n\n\n(macro rename-macro (current-macro-name desired-macro-name)\n       (^alias-macro current-macro-name desired-macro-name)\n       (^delmacro current-macro-name)\n       null)\n\n(macro arguments ()\n       [\"(Array.prototype.slice.apply(arguments))\"])\n\n(macro argument (n)\n       '(get arguments @n))\n\n(macro scoped (...body)\n       '(call (lambda @{node this args []} ...@body)))\n\n(macro scoped-without-source (...body)\n       [\"(function() {\" (indent '(do ...@body)) \"})()\"])\n       \n\n(macro each-key (as obj ...body)\n       '(scoped-without-source\n         @[\"for (var \" (transpile as) \" in \" (transpile obj) \") \"\n            (as-statement '(scoped-without-source ...@body))\n            ]\n         @obj))\n\n(macro switch (obj ...cases)\n       [\"(function() {\"\n         (indent [\"switch(\" (transpile obj) \") {\"\n                   (map cases (#(case-def)\n                                (var case-name-node (first case-def.contents)\n                                     case-labels (if (or (node? case-name-node 'expression)\n                                                         (node? case-name-node 'bracket))\n                                                     case-name-node.contents\n                                                     [case-name-node])\n                                     case-string (interleave \"\\n\" (map case-labels (#(c)\n                                                                                     (if (= 'default c.token)\n                                                                                         \"default:\"\n                                                                                         [\"case \" (transpile c) \":\"])))))\n                                [\"\\n\" case-string (indent '(do ...@(rest case-def.contents)))]))\n                   \"}\"])\n         \"})()\"])\n\n(macro if (...args)\n       [\"(function() {\"\n        (indent\n         (interleave \" else \"\n               (bulk-map args\n                         (#(cond val)\n                           (if (!= (typeof val) 'undefined)\n                                 [\"if (\" (transpile cond) \") {\"\n                                   (indent '(do @val))\n                                   \"}\"]\n                                 [\"{\" (indent '(do @cond)) \"}\"])))))\n        \"})()\"])\n\n(macro chain (object ...calls)\n       (if (= 0 calls.length) (transpile object)\n           (= 1 calls.length) '(send @object ...@(get (first calls) 'contents))\n           (do\n            (var lines (map calls (#(call index)\n                                    [\".\" (transpile (first call.contents))\n                                         \"(\" (interleave \", \" (map (rest call.contents) transpile)) \")\"])))\n\n            [ (transpile object)\n              (first lines)\n              \"\\n  \"\n              (recurse-indent\n               (interleave \"\\n\" (rest lines)))])))\n\n(macro chainable (...names)\n       (each (name) names\n             '(macro @name (target ...calls)\n                     '(chain (call @name @target) ...@calls))))\n\n(macro let (args body)\n       [\"let (\"\n         (interleave \", \" (bulk-map args\n                   (#(k v)\n                     [ (transpile k) \" = \" (transpile v) ])))\n         (if (undefined? body) \");\"\n             [\") {\" (indent (transpile body)) \"}\"])])\n\n(macro instance-of? (item type)\n       [\"(\" (transpile item) \" instanceof \" (transpile type) \")\"])\n\n(macro slice (list begin end)\n       [\"Array.prototype.slice.call(\" (transpile list)\n                                      \", \" (or (transpile begin) 0)\n                                      (if (defined? end) (\", \" (transpile end) \")\") \")\")])\n\n(macro includes? (list item)\n       '(!= -1 (send @list index-of @item)))\n\n\n(macro excludes? (list item)\n       '(= -1 (send @list index-of @item)))\n\n(macro exists? (thing)\n       '(and (defined? @thing) (!= @thing null)))\n\n(macro with-state (k v ...body)\n       (var before (^state k))\n       (^state k v)\n       (var return-value\n            (interleave \"\\n\" (map body transpile)))\n       (^state k before)\n       return-value)\n\n(macro join (glue arr)\n       (if (and (defined? glue) (undefined? arr))\n           (assign arr glue glue undefined))\n       [\"(\" (transpile arr) \").join(\" (if glue (transpile glue) \"\\\"\\\"\") \")\"])\n\n(macro var (...pairs)\n       (var destructured [])\n       (bulk-map pairs (#(lhs rhs)\n                         (switch lhs.type\n                                 ('bracket\n                                  (var symbol (^symbol))\n                                  (destructured.push [symbol (transpile rhs)])\n                                  (each (item index) lhs.contents\n                                        (destructured.push [(transpile item) '(get @symbol @index)]))\n                                  (destructured.push [symbol 'undefined]))\n                                 ('brace\n                                  (var symbol (^symbol))\n                                  (destructured.push [symbol (transpile rhs)])\n                                  (each (item index) lhs.contents\n                                        (var tr-item (transpile item))\n                                        (destructured.push [tr-item '(get @symbol @[\"\\\"\" tr-item \"\\\"\"])]))\n                                  (destructured.push [symbol 'undefined]))\n\n                                 (default\n                                  (destructured.push [(transpile lhs)\n                                                       (if rhs (transpile rhs) 'undefined)])))))\n\n       (as-statement\n        [\"var \" (interleave \",\\n    \"\n           (map destructured\n                (#(pair)\n                  [(first pair) \" = \" (second pair)]\n                  )))]))\n\n(macro default (...pairs)\n       (interleave \"\\n\" (bulk-map pairs (#(name value)\n                                  '(assign @name (ternary (defined? @name) @name @value))))))\n\n\n(macro import-namespace (namespace)\n       (var namespace-as-string (output-formatter (transpile namespace)))\n       (unless (sibilant.macros.namespaces.has-own-property namespace-as-string)\n               (set sibilant.macros.namespaces namespace-as-string {}))\n       (sibilant.macros.search-path.unshift namespace-as-string)\n       undefined)\n\n(macro namespace (namespace)\n       `(import-namespace @namespace)\n       (set sibilant.macros 'namespace (get sibilant.macros.namespaces (output-formatter (transpile namespace))))\n       undefined)\n\n(macro has-key? (object key)\n       `(send @object has-own-property @key))\n\n(macro get (obj ...keys)\n       [(transpile obj)\n         (map keys (#(key)\n                     (var transpiled (transpile key)\n                          output (output-formatter transpiled))\n\n                     (if (match-regex? output \"^\\\"[a-zA-Z0-9]+\\\"$\")\n                         [\".\" (replace-all output \"\\\"\" \"\") ]\n                         [\"[\" transpiled \"]\"])))])\n\n(macro set (arr ...kv-pairs)\n       (interleave \"\\n\" (bulk-map kv-pairs (#(k v) `(assign (get @arr @k) @v)))))\n\n\n(macro pipe (...calls)\n       (inject undefined calls\n         (#(value item)\n           (var cloned (clone item))\n           (if (undefined? value)\n               cloned\n               (merge-into cloned\n                           { contents [ (first cloned.contents)\n                                        value\n                                        ...(rest cloned.contents) ] })))))\n","(def bulk-map (arr fn)\n  (var index 0\n          group-size fn.length\n          ret-arr [])\n\n  (while (< index arr.length)\n    (send ret-arr push\n          (apply fn (send arr slice\n                          index (+ index group-size))))\n    (incr-by index group-size))\n  ret-arr)\n\n(def inject (start items fn)\n  (var value start)\n  (when (list? items)\n    (each (item index) items\n      (assign value (fn value item index))))\n  value)\n\n(def map (items fn)\n  (inject [] items\n          (#(collector item index)\n            (send collector push (fn item index))\n            collector)))\n\n(def select (items fn)\n  (inject [] items\n          (#(collector item index)\n            (when (fn item index)\n              (send collector push item))\n            collector)))\n\n(def detect (items fn)\n  (var return-item undefined\n          index 0\n          items (or items []))\n\n  (until (or (= items.length index) return-item)\n         (when (fn (get items index) index)\n           (assign return-item (get items index)))\n         (incr index))\n\n  return-item)\n\n(def all? (items fn)\n     (undefined? (detect items (#(item index) (not (fn item index))))))\n\n(def none? (items fn)\n     (undefined? (detect items fn)))\n\n(def any? (items fn)\n     (defined? (detect items fn)))\n\n(def reject (items fn)\n  (var args [ items fn ])\n  (select items (thunk (not (apply fn arguments)))))\n\n(def compact (arr)\n     (select arr (#(item)\n                   (and\n                    (!= null item)\n                    (!= false item)\n                    (defined? item)))))\n\n(def interleave (glue arr)\n     (if (list? glue) (inject [] arr\n             (#(collector item index)\n               (collector.concat [item (get glue index)])))\n\n         \n     (inject [(first arr)] (rest arr)\n             (#(collector item index) (collector.concat [glue item])))))\n\n\n(def flatten (...items)\n  (inject [] items\n          (#(collector item)\n            (collector.concat\n             (if (list? item)\n               (apply flatten item)\n               item)))))\n\n\n(def recurse-map (item fn)\n     (if (list? item) (map item (#(subitem) (recurse-map subitem fn)))\n         (fn item)))\n\n(def pluck (items attribute)\n     (map items (#(item) (get item attribute))))\n\n(def merge-into (into from)\n     (each (key) (keys from) (set into key (get from key)))\n     into)\n\n(def clone (object)\n     (inject {} (keys object)\n             (#(collector key)\n               (set collector key (get object key))\n               collector)))\n\n(def map-values (object fn)\n     (inject {} (keys object)\n             (#(collector key index)\n               (set collector key (fn (get object key) key))\n               collector)))\n\n(def merge-with (into from)\n     (merge-into (clone into) from))\n","(def log! (...args)\n     (send (inspect! ..args ) for-each (#> (console.log #0))))\n\n(def inspect! (...args)\n     (args.map (#> (util.inspect #0 { colors false depth 3}))))\n\n(def color (code items depth)\n     (concat code (join \"\" items) \"\\033[0m\"))\n\n(def black (...args) (color \"\\033[0;30m\" args))\n(def red (...args) (color \"\\033[0;31m\" args))\n(def green (...args) (color \"\\033[0;32m\" args))\n(def brown (...args) (color \"\\033[0;33m\" args))\n(def blue (...args) (color \"\\033[0;34m\" args))\n(def purple (...args) (color \"\\033[0;35m\" args))\n(def cyan (...args) (color \"\\033[0;36m\" args))\n(def gray (...args) (color \"\\033[0;37m\" args))\n(def bold-gray (...args) (color \"\\033[1;30m\" args))\n(def bold-red (...args) (color \"\\033[1;31m\" args))\n(def bold-green (...args) (color \"\\033[1;32m\" args))\n(def yellow (...args) (color \"\\033[1;33m\" args))\n(def bold-blue (...args) (color \"\\033[1;34m\" args))\n(def bold-purple (...args) (color \"\\033[1;35m\" args))\n(def bold-cyan (...args) (color \"\\033[1;36m\" args))\n(def white (...args) (color \"\\033[1;37m\" args))\n","(include \"./colors.sibilant\")\n\n(def sibilant.pretty-print (node color)\n     (when (undefined? color) (assign color true))\n\n     (real-newlines (if (node? node) (do\n                       (var pretty-printer (or (get sibilant.pretty-print node.type)\n                                               sibilant.pretty-print.default))\n                       (pretty-printer node color))\n         (list? node)\n           (concat (if color (black \"[\") \"\")\n                   (join (if color (black \",\") \"\") (map node prettify))\n                   (if color (black \"]\") \"\"))\n\n           color (red (util.inspect node))\n           (real-newlines (util.inspect node)))))\n\n\n(def sibilant.pretty-print.default (node color)\n     (real-newlines (sibilant.pretty-print.colorize node color\n      (concat\n       (if (and node.modifiers node.modifiers.length)\n           (join \"\" (map node.modifiers (#(n) (sibilant.pretty-print n color)))) \"\")\n       node.token\n       (if (and node.contents node.contents.length)\n           (join \" \" (map node.contents (#(n) (sibilant.pretty-print n color)))) \"\")\n       (or (and node.closed (get acceptable-pairs node.token)) \"\")))))\n\n(def sibilant.pretty-print.root (node color)\n     (join \"\\n\" (map node.contents (#(n) (sibilant.pretty-print n color)))))\n\n(def sibilant.pretty-print.output (node color)\n     (concat (if color (black \"{\") \"\")\n             (if (list? node.contents)\n                 (join (if color (black \",\") \"\")\n                       (map node.contents (#(c) (sibilant.pretty-print.colorize node color (prettify c)))))\n                 (sibilant.pretty-print.colorize node color node.contents))\n             (if color (black \"}\") \"\")))\n\n(def real-newlines (node)\n     (chain node (split \"\\\\n\") (join \"\\n\")))\n\n\n(def sibilant.pretty-print.colorize (node color string)\n     (if (not color) string\n         (= node.hint 'macro) (yellow string)\n         (= node.type 'output) (purple string)\n         (green string)))\n\n(var prettify sibilant.pretty-print)","(def output-formatter (node)\n     (if (list? node) (join \"\" (map node output-formatter))\n         (and (node? node) (= node.type 'output))\n           (output-formatter node.contents)\n         (or (string? node) (number? node)) node\n         (not (exists? node)) \"\"\n         (node? node) (do\n                       (console.log \"WE SHOULD NOT BE HERE\")\n                       (output-formatter (transpile node)))))\n\n(set sibilant 'output-formatter output-formatter)","(var parser {})\n(set sibilant 'parser parser)\n(set parser 'tokens\n     { 'regex              \"(\\\\/(\\\\\\\\\\\\\\/|[^\\\\/\\\\n])+\\\\/[glim]*)\"\n       'comment            \"(;.*)\"\n       'string             \"(\\\"(([^\\\"]|(\\\\\\\\\\\"))*[^\\\\\\\\])?\\\")\"\n       'number             \"(-?[0-9][0-9.,]*)\"\n       'literal            \"(-?[*.$a-zA-Z_][/*.a-zA-Z0-9-_]*(\\\\?|!)?)\"\n       'special            \"([&'])\"\n       'at                 \"@\"\n       'tick               \"[`']\"\n       'hat                \"(\\\\^)\"\n       'dots               \"(\\\\.+)\"\n       'arg-placeholder    \"(#[0-9]+)\"\n       'other-char         \"([#><=!\\\\+\\\\/\\\\*-]+)\"\n       'open-expression    \"(\\\\(|\\\\{|\\\\[)\"\n       'close-expression    \"(\\\\)|\\\\}|\\\\])\"\n       'newline \"\\\\n\"\n       'whitespace \"\\\\s\"\n       'ignored \".\" })\n\n(set parser 'token-precedence  [ 'regex\n                                 'comment\n                                 'string\n                                 'number\n                                 'dots\n                                 'tick\n                                 'hat\n                                 'at\n                                 'special\n                                 'literal\n                                 'arg-placeholder\n                                 'other-char\n                                 'open-expression\n                                 'close-expression\n                                 'newline\n                                 'whitespace\n                                 'ignored\n                                 ]\n     'ordered-regexes (parser.token-precedence.map\n                       (#(x)\n                         (var r (regex (\"^\" (get parser.tokens x))))\n                         (set r 'name x)\n                         r)))\n\n(var ordered-regexes parser.ordered-regexes)\n\n(set sibilant 'node-cache (or sibilant.node-cache {}))\n(def node-id (node)\n     (incr node-id.last-id))\n(def cache-node (node)\n     (var id (node-id node))\n     (set sibilant.node-cache id node)\n     (merge-into node {node-id id}))\n\n(set node-id 'last-id 0)\n\n(def parser.parse (string context)\n     (var context (or context\n                      { position 0\n                        stack []\n                        line 1\n                        last-newline 0 col 0})\n          match true\n          regex-name null\n          remaining-input string)\n\n     (while match\n            (detect ordered-regexes\n                    (#(r)\n                      (assign match (r.exec remaining-input)\n                              regex-name r.name)\n                      match))\n\n            (when (exists? match)\n                  (var match-string (first match)\n                       length (length match-string))\n                  \n                  (context.stack.push\n                   (cache-node { contents []\n                                 dir sibilant.dir\n                                 file sibilant.file\n                                 token match-string\n                                 type regex-name\n                                 start context.position\n                                 line context.line\n                                 col context.col\n                                 length length }))\n\n                  (if\n                   (= 'newline regex-name)\n                   (do\n                    (incr context.line)\n                    (set context\n                         'col 0\n                         'last-newline context.position))\n\n                   (and (= 'string regex-name)\n                        (includes? match-string \"\\n\"))\n                   (do\n                    (var string-newline-count (- (length (match-string.split \"\\n\")) 1))\n                    (incr-by context.line string-newline-count)\n                    (set context 'col (- length (match-string.last-index-of \"\\n\"))))\n\n                   (incr-by context.col length))\n\n                  (incr-by context.position length)\n                  (assign remaining-input (if remaining-input.length\n                                              (remaining-input.slice length)\n                                              \"\"))))\n     context.stack)\n\n(var parse parser.parse)\n","(var restructurers {}\n     acceptable-pairs { \"(\" \")\" \"[\" \"]\" \"{\" \"}\" }\n     bracket-types { \"(\" 'expression\n                     \"[\" 'bracket\n                     \"{\" 'brace })\n\n(def restructure (input)\n     (var output { type 'root\n                   contents []\n                   file sibilant.file\n                   col 0\n                   line 1 }\n          context { parse-stack [output]\n                    output output\n                    input input\n                    specials 0 })\n\n     (inject context input\n             (#(context token index)\n               (var restructurer (or (get restructurers token.type) restructurers.default))\n               (restructurer token context index)))\n\n     (unless (= 1 (length context.parse-stack))\n             (throw (\"unclosed node: \" (prettify (first context.parse-stack) false))))\n\n     output)\n\n(set sibilant 'restructure restructure)\n\n(def restructurers.open-expression (token context)\n     (var first (first context.parse-stack))\n     (set token\n          'contents []\n          'type (get bracket-types token.token)\n          'parent first)\n     (accept-specials token context)\n     (send first.contents push token)\n     (context.parse-stack.unshift token)\n     context)\n\n\n(def restructurers.close-expression (node context index)\n     (var first (first context.parse-stack))\n\n     (when (node? first 'root)\n           (throw (\"unexpected \" node.token \" on \"node.file\":\"node.line\":\"node.col)))\n     (when (!= (get acceptable-pairs first.token) node.token)\n           (throw (\"trying to close \" (yellow (sibilant.pretty-print first))\n                                      \"\\n   on \"first.file\":\"first.line\":\"first.col\n                                      \"\\n   with \"(sibilant.pretty-print node)\n                                      \"\\n   on \"node.file\":\"node.line\":\"node.col\n                                      \"\\n\")))\n\n     (set first 'end node.end 'closed true)\n     (context.parse-stack.shift)\n     (close-specials first context)\n     (when (zero? context.parse-stack.length)\n           (throw (\"unbalanced parens:\\n\"\n                   (call inspect parse-stack))))\n     context)\n\n(def open-special (node context)\n     (incr context.specials)\n\n     (var first (first context.parse-stack))\n     (set node\n          'contents []\n          'parent first)\n\n     (first.contents.push node)\n     (context.parse-stack.unshift node)\n     context)\n\n(def accept-specials (node context)\n     (set node 'specials (get context 'specials))\n     (set context 'specials 0)\n     context)\n\n(def close-specials (node context)\n     (when (> node.specials 0)\n           (decr node.specials)\n           (context.parse-stack.shift)\n           (close-specials node context))\n     context)\n\n(def restructurers.hat (node context index) (open-special node context))\n(def restructurers.dots (node context index) (open-special node context))\n(def restructurers.tick (node context index) (open-special node context))\n(def restructurers.at (node context index) (open-special node context))\n\n(def restructurers.whitespace (token context index) context)\n(def restructurers.newline (token context index) context)\n(def restructurers.comment (token context index) context)\n(def restructurers.ignored (token context index) context)\n\n(def restructurers.default (token context index)\n     (accept-specials token context)\n     (send (get (first context.parse-stack) 'contents) push token)\n     (close-specials token context))\n","(var core-namespace {}\n     macro-namespaces { core core-namespace })\n(set sibilant\n     'state {}\n     'macros\n     { 'namespaces macro-namespaces\n       'default-search-path ['core]\n       'search-path ['core]\n       'namespace core-namespace })\n\n(var namespace sibilant.macros.namespace macros sibilant.macros.namespace)\n\n(def has-key? (object key)\n       (send object has-own-property key))\n\n(def sibilant.resolve-macro (macro-name)\n     (if (and (includes? macro-name \"/\") (not (includes? macro-name \"\\n\")))\n         (do (var path-components (macro-name.split \"/\")\n                  macro (and (has-key? sibilant.macros.namespaces (first path-components))\n                             (get sibilant.macros.namespaces (first path-components)\n                                  (join \"/\" (rest path-components)))))\n             (if macro macro\n                 (error (\"called namespaced macro \" macro-name\n                         \" but could not find namespace \" (first path-components)\n                         \". you might need to include the file that defines it first.\" ))))\n         (do\n          (var namespace (detect sibilant.macros.search-path\n                            (#(namespace)\n                              (has-key? (get sibilant.macros.namespaces namespace)\n                                        macro-name))))\n          (when namespace (get sibilant.macros.namespaces namespace macro-name)))))\n\n(def sibilant.with-default-search-path (fn)\n     (var search-path-before sibilant.macros.search-path)\n     (set sibilant.macros 'search-path sibilant.macros.default-search-path)\n     (var return-value (fn))\n     (set sibilant.macros 'search-path search-path-before)\n     return-value)\n     \n          ","(def recurse-indent (...args)\n     (map args\n          (#(arg)\n            (if (node? arg) (do (set arg 'contents (apply recurse-indent (compact (flatten arg.contents)))) arg)\n                (list? arg) (apply recurse-indent arg)\n                (number? arg) (arg.to-string)\n                (string? arg)\n                (chain arg\n                       (replace (regex \"\\\\n\" 'g) \"\\n  \")\n                       (replace (regex \"\\\\n\\\\s+\\\\n\" 'g) \"\\n\\n\"))\n\n                 arg))))\n\n(def indent (...args)\n     [\"\\n  \" (recurse-indent args) \"\\n\"])\n\n\n(def escape-regex (string)\n     (string.replace (regex \"[\\\\-\\\\[\\\\]\\\\/\\\\{\\\\}\\\\(\\\\)\\\\*\\\\+\\\\?\\\\.\\\\\\\\\\^\\\\$\\\\|]\" 'g) \"\\\\$&\"))\n\n(def qescape (content)\n     (if (not (exists? content)) \"\"\n         (string? content) (chain content\n                                  (replace (regex \"\\\"\" 'g) \"\\\\\\\"\")\n                                  (replace (regex \"\\\\n\" 'g) \"\\\\n\\\" +\\n\\\"\"))\n         content))\n\n(def log-pretty (label arg node)\n     (console.log (concat label \" = \" (prettify arg)))\n     arg)\n\n(var pretty-log log-pretty)\n\n(def map-node (node fn)\n     (if (node? node)\n         (do\n          (var mapped-node (fn node))\n          (when (node? mapped-node)\n                (set mapped-node 'contents (map-node mapped-node.contents fn)))\n\n          mapped-node)\n\n         (list? node) (map node (#> (map-node #0 fn)))\n         (fn node)))\n\n(def each-node (node fn)\n     (if (node? node) (when (fn node) (each-node node.contents fn))\n         (list? node) (each (c) node (each-node c fn))\n         (fn node)))\n\n(def statement? (transpiled)\n     (if (node? transpiled) (statement? transpiled.contents)\n         (list? transpiled) (statement? (last transpiled))\n         (string? transpiled) (= \";\" (last transpiled))\n         false))\n\n(def as-statement (node)\n     (var transpiled (transpile node))\n\n     (if (empty-node? transpiled) undefined\n         (statement? transpiled) transpiled\n         [ transpiled \";\" ]))\n\n(def unquote? (node) (node? node 'at))\n\n(def find-unquotes (node)\n     (var unquotes {})\n     (each-node node (#(n)\n                       (when (unquote? n)\n                             (set unquotes n.node-id (transpile n)))\n                       (not (node? n 'tick))))\n     unquotes)\n\n(def splice-dots (node)\n     (when (and node (list? node.contents))\n           (var contents [])\n           (each (content) node.contents\n                 (if (and (node? content 'dots)\n                          (list? content.contents)\n                          (= content.contents.length 1)\n                          (list? (first content.contents)))\n                      (contents.push.apply contents (first content.contents))\n                      (contents.push content)))\n\n           (set node 'contents contents))\n     node)\n\n\n(def alternating-keys-and-values (hash)\n     (flatten (map (keys hash)\n                   (#(key) [key, (get hash key)]))))\n\n\n(def map-node-for-quote-expansion (node expansions)\n     (if (node? node)\n         (do\n          (var mapped-node (if (expansions.has-own-property node.node-id) (get expansions node.node-id) (clone node)))\n          (when (node? mapped-node)\n                (set mapped-node 'contents (map-node-for-quote-expansion mapped-node.contents expansions)))\n\n          (assign mapped-node (splice-dots mapped-node))\n          mapped-node)\n\n         (list? node)\n           (map node (#> (map-node-for-quote-expansion #0 expansions)))\n\n         node))\n\n","(def sibilant.macros.namespaces.core.return (token)\n     (when sibilant.debug (console.log \"returning \" (prettify token)))\n     (var default-return (as-statement [\"return \" (transpile token)]))\n     (if (and token token.contents token.contents.length)\n         (switch (get (first token.contents) 'token)\n                 (('return 'throw 'do) (transpile token))\n                 ('delete\n                  (var delete-macro (get macros 'delete))\n                  (if (< token.contents.length 3) default-return\n                      [ (as-statement (apply delete-macro (token.contents.slice 1 -1)))\n                        \"\\nreturn \"\n                        (as-statement (call delete-macro (last token.contents)))]))\n                 ('assign\n                  (if (< token.contents.length 4) default-return\n                      [ (apply sibilant.macros.namespaces.core.assign\n                               (token.contents.slice 1 (- token.contents.length 2)))\n                        \"\\nreturn \"\n                        (apply sibilant.macros.namespaces.core.assign (token.contents.slice -2))]))\n                 ('var\n                  [ (transpile token) \"\\nreturn \" (transpile (if (even? token.contents.length)\n                                                                 (last token.contents)\n                                                                 (first (token.contents.slice -2))))])\n                 ('set\n                  (if (< token.contents.length 5) default-return\n                      (do\n                       (var obj (second token.contents)\n                            non-return-part (token.contents.slice 2 (- token.contents.length 2))\n                            return-part (token.contents.slice -2))\n                       (non-return-part.unshift obj)\n                       (return-part.unshift obj)\n                       [ (sibilant.macros.namespaces.core.set ...non-return-part)\n                         \"\\nreturn \"\n                         (sibilant.macros.namespaces.core.set ...return-part)])))\n                 (default default-return))\n         default-return))\n\n\n(def sibilant.macros.namespaces.core.do (...body)\n     (if (= 1 body.length) (sibilant.macros.namespaces.core.return (first body))\n         body.length [ (interleave \"\\n\" (map (body.slice 0 -1) (#> (as-statement #0))))\n                       \"\\n\"\n                       (sibilant.macros.namespaces.core.return (last body)) ]\n         \"\"))\n\n(def sibilant.macros.namespaces.core.empty-list () 'null)\n\n(def sibilant.macros.namespaces.core.def (fn-name args ...body)\n     (if (undefined? fn-name) (error \"invalid function definition. missing name.\")\n         (undefined? args) (error \"invalid function definition. missing arguments or return value.\"))\n\n     (var fn-name-tr (transpile fn-name) this-node this)\n\n     (as-statement [ (if (match? (regex \"\\\\.\") (output-formatter fn-name-tr)) \"\" \"var \")\n                     fn-name-tr \" = \"\n                     (sibilant.macros.namespaces.core.lambda { name fn-name args args node this-node } ...body )\n                     ] ))\n\n(def sibilant.macros.namespaces.core.macro (name args ...body)\n     (var name-tr (output-formatter (transpile name))\n          options { name name args args node this}\n          js (output-formatter (sibilant.macros.namespaces.core.lambda options ...body)))\n\n     (when sibilant.debug (console.log js))\n     \n     (try (set sibilant.macros.namespace name-tr (eval js))\n          (error (\"error in parsing macro \"\n                  (sibilant.pretty-print name) \":\\n\" js)))\n\n     undefined)\n\n(def sibilant.macros.namespaces.core.meta (...body)\n     (var js (output-formatter (sibilant.macros.namespaces.core.scoped ...body)))\n     (when sibilant.debug (console.log js))\n     (output-formatter (eval js)))\n\n\n(def sibilant.macros.namespaces.core.concat (...args)\n     [\"(\" (interleave \" + \" (map args transpile)) \")\"])\n\n(def sibilant.macros.namespaces.core.reverse (arr)\n     (var reversed [])\n     (each (item) arr (reversed.unshift item))\n     reversed)\n\n(var reverse sibilant.macros.namespaces.core.reverse)\n\n(def sibilant.macros.namespaces.core.lambda (args-or-options ...body)\n     (when sibilant.debug\n           (console.log args-or-options))\n     (var args (or (get args-or-options 'args) args-or-options)\n          body (or (get args-or-options 'body) body)\n          args (if (node? args 'expression) args.contents\n                   (and (node? args) (empty? body)) (do (assign body [ args ]) [])\n                   args)\n          name (when args-or-options.name\n                     (chain (output-formatter (transpile args-or-options.name))\n                            (replace (regex \"\\\\W+\" 'g) \"$\")\n                            (concat \"$\")))\n          rest (detect args\n                       (#> (node? #0 'dots))))\n\n     (var this-node this\n          node (detect\n                [ args-or-options.node this-node args-or-options.name args (first body) ]\n                (#(n) (and (node? n) (get n 'file)))))\n     [\"(function\" (if name (\" \" name) \"\") \"(\"\n       (interleave \", \" (map args transpile)) \") {\"\n       (if (or args-or-options.name node)\n           (indent [\"/*\"\n                     (if args-or-options.name (\" \" (sibilant.pretty-print args-or-options.name false)) \"\")\n                     (if node (\" \" node.file \":\" node.line \":\" node.col) \"\")\n                     \" */\"]) \"\")\n       (when (exists? rest)\n             (indent (as-statement [\"var \" (transpile rest)\n                       \" = Array.prototype.slice.call(arguments, \"\n                       (- args.length 1) \")\"])))\n\n       (indent (apply sibilant.macros.namespaces.core.do body))\n       \"})\"])\n\n(set sibilant.macros.namespaces.core \"#\" sibilant.macros.namespaces.core.lambda)\n\n(def sibilant.macros.namespaces.core.quoted-hash (...pairs)\n     (var cached-quote-value sibilant.macros.namespaces.core.hash.quote-keys)\n     (set sibilant.macros.namespaces.core.hash 'quote-keys true)\n     (var value (sibilant.macros.namespaces.core.hash ...pairs))\n     (set sibilant.macros.namespaces.core.hash 'quote-keys cached-quote-value)\n     value)\n\n(def sibilant.macros.namespaces.core.hash (...pairs)\n     (when (odd? pairs.length)\n           (error (\"odd number of key-value pairs in hash: \"\n                   (call inspect pairs))))\n\n     (var quote-keys sibilant.macros.namespaces.core.hash.quote-keys\n          pair-strings (bulk-map pairs (#(key value)\n                                         [ (if (and quote-keys (not (node? key 'string)))\n                                               [\"\\\"\" (transpile key) \"\\\"\"]\n                                               (transpile key))\n                                           \": \"\n                                           (transpile value)])))\n     (if (>= 1 pair-strings.length)\n         [\"{ \" (interleave \", \" pair-strings) \" }\"]\n         [\"{\" (indent (interleave \",\\n\" pair-strings)) \"}\"]))\n\n\n(def sibilant.macros.namespaces.core.quote (content)\n     (if (string? content) (\"\\\"\" (qescape content) \"\\\"\")\n         (number? content) (sibilant.macros.namespaces.core.quote (content.to-string))\n         (node? content 'literal) [\"\\\"\" (transpile content) \"\\\"\"]\n         (node? content 'expression)\n         (if (length (keys (find-unquotes content)))\n             (sibilant.macros.namespaces.core.call 'macros.expand-quote.call 'this (sibilant.macros.namespaces.core.quote content.node-id)\n                    (apply sibilant.macros.namespaces.core.quoted-hash (alternating-keys-and-values (find-unquotes content))))\n             [\"\\\"\" (map-node (transpile content) qescape) \"\\\"\"])\n\n         (node? content 'bracket)\n         (if (length (keys (find-unquotes content)))\n             (sibilant.macros.namespaces.core.call 'macros.expand-quote.call 'this (sibilant.macros.namespaces.core.quote content.node-id)\n                    (apply sibilant.macros.namespaces.core.quoted-hash (alternating-keys-and-values (find-unquotes content))))\n             (sibilant.macros.namespaces.core.list ...(map content.contents sibilant.macros.namespaces.core.quote)))\n\n         (node? content 'brace)\n         (if (length (keys (find-unquotes content)))\n             (sibilant.macros.namespaces.core.call 'macros.expand-quote.call 'this (sibilant.macros.namespaces.core.quote content.node-id)\n                    (apply sibilant.macros.namespaces.core.quoted-hash (alternating-keys-and-values (find-unquotes content))))\n             (sibilant.macros.namespaces.core.hash ...(map content.contents sibilant.macros.namespaces.core.quote)))\n\n         (do\n          (console.log (\"unknown content\" (prettify content)))\n          content)))\n\n(def sibilant.macros.namespaces.core.debug (val)\n     (set sibilant 'debug (eval (output-formatter (transpile val)))) null)\n\n(def sibilant.macros.namespaces.core.expand-quote (node-id expansions)\n     (var expanded-nodes\n          (map-node-for-quote-expansion (get sibilant.node-cache node-id) expansions))\n\n     (transpile expanded-nodes))\n\n\n(def sibilant.macros.namespaces.core.list (...args)\n       (var arg-segments [])\n       (if (empty? args) \"[]\"\n           (do\n            (def simple-list (args)\n                 [\"[ \" (interleave \", \" (map args (#(arg) arg.transpiled))) \" ]\"])\n\n            (args.for-each (#(arg)\n                  (if (node? arg 'dots) (arg-segments.push {transpiled (transpile arg)})\n                   (list? (last arg-segments)) (send (last arg-segments) push {transpiled (transpile arg)})\n                   (arg-segments.push [{transpiled (transpile arg)}]))))\n\n            (assign arg-segments (map arg-segments\n                                      (#(segment)\n                                        (if (list? segment)\n                                            (simple-list segment)\n                                            segment.transpiled))))\n\n            (if (= 1 (length arg-segments))\n                (first arg-segments)\n                [(first arg-segments) \".concat(\" (interleave \", \" (rest arg-segments))\")\"]))))\n\n\n(def sibilant.macros.namespaces.core.call (fn-name ...args)\n     (if (any? args (#> (node? #0 'dots)))\n           (macros.apply fn-name (macros.list ...args))\n           [ (transpile fn-name)\n                   \"(\" (interleave \", \" (map args transpile)) \")\" ]))\n\n(def sibilant.macros.namespaces.core.dots (...contents)\n     (transpile contents))\n\n","(def node? (thing type)\n     (and\n      (exists? thing)\n      (= 'object (typeof thing))\n      (string? thing.type)\n      (or (undefined? type) (= thing.type type))\n      (thing.has-own-property 'contents)))\n\n(def empty-node? (item)\n     (if (node? item) (empty-node? item.contents)\n         (list? item) (all? item empty-node?)\n         (string? item) (item.match (regex \"^\\\\s*$\"))\n         (or (= null item)\n             (undefined? item)\n             (= false item))))\n\n(def compact-node (item)\n     (if (node? item) (do\n                       (set item 'contents (compact-node item.contents))\n                       (if (and item.contents item.contents.length) item null))\n         (list? item) (do\n                       (var compacted (compact (map item compact-node)))\n                       (if (and compacted compacted.length) compacted null))\n         (if (or (= item \"\") (= item false)) null item)))\n\n(def recurse-transpile (node)\n     (if (list? node) (map node recurse-transpile)\n         (and (node? node) (!= 'output node.type)) (transpile node)\n         (and (node? node) (= 'output node.type)) (do\n                                                   (set node 'contents (recurse-transpile node.contents))\n                                                   node)\n         node))\n\n(def transpile (node preprocessor)\n     (if\n      (string? node)\n      (assign node { type 'js token node contents []})\n\n      (number? node)\n      (assign node { type 'number token (node.to-string) contents []}))\n     \n     (if (list? node) node\n         (exists? node) (do\n                         (var transpiler (or (get transpile node.type) transpile.default))\n                         (var result (transpiler node))\n                         (var result-node (recurse-transpile (if (node? result) result\n                                              { contents result type 'output })))\n                         (set result-node\n                              'contents (compact (flatten result-node.contents))\n                              'source node)\n\n                         (when sibilant.debug\n                               (console.log (prettify node)\n                                            (red \"->\")\n                                            (prettify result-node)))\n\n                         (set node 'transpiled result-node)\n\n                         \n                         (if (empty-node? result-node) undefined\n                             result-node))))\n\n\n(set sibilant 'transpile transpile)\n\n(var reader-macros {})\n\n(def transpile.hat (node)\n     (var output (transpile (first node.contents)))\n     (set output 'contents [\"sibilant.macros.namespace[\\\"\" (first output.contents) \"\\\"]\"])\n     output)\n\n(def transpile.tick (node)\n     (sibilant.macros.namespaces.core.quote.apply node node.contents))\n\n(def transpile.at (node)\n     (transpile (first node.contents)))\n\n(def transpile.dots (node)\n     (sibilant.macros.namespaces.core.dots.apply node node.contents))\n\n(def transpile.default (node)\n     node.token)\n\n(def transpile.output (node)\n     node)\n\n(def transpile.number (node)\n     (send (parse-float (node.token.replace (regex \",\" 'g) \"\")) to-string))\n\n(def transpile.root (node)\n     (if (= 1 node.contents.length)\n         (transpile (first node.contents))\n         (interleave \"\\n\" (compact (map node.contents as-statement)))))\n\n(def transpile.expression (node preprocessor)\n     (if node.contents.length\n         (do\n          (var head (first node.contents)\n               args node.contents\n               macro (sibilant.resolve-macro 'call))\n\n          (if (node? head 'string)\n              (assign macro (sibilant.resolve-macro 'concat))\n\n              (node? head 'dots)\n              (assign macro (sibilant.resolve-macro 'send)\n                      args [ (second node.contents) (first head.contents) ...(slice node.contents 2) ])\n\n              (or (node? head 'literal) (node? head 'other-char))\n              (do\n               (var resolved-macro (sibilant.resolve-macro (output-formatter (transpile head))))\n               (when resolved-macro\n                     (set head 'hint 'macro)\n                     (assign macro resolved-macro\n                             args (rest node.contents)))))\n\n          (macro.apply node args))\n\n         \"null\"))\n\n(def transpile.bracket (node)\n     (apply sibilant.macros.namespaces.core.list node.contents))\n\n(def transpile.brace (node) (apply sibilant.macros.namespaces.core.hash node.contents))\n\n(def transpile.literal (node)\n     (var string node.token)\n     (inject (chain string\n                    (replace (regex \"\\\\*\" 'g) \"_\")\n                    (replace (regex \"\\\\?$\") \"__QUERY\")\n                    (replace (regex \"!$\") \"__BANG\"))\n             (string.match (regex \"-(.)\" 'g))\n             (#(return-string match)\n               (return-string.replace match\n                                      (send (second match) to-upper-case)))))\n\n(def transpile.string (node)\n     (chain node.token (split \"\\n\")\n            (join \"\\\\n\\\" +\\n\\\"\")))\n\n(def transpile.comment (node) null)\n\n","(def sibilize (input)\n     (sibilant.initialize)\n     (output-formatter (transpile (restructure (parse input)))))\n\n(def sourcemap (input)\n     (sibilant.initialize)\n     (sourcemapper (transpile (restructure (parse input)))))\n\n(set sibilant 'sibilize sibilize)\n\n(def sibilant.version ()\n     (get (sibilant.package-info) 'version))\n\n(def sibilant.strip-shebang (data)\n     (data.replace (regex \"^#!.*\\\\n\") \"\\n\"))\n\n(set sibilant 'file 'eval.sibilant)\n\n(def with-dir-and-file (dir file fn)\n     (var before { dir sibilant.dir\n                   file sibilant.file })\n     (set sibilant\n          'dir  dir\n          'file file)\n\n     (var retval (fn))\n\n     (set sibilant\n          'dir  before.dir\n          'file before.file)\n\n     retval)\n\n(set sibilant 'source-cache {})\n\n(def sibilant.sibilize-file (file-name)\n     (output-formatter (sibilant.transpile-file file-name)))\n\n(def sibilant.sibilize-json (file-name)\n     (sibilant.initialize)\n     (var before sibilant.macros.namespaces.core.hash.quote-keys)\n     (set sibilant.macros.namespaces.core.hash 'quote-keys true)\n     (var content (sibilant.sibilize-file file-name))\n     (set sibilant.macros.namespaces.core.hash 'quote-keys before)\n     content)\n\n(def sibilant.macros.namespaces.core.include (file)\n     (sibilant.with-default-search-path (#>\n       (sibilant.include (eval (output-formatter (transpile file)))))))\n\n"]}