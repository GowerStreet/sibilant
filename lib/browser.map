{"version":3,"sources":["/Users/jbr/code/sibilant/src/browser.sibilant","/Users/jbr/code/sibilant/include/macros.sibilant","/Users/jbr/code/sibilant/include/functional.sibilant","/Users/jbr/code/sibilant/src/colors.sibilant","/Users/jbr/code/sibilant/src/pretty-printer.sibilant","/Users/jbr/code/sibilant/src/output-formatter.sibilant","/Users/jbr/code/sibilant/src/parser.sibilant","/Users/jbr/code/sibilant/src/restructurer.sibilant","/Users/jbr/code/sibilant/src/macros.sibilant","/Users/jbr/code/sibilant/src/transpiler.sibilant","/Users/jbr/code/sibilant/src/require-and-include.sibilant"],"names":[],"mappings":"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","sourcesContent":["(meta \"//# sourceMappingURL=browser.map\\n\")\n\n(chainable $ $.get)\n\n((#(root)\n   (var sibilant {} exports sibilant)\n   (def error (str) (throw str))\n   (def inspect (item) (if item.to-source (item.to-source) (item.to-string)))\n   (set root 'sibilant sibilant)\n\n   (include \"../include/functional\")\n   (include \"./pretty-printer\")\n   (include \"./output-formatter\")\n   (include \"../include/functional\")\n   (include \"./parser\")\n   (include \"./restructurer\")\n   (include \"./macros\")\n   (include \"./transpiler\")\n   (include \"./require-and-include\")\n\n                                        ;   (var package (include \"../package.son\"))\n   (var package {version \"BROWSER\"})\n   (def sibilant.package-info () package)\n\n   (def sibilant.version-string ()\n        (concat package.name \" browser version \" package.version))\n\n   (set sibilant 'dir \"browser\")\n\n   (when (defined? $)\n         ($ (#>\n             (var sibilant root.sibilant\n                  scripts ($.make-array ($ \"script[type=\\\"application/sibilant\\\"][src]\"\n                                           (map (#> this.src)))))\n\n             (def sibilant.initialize () false)\n\n             \n             (def eval-code (js)\n                  ((new Function js)))\n\n             (def sibilant.include (url)\n                  ($.get url (done (#(data) (eval-code (sibilize data))))))\n\n             (def sibilant.load-macros (fn)\n                  (chain (sibilant.include \"/javascripts/macros.sibilant\")\n                         (done (#> (when (function? fn) (fn sibilant))))))\n\n             (chain (sibilant.load-macros) (then (map scripts sibilant.include))))))) this)\n","(macro join (glue arr)\n       [\"(\" (transpile arr) \").join(\" (transpile glue) \")\"])\n\n(macro set (arr ...kv-pairs)\n       (interleave \"\\n\" (bulk-map kv-pairs\n                                  (#(k v)\n                                    (as-statement [\"(\" (transpile arr) \")\"\n                                                    \"[\" (transpile k) \"] = \" (transpile v) ])))))\n\n(macro get (obj ...keys)\n       [\"(\" (transpile obj) \")\" (map keys (#(key) [\"[\" (transpile key) \"]\"]))])\n\n(macro var (...pairs)\n       (as-statement\n        [\"var \"\n         (interleave \",\\n    \"\n               (bulk-map pairs\n                         (#(name value)\n                           [ (transpile name) \" = \" (transpile value) ])))\n         ]))\n\n(macro alias-macro (current-macro-name desired-macro-name)\n       (var current-macro-name (output-formatter (transpile current-macro-name))\n            desired-macro-name (output-formatter (transpile desired-macro-name)))\n       (set macros desired-macro-name (get macros current-macro-name))\n       null)\n\n(macro send (object method ...args)\n       [(transpile object) \".\" (transpile method)\n               \"(\" (interleave \", \" (map args transpile)) \")\"])\n\n(macro apply (fn arglist)\n       '(send @fn apply this @arglist))\n\n(macro cons (first rest)\n       [\"[ \" (transpile first) \" ].concat(\" (transpile rest) \")\"])\n\n(macro append (list ...additional)\n       '(send @list concat (list ...@additional)))\n\n(macro length (arr)\n       '(get @arr 'length))\n\n(macro ternary (cond if-true if-false)\n       [\"(\" (transpile cond) \") ? \"\n            (transpile if-true) \" : \"\n            (transpile if-false)])\n\n(macro first (arr) '(get @arr 0))\n(macro second (arr) '(get @arr 1))\n(macro third (arr) '(get @arr 2))\n(macro fourth (arr) '(get @arr 3))\n(macro fifth (arr) '(get @arr 4))\n(macro sixth (arr) '(get @arr 5))\n(macro seventh (arr) '(get @arr 6))\n(macro eighth (arr) '(get @arr 7))\n(macro ninth (arr) '(get @arr 8))\n(macro rest (arr)\n       '(send @arr slice 1))\n\n(macro last (arr)\n       '(first (send @arr slice -1)))\n\n\n(macro = (a b) [ (transpile a) \" === \" (transpile b) ])\n(macro +   (...args)\n       [\"(\" (interleave \" + \" (map args transpile)) \")\"])\n(macro -   (...args)\n       [\"(\" (interleave \" - \" (map args transpile)) \")\"])\n(macro *   (...args)\n       [\"(\" (interleave \" * \" (map args transpile)) \")\"])\n(macro /   (...args)\n           [\"(\" (interleave \" / \" (map args transpile)) \")\"])\n(macro or  (...args)\n       [\"(\" (interleave \" || \" (map args transpile)) \")\"])\n\n(macro and (...args)\n       (ternary (= 1 (length args)) (transpile (first args))\n                [\"(\" (interleave \" && \" (map args transpile)) \")\"]))\n\n(macro mod (...args)\n       [\"(\" (interleave \" % \" (map args transpile)) \")\"])\n\n(macro infix-comparator (comparator args)\n       [\"(\" (interleave \" && \"\n                  (map (args.slice 0 -1)\n                       (#(item index)\n                         [ item \" \" comparator \" \" (get args (+ 1 index))])))\n            \")\"])\n\n(macro >  (...args) (macros.infix-comparator  \">\"  (map args transpile)))\n(macro <  (...args) (macros.infix-comparator  \"<\"  (map args transpile)))\n(macro <= (...args) (macros.infix-comparator \"<=\"  (map args transpile)))\n(macro >= (...args) (macros.infix-comparator \">=\"  (map args transpile)))\n(macro != (...args) (macros.infix-comparator \"!==\" (map args transpile)))\n\n(macro pow (base exponent)\n       '(Math.pow @base @exponent))\n\n(macro incr-by (item increment)\n       [ (transpile item) \" += \" (transpile increment)])\n\n(macro incr (item)\n       [\"((\" (transpile item) \")++)\"])\n\n(macro decr (item)\n       [\"((\" (transpile item) \")--)\"])\n\n(macro new (...args)\n       [\"(new \" '(call ...@args) \")\"])\n\n(macro regex (string glim)\n       '(new RegExp @string @(or glim 'undefined)))\n\n(macro timestamp ()\n       [\"\\\"\" (send (new Date) to-string) \"\\\"\"])\n\n(macro comment (...contents)\n       (map contents (#(content)\n                       [\"// \"(recurse-map (transpile content)\n                                    (#(item)\n                                      (ternary item\n                                               (send (output-formatter (transpile item)) replace\n                                                     (regex \"\\n\" 'g) \"\\n// \")\n                                               null)))])))\n\n(macro meta (body)\n       (eval (output-formatter (transpile body))))\n\n(macro zero? (item) '(= @item 0))\n\n(macro empty? (arr)\n       [\"((\" (transpile arr) \").length === 0)\"])\n\n(macro odd? (number)\n       '(= 1 (mod @number 2)))\n\n(macro even? (number)\n       '(= 0 (mod @number 2)))\n\n(macro typeof (thing) [\"typeof \" (transpile thing)])\n\n\n(macro function? (...things)\n       '(and ...@(map things (#(thing) '(= (typeof @thing) 'function)))))\n(macro undefined? (...things)\n       '(and ...@(map things (#(thing) '(= (typeof @thing) 'undefined)))))\n(macro defined? (...things)\n       '(and ...@(map things (#(thing) '(!= (typeof @thing) 'undefined)))))\n(macro number? (...things)\n       '(and ...@(map things (#(thing) '(= (typeof @thing) 'number)))))\n\n(macro if (arg truebody falsebody)\n       [\"(function() {\"\n        (indent [\"if (\" (transpile arg) \") {\"\n                        (indent '(do ...@truebody))\n                        \"} else {\"\n                        (indent '(do ...@falsebody))\n                        \"}\"])\n         \"})()\"])\n\n(macro = (first-thing ...other-things)\n       (var transpiled-first-thing (transpile first-thing))\n       [\"(\" (interleave \" &&\\n \"\n                  (map other-things\n                       (#(thing)\n                         [ transpiled-first-thing\n                                 \" === \"\n                                 (transpile thing) ])))\n            \")\"])\n\n\n(macro string? (thing)\n       [\"typeof(\" (transpile thing) \") === \\\"string\\\"\"])\n\n(macro list? (thing)\n       (var transpiled (transpile thing))\n       [\"((\" transpiled \") && typeof (\" transpiled \") === \\\"object\\\" && (\"\n               transpiled \").constructor.name === \\\"Array\\\")\"])\n\n\n(macro when (arg ...body)\n       [\"(function() {\"\n        (indent [\"if (\" (transpile arg) \") {\"\n                        (indent '(do ...@body))\n                        \"}\"])\n        \"})()\"])\n\n\n(macro not (exp)\n       [\"(!\" (transpile exp) \")\"])\n\n(macro unless (arg ...body)\n       [\"(function() {\"\n        (indent [\"if (\" '(not @arg) \") {\"\n                        (indent '(do ...@body))\n                        \"}\"])\n        \"})()\"])\n\n\n(macro slice (arr start end)\n       '(send @arr slice @start @end))\n\n(macro inspect (...args)\n       (interleave \" + \\\"\\\\n\\\" + \"\n             (map args\n                  (#(arg)\n                    [\"\\\"\" arg \":\\\" + \" (transpile arg)]))))\n\n(macro each (item array ...body)\n       '(send @array for-each\n              (lambda @{ node this args item } ...@body)))\n\n(macro assign (...args)\n       (interleave \"\\n\"\n             (bulk-map args (#(name value)\n                              (as-statement [ (transpile name) \" = \"\n                                                    (transpile value)])))))\n\n\n\n\n(macro macro-list ()\n       '(list @(Object.keys macros)))\n\n(macro macroexpand (name)\n       (var macro (get macros (transpile name)))\n       (if macro\n           (\"// macro: \" name \"\\n\" (macro.to-string))\n           \"undefined\"))\n\n\n(macro throw (...string)\n       [\"throw new Error (\" (interleave \" \" (map string transpile)) \")\"])\n\n(macro as-boolean (expr)\n       [\"(!!(\" (transpile expr) \"))\"])\n\n(macro try (tryblock catchblock)\n       [\"(function() {\"\n        (indent [\"try {\"\n                 (indent '(do ...@tryblock))\n                 \"} catch (e) {\"\n                 (indent '(do ...@catchblock))\n                 \"}\"])\n        \"})()\"])\n\n(macro state (...pairs)\n       (set macros.state 'data (or macros.state.data {}))\n\n       (if (= 1 (length pairs))\n           (get macros.state.data (output-formatter (transpile (first pairs))))\n           (do (bulk-map pairs (#(k v) (set macros.state.data (output-formatter (transpile k)) (eval (output-formatter (transpile v))))))\n               null)))\n\n(macro symbol ()\n       (var symbol-count (or (macros.state 'symbol-count) 0)\n            new-symbol-count (+ 1 symbol-count))\n       (macros.state 'symbol-count new-symbol-count)\n       [\"$_symbol\" new-symbol-count \"_$\"])\n\n(macro while (condition ...block)\n       (var symbol (macros.symbol))\n       '(scoped-without-source\n         (var @symbol)\n         @[\"while (\" (transpile condition) \") {\"\n           (indent '(assign @symbol (scoped-without-source ...@block)))\n            \"}\"]\n         @symbol))\n\n(macro until (condition ...block)\n       '(while (not @condition) ...@block))\n\n(macro thunk (...body)\n       '(lambda @{ node this args [] } ...@body))\n(alias-macro thunk #>)\n\n(macro keys (obj)\n       '(Object.keys @obj))\n\n(macro delete (...objects)\n       (interleave \"\\n\" (map objects (#(obj)\n                                 (as-statement [\"delete \" (transpile obj)])))))\n\n(macro delmacro (...macro-names)\n       (each (macro-name) macro-names\n             (delete (get macros (output-formatter (transpile macro-name)))))\n       null)\n(alias-macro delmacro delete-macro)\n\n\n(macro rename-macro (current-macro-name desired-macro-name)\n       (macros.alias-macro current-macro-name desired-macro-name)\n       (macros.delmacro current-macro-name)\n       null)\n\n(macro arguments ()\n       [\"(Array.prototype.slice.apply(arguments))\"])\n\n(macro scoped (...body)\n       '(call (lambda @{node this args []} ...@body)))\n\n(macro scoped-without-source (...body)\n       [\"(function() {\" (indent '(do ...@body)) \"})()\"])\n       \n\n(macro each-key (as obj ...body)\n       '(scoped-without-source\n         @[\"for (var \" (transpile as) \" in \" (transpile obj) \") \"\n            (as-statement '(scoped-without-source ...@body))\n            ]\n         @obj))\n\n(macro match? (regexp string)\n       '(send @string match @regexp))\n\n(macro switch (obj ...cases)\n       [\"(function() {\"\n         (indent [\"switch(\" (transpile obj) \") {\"\n                   (map cases (#(case-def)\n                                (var case-name-node (first case-def.contents)\n                                     case-labels (if (or (node? case-name-node 'expression)\n                                                         (node? case-name-node 'bracket))\n                                                     case-name-node.contents\n                                                     [case-name-node])\n                                     case-string (interleave \"\\n\" (map case-labels (#(c)\n                                                                                     (if (= 'default c.token)\n                                                                                         \"default:\"\n                                                                                         [\"case \" (transpile c) \":\"])))))\n                                [\"\\n\" case-string (indent '(do ...@(rest case-def.contents)))]))\n                   \"}\"])\n         \"})()\"])\n\n(macro if (...args)\n       [\"(function() {\"\n        (indent\n         (interleave \" else \"\n               (bulk-map args\n                         (#(cond val)\n                           (if (!= (typeof val) 'undefined)\n                                 [\"if (\" (transpile cond) \") {\"\n                                   (indent '(do @val))\n                                   \"}\"]\n                                 [\"{\" (indent '(do @cond)) \"}\"])))))\n        \"})()\"])\n\n(macro chain (object ...calls)\n       (if (= 0 calls.length) (transpile object)\n           (= 1 calls.length) '(send @object ...@(get (first calls) 'contents))\n           (do\n            (var lines (map calls (#(call index)\n                                    [\".\" (transpile (first call.contents))\n                                         \"(\" (interleave \", \" (map (rest call.contents) transpile)) \")\"])))\n\n            [ (transpile object)\n              (first lines)\n              \"\\n  \"\n              (recurse-indent\n               (interleave \"\\n\" (rest lines)))])))\n\n(macro chainable (...names)\n       (each (name) names\n             '(macro @name (target ...calls)\n                     '(chain (call @name @target) ...@calls))))\n\n(macro let (args body)\n       [\"let (\"\n         (interleave \", \" (bulk-map args\n                   (#(k v)\n                     [ (transpile k) \" = \" (transpile v) ])))\n         (if (undefined? body) \");\"\n             [\") {\" (indent (transpile body)) \"}\"])])\n\n(macro instance-of? (item type)\n       [\"(\" (transpile item) \" instanceof \" (transpile type) \")\"])\n\n(macro slice (list begin end)\n       [\"Array.prototype.slice.call(\" (transpile list)\n                                      \", \" (or (transpile begin) 0)\n                                      (if (defined? end) (\", \" (transpile end) \")\") \")\")])\n\n(macro includes? (list item)\n       '(!= -1 (send @list index-of @item)))\n\n(macro excludes? (list item)\n       '(= -1 (send @list index-of @item)))\n\n(macro exists? (thing)\n       '(and (defined? @thing) (!= @thing null)))\n\n(macro with-state (k v ...body)\n       (var before (macros.state k))\n       (macros.state k v)\n       (var return-value\n            (interleave \"\\n\" (map body transpile)))\n       (macros.state k before)\n       return-value)\n\n(macro join (glue arr)\n       (if (and (defined? glue) (undefined? arr))\n           (assign arr glue glue undefined))\n       [\"(\" (transpile arr) \").join(\" (if glue (transpile glue) \"\\\"\\\"\") \")\"])\n\n(macro var (...pairs)\n       (var destructured [])\n       (bulk-map pairs (#(lhs rhs)\n                         (switch lhs.type\n                                 ('bracket\n                                  (var symbol (macros.symbol))\n                                  (destructured.push [symbol (transpile rhs)])\n                                  (each (item index) lhs.contents\n                                        (destructured.push [(transpile item) '(get @symbol @index)]))\n                                  (destructured.push [symbol 'undefined]))\n                                 ('brace\n                                  (var symbol (macros.symbol))\n                                  (destructured.push [symbol (transpile rhs)])\n                                  (each (item index) lhs.contents\n                                        (var tr-item (transpile item))\n                                        (destructured.push [tr-item '(get @symbol @[\"\\\"\" tr-item \"\\\"\"])]))\n                                  (destructured.push [symbol 'undefined]))\n\n                                 (default\n                                  (destructured.push [(transpile lhs)\n                                                       (if rhs (transpile rhs) 'undefined)])))))\n\n       (as-statement\n        [\"var \" (interleave \",\\n    \"\n           (map destructured\n                (#(pair)\n                  [(first pair) \" = \" (second pair)]\n                  )))]))\n\n\n(debug false)","(def bulk-map (arr fn)\n  (var index 0\n          group-size fn.length\n          ret-arr [])\n\n  (while (< index arr.length)\n    (send ret-arr push\n          (apply fn (send arr slice\n                          index (+ index group-size))))\n    (incr-by index group-size))\n  ret-arr)\n\n(def inject (start items fn)\n  (var value start)\n  (when (list? items)\n    (each (item index) items\n      (assign value (fn value item index))))\n  value)\n\n(def map (items fn)\n  (inject [] items\n          (#(collector item index)\n            (send collector push (fn item index))\n            collector)))\n\n(def select (items fn)\n  (inject [] items\n          (#(collector item index)\n            (when (fn item index)\n              (send collector push item))\n            collector)))\n\n(def detect (items fn)\n  (var return-item undefined\n          index 0\n          items (or items []))\n\n  (until (or (= items.length index) return-item)\n         (when (fn (get items index) index)\n           (assign return-item (get items index)))\n         (incr index))\n\n  return-item)\n\n(def all? (items fn)\n     (undefined? (detect items (#(item index) (not (fn item index))))))\n\n(def none? (items fn)\n     (undefined? (detect items fn)))\n\n(def any? (items fn)\n     (defined? (detect items fn)))\n\n(def reject (items fn)\n  (var args [ items fn ])\n  (select items (thunk (not (apply fn arguments)))))\n\n(def compact (arr)\n     (select arr (#(item)\n                   (and\n                    (!= null item)\n                    (!= false item)\n                    (defined? item)))))\n\n(def interleave (glue arr)\n     (if (list? glue) (inject [] arr\n             (#(collector item index)\n               (collector.concat [item (get glue index)])))\n\n         \n     (inject [(first arr)] (rest arr)\n             (#(collector item index) (collector.concat [glue item])))))\n\n\n(def flatten (...items)\n  (inject [] items\n          (#(collector item)\n            (collector.concat\n             (if (list? item)\n               (apply flatten item)\n               item)))))\n\n\n(def recurse-map (item fn)\n     (if (list? item) (map item (#(subitem) (recurse-map subitem fn)))\n         (fn item)))\n\n(def pluck (items attribute)\n     (map items (#(item) (get item attribute))))\n\n(def merge-into (into from)\n     (each (key) (keys from) (set into key (get from key)))\n     into)\n\n(def clone (object)\n     (inject {} (keys object)\n             (#(collector key)\n               (set collector key (get object key))\n               collector)))\n\n(def map-values (object fn)\n     (inject {} (keys object)\n             (#(collector key index)\n               (set collector key (fn (get object key) key))\n               collector)))\n\n(def merge-with (into from)\n     (merge-into (clone into) from))\n","(def log! (...args)\n     (send (inspect! ..args ) for-each (#(o) (console.log o))))\n\n(def inspect! (...args)\n     (args.map (#(arg) (util.inspect arg { colors false depth 3}))))\n\n(def color (code items depth)\n     (concat code (join \"\" items) \"\\033[0m\"))\n\n(def black (...args) (color \"\\033[0;30m\" args))\n(def red (...args) (color \"\\033[0;31m\" args))\n(def green (...args) (color \"\\033[0;32m\" args))\n(def brown (...args) (color \"\\033[0;33m\" args))\n(def blue (...args) (color \"\\033[0;34m\" args))\n(def purple (...args) (color \"\\033[0;35m\" args))\n(def cyan (...args) (color \"\\033[0;36m\" args))\n(def gray (...args) (color \"\\033[0;37m\" args))\n(def bold-gray (...args) (color \"\\033[1;30m\" args))\n(def bold-red (...args) (color \"\\033[1;31m\" args))\n(def bold-green (...args) (color \"\\033[1;32m\" args))\n(def yellow (...args) (color \"\\033[1;33m\" args))\n(def bold-blue (...args) (color \"\\033[1;34m\" args))\n(def bold-purple (...args) (color \"\\033[1;35m\" args))\n(def bold-cyan (...args) (color \"\\033[1;36m\" args))\n(def white (...args) (color \"\\033[1;37m\" args))\n","(include \"./colors.sibilant\")\n\n(def sibilant.pretty-print (node color)\n     (when (undefined? color) (assign color true))\n\n     (real-newlines (if (node? node) (do\n                       (var pretty-printer (or (get sibilant.pretty-print node.type)\n                                               sibilant.pretty-print.default))\n                       (pretty-printer node color))\n         (list? node)\n           (concat (if color (black \"[\") \"\")\n                   (join (if color (black \",\") \"\") (map node prettify))\n                   (if color (black \"]\") \"\"))\n\n           color (red (util.inspect node))\n           (real-newlines (util.inspect node)))))\n\n\n(def sibilant.pretty-print.default (node color)\n     (real-newlines (sibilant.pretty-print.colorize node color\n      (concat\n       (if (and node.modifiers node.modifiers.length)\n           (join \"\" (map node.modifiers (#(n) (sibilant.pretty-print n color)))) \"\")\n       node.token\n       (if (and node.contents node.contents.length)\n           (join \" \" (map node.contents (#(n) (sibilant.pretty-print n color)))) \"\")\n       (or (get acceptable-pairs node.token) \"\")))))\n\n(def sibilant.pretty-print.root (node color)\n     (join \"\\n\" (map node.contents (#(n) (sibilant.pretty-print n color)))))\n\n(def sibilant.pretty-print.output (node color)\n     (concat (if color (black \"{\") \"\")\n             (if (list? node.contents)\n                 (join (if color (black \",\") \"\")\n                       (map node.contents (#(c) (sibilant.pretty-print.colorize node color (prettify c)))))\n                 (sibilant.pretty-print.colorize node color node.contents))\n             (if color (black \"}\") \"\")))\n\n(def real-newlines (node)\n     (chain node (split \"\\\\n\") (join \"\\n\")))\n\n\n(def sibilant.pretty-print.colorize (node color string)\n     (if (not color) string\n         (= node.hint 'macro) (yellow string)\n         (= node.type 'output) (purple string)\n         (green string)))\n\n(var prettify sibilant.pretty-print)","(def output-formatter (node)\n     (if (list? node) (join \"\" (map node output-formatter))\n         (and (node? node) (= node.type 'output))\n           (output-formatter node.contents)\n         (or (string? node) (number? node)) node\n         (not (exists? node)) \"\"\n         (node? node) (do\n                       (console.log \"WE SHOULD NOT BE HERE\")\n                       (output-formatter (transpile node)))))\n\n(set sibilant 'output-formatter output-formatter)","(var parser {})\n(set sibilant 'parser parser)\n(set parser 'tokens\n     { 'regex              \"(\\\\/(\\\\\\\\\\\\\\/|[^\\\\/\\\\n])+\\\\/[glim]*)\"\n       'comment            \"(;.*)\"\n       'string             \"(\\\"(([^\\\"]|(\\\\\\\\\\\"))*[^\\\\\\\\])?\\\")\"\n       'number             \"(-?[0-9][0-9.,]*)\"\n       'literal            \"(-?[*.$a-zA-Z_][*.a-zA-Z0-9-_]*(\\\\?|!)?)\"\n       'special            \"([&'])\"\n       'at                 \"@\"\n       'tick               \"[`']\"\n       'hat                \"(\\\\^)\"\n       'dots               \"(\\\\.+)\"\n       'other-char         \"([#><=!\\\\+\\\\/\\\\*-]+)\"\n       'open-expression    \"(\\\\(|\\\\{|\\\\[)\"\n       'close-expression    \"(\\\\)|\\\\}|\\\\])\"\n       'newline \"\\\\n\"\n       'whitespace \"\\\\s\"\n       'ignored \".\" })\n\n(set parser 'token-precedence  [ 'regex\n                                 'comment\n                                 'string\n                                 'number\n                                 'dots\n                                 'tick\n                                 'hat\n                                 'at\n                                 'special\n                                 'literal\n                                 'other-char\n                                 'open-expression\n                                 'close-expression\n                                 'newline\n                                 'whitespace\n                                 'ignored\n                                 ]\n     'ordered-regexes (parser.token-precedence.map\n                       (#(x)\n                         (var r (regex (\"^\" (get parser.tokens x))))\n                         (set r 'name x)\n                         r)))\n\n\n(var ordered-regexes parser.ordered-regexes)\n\n(set sibilant 'node-cache (or sibilant.node-cache {}))\n(def node-id (node)\n     (incr node-id.last-id))\n(def cache-node (node)\n     (var id (node-id node))\n     (set sibilant.node-cache id node)\n     (merge-into node {node-id id}))\n\n(set node-id 'last-id 0)\n\n (def parser.parse (string context)\n     (var context (if context context { position 0\n                        stack []\n                        line 1\n                        last-newline 0 col 0}))\n\n     (var match true\n          regex-name null\n          remaining-input string)\n\n     (while match\n            (detect ordered-regexes\n                    (#(r)\n                      (assign match (r.exec remaining-input)\n                              regex-name r.name)\n                      match))\n\n            (when (exists? match)\n                  (var match-string (first match)\n                       length (length match-string))\n                  \n                  (context.stack.push\n                   (cache-node { contents []\n                                 dir sibilant.dir\n                                 file sibilant.file\n                                 token match-string\n                                 type regex-name\n                                 start context.position\n                                 line context.line\n                                 col context.col\n                                 length length }))\n\n                  (if\n                   (= 'newline regex-name)\n                   (do\n                    (incr context.line)\n                    (set context\n                         'col 0\n                         'last-newline context.position))\n\n\n                   (and (= 'string regex-name) (!= -1 (match-string.index-of \"\\n\")))\n                   (do\n                    (var string-newline-count (- (length (match-string.split \"\\n\")) 1))\n                    (incr-by context.line string-newline-count)\n                    (set context 'col (- length (match-string.last-index-of \"\\n\"))))\n\n                   (incr-by context.col length))\n\n                  (incr-by context.position length)\n                  (assign remaining-input (if remaining-input.length\n                                              (remaining-input.slice length)\n                                              \"\"))))\n     context.stack)\n\n(var parse parser.parse)\n","(var restructurers {}\n     acceptable-pairs { \"(\" \")\" \"[\" \"]\" \"{\" \"}\" }\n     bracket-types { \"(\" 'expression\n                     \"[\" 'bracket\n                     \"{\" 'brace })\n\n(def restructure (input)\n     (var output { type 'root\n                   contents []\n                   file sibilant.file\n                   col 0\n                   line 1 }\n          context { parse-stack [output]\n                    output output\n                    input input\n                    specials 0 })\n\n     (inject context input\n             (#(context token index)\n               (var restructurer (or (get restructurers token.type) restructurers.default))\n               (restructurer token context index)))\n     output)\n\n(set sibilant 'restructure restructure)\n\n(def restructurers.open-expression (token context)\n     (var first (first context.parse-stack))\n     (set token\n          'contents []\n          'type (get bracket-types token.token)\n          'parent first)\n     (accept-specials token context)\n     (send first.contents push token)\n     (context.parse-stack.unshift token)\n     context)\n\n\n(def restructurers.close-expression (node context index)\n     (var first (first context.parse-stack))\n\n     (when (!= (get acceptable-pairs first.token) node.token)\n           (throw (\"trying to close \" (yellow (sibilant.pretty-print first))\n                                      \"\\n   on \"first.file\":\"first.line\":\"first.col\n                                      \"\\n   with \"(sibilant.pretty-print node)\n                                      \"\\n   on \"node.file\":\"node.line\":\"node.col\n                                      \"\\n\")))\n\n     (set first 'end node.end)\n     (context.parse-stack.shift)\n     (close-specials first context)\n     (when (zero? context.parse-stack.length)\n           (throw (\"unbalanced parens:\\n\"\n                   (call inspect parse-stack))))\n     context)\n\n(def open-special (node context)\n     (incr context.specials)\n\n     (var first (first context.parse-stack))\n     (set node\n          'contents []\n          'parent first)\n\n     (first.contents.push node)\n     (context.parse-stack.unshift node)\n     context)\n\n(def accept-specials (node context)\n     (set node 'specials (get context 'specials))\n     (set context 'specials 0)\n     context)\n\n(def close-specials (node context)\n     (when (> node.specials 0)\n           (decr node.specials)\n           (context.parse-stack.shift)\n           (close-specials node context))\n     context)\n\n(def restructurers.hat (node context index) (open-special node context))\n(def restructurers.dots (node context index) (open-special node context))\n(def restructurers.tick (node context index) (open-special node context))\n(def restructurers.at (node context index) (open-special node context))\n\n(def restructurers.whitespace (token context index) context)\n(def restructurers.newline (token context index) context)\n(def restructurers.ignored (token context index) context)\n\n(def restructurers.default (token context index)\n     (accept-specials token context)\n     (send (get (first context.parse-stack) 'contents) push token)\n     (close-specials token context))\n","(var macros {})\n(set sibilant 'macros macros 'debug false)\n\n\n(def recurse-indent (...args)\n     (map args\n          (#(arg)\n            (if (node? arg) (do (set arg 'contents (apply recurse-indent (compact (flatten arg.contents)))) arg)\n                (list? arg) (apply recurse-indent arg)\n                (number? arg) (arg.to-string)\n                (string? arg)\n                (chain arg\n                       (replace (regex \"\\\\n\" 'g) \"\\n  \")\n                       (replace (regex \"\\\\n\\\\s+\\\\n\" 'g) \"\\n\\n\"))\n\n                 arg))))\n\n(def indent (...args)\n     [\"\\n  \" (recurse-indent args) \"\\n\"])\n\n\n(def escape-regex (string)\n     (string.replace (regex \"[\\\\-\\\\[\\\\]\\\\/\\\\{\\\\}\\\\(\\\\)\\\\*\\\\+\\\\?\\\\.\\\\\\\\\\^\\\\$\\\\|]\" 'g) \"\\\\$&\"))\n\n(def ^return (token)\n     (when sibilant.debug (console.log \"returning \" (prettify token)))\n     (var default-return (as-statement [\"return \" (transpile token)]))\n     (if (and token token.contents token.contents.length)\n         (switch (get (first token.contents) 'token)\n                 (('return 'throw 'do) (transpile token))\n                 ('delete\n                  (var delete-macro (get macros 'delete))\n                  (if (< token.contents.length 3) default-return\n                      [ (as-statement (apply delete-macro (token.contents.slice 1 -1)))\n                        \"\\nreturn \"\n                        (as-statement (call delete-macro (last token.contents)))]))\n                 ('assign\n                  (if (< token.contents.length 4) default-return\n                      [ (apply ^assign\n                               (token.contents.slice 1 (- token.contents.length 2)))\n                        \"\\nreturn \"\n                        (apply ^assign (token.contents.slice -2))]))\n                 ('var\n                  [ (transpile token) \"\\nreturn \" (transpile (if (even? token.contents.length)\n                                                                 (last token.contents)\n                                                                 (first (token.contents.slice -2))))])\n                 ('set\n                  (if (< token.contents.length 5) default-return\n                      (do\n                       (var obj (second token.contents)\n                            non-return-part (token.contents.slice 2 (- token.contents.length 2))\n                            return-part (token.contents.slice -2))\n                       (non-return-part.unshift obj)\n                       (return-part.unshift obj)\n                       [ (^set ...non-return-part)\n                         \"\\nreturn \"\n                         (^set ...return-part)])))\n                 (default default-return))\n         default-return))\n\n\n(def statement? (transpiled)\n     (if (node? transpiled) (statement? transpiled.contents)\n         (list? transpiled) (statement? (last transpiled))\n         (string? transpiled) (= \";\" (last transpiled))\n         false))\n\n(def as-statement (node)\n     (var transpiled (transpile node))\n\n     (if (empty-node? transpiled) undefined\n         (statement? transpiled) transpiled\n         [ transpiled \";\" ]))\n\n(def ^do (...body)\n     (if (= 1 body.length) (^return (first body))\n         body.length [ (interleave \"\\n\" (map (body.slice 0 -1) (#(node) (as-statement node))))\n                       \"\\n\"\n                       (^return (last body)) ]\n         \"\"))\n\n(def ^empty-list () 'null)\n\n(def ^def (fn-name args ...body)\n     (var fn-name-tr (transpile fn-name) this-node this)\n\n     (as-statement [ (if (match? (regex \"\\\\.\") (output-formatter fn-name-tr)) \"\" \"var \")\n                     fn-name-tr \" = \"\n                     (^lambda { name fn-name args args node this-node } ...body )\n                     ] ))\n\n(def ^macro (name args ...body)\n     (var name-tr (output-formatter (transpile name))\n          options { name name args args node this}\n          js (output-formatter (^lambda options ...body)))\n\n     (when sibilant.debug (console.log js))\n     \n     (try (set macros name-tr (eval js))\n          (error (\"error in parsing macro \"\n                  (sibilant.pretty-print name) \":\\n\" js)))\n\n     undefined)\n\n(def ^concat (...args)\n     [\"(\" (interleave \" + \" (map args transpile)) \")\"])\n\n(def ^reverse (arr)\n     (var reversed [])\n     (each (item) arr (reversed.unshift item))\n     reversed)\n\n(var reverse ^reverse)\n\n(def ^lambda (args-or-options ...body)\n     (when sibilant.debug\n           (console.log args-or-options))\n     (var args (or (get args-or-options 'args) args-or-options)\n          body (or (get args-or-options 'body) body)\n          args (if (node? args 'expression) args.contents\n                   (and (node? args) (empty? body)) (do (assign body [ args ]) [])\n                   args)\n          name (when args-or-options.name\n                     (chain (output-formatter (transpile args-or-options.name))\n                            (replace (regex \"\\\\W+\" 'g) \"$\")\n                            (concat \"$\")))\n          rest (detect args\n                       (#(arg) (node? arg 'dots))))\n\n     (var this-node this\n          node (detect\n                [ args-or-options.node this-node args-or-options.name args (first body) ]\n                (#(n) (and (node? n) (get n 'file)))))\n     [\"(function\" (if name (\" \" name) \"\") \"(\"\n       (interleave \", \" (map args transpile)) \") {\"\n       (if (or args-or-options.name node)\n           (indent [\"/*\"\n                     (if args-or-options.name (\" \" (sibilant.pretty-print args-or-options.name false)) \"\")\n                     (if node (\" \" node.file \":\" node.line \":\" node.col) \"\")\n                     \" */\"]) \"\")\n       (when (exists? rest)\n             (indent (as-statement [\"var \" (transpile rest)\n                       \" = Array.prototype.slice.call(arguments, \"\n                       (- args.length 1) \")\"])))\n\n       (indent (apply ^do body))\n       \"})\"])\n\n(set macros \"#\" ^lambda)\n\n(def ^quoted-hash (...pairs)\n     (var cached-quote-value ^hash.quote-keys)\n     (set ^hash 'quote-keys true)\n     (var value (^hash ...pairs))\n     (set ^hash 'quote-keys cached-quote-value)\n     value)\n\n(def ^hash (...pairs)\n     (when (odd? pairs.length)\n           (error (\"odd number of key-value pairs in hash: \"\n                   (call inspect pairs))))\n\n     (var quote-keys ^hash.quote-keys\n          pair-strings (bulk-map pairs (#(key value)\n                                         [ (if (and quote-keys (not (node? key 'string)))\n                                               [\"\\\"\" (transpile key) \"\\\"\"]\n                                               (transpile key))\n                                           \": \"\n                                           (transpile value)])))\n     (if (>= 1 pair-strings.length)\n         [\"{ \" (interleave \", \" pair-strings) \" }\"]\n         [\"{\" (indent (interleave \",\\n\" pair-strings)) \"}\"]))\n\n\n(def qescape (content)\n     (if (not (exists? content)) \"\"\n         (string? content) (chain content\n                                  (replace (regex \"\\\"\" 'g) \"\\\\\\\"\")\n                                  (replace (regex \"\\\\n\" 'g) \"\\\\n\\\" +\\n\\\"\"))\n         content))\n\n(def log-pretty (label arg)\n     (console.log (concat label \": \" (prettify arg)))\n     arg)\n\n(var pretty-log log-pretty)\n\n(def ^quote (content)\n     (if (string? content) (\"\\\"\" (qescape content) \"\\\"\")\n         (number? content) (^quote (content.to-string))\n         (node? content 'literal) [\"\\\"\" (transpile content) \"\\\"\"]\n         (node? content 'expression)\n         (if (length (keys (find-unquotes content)))\n             (^call 'macros.expand-quote.call 'this (^quote content.node-id)\n                    (apply ^quoted-hash (alternating-keys-and-values (find-unquotes content))))\n             [\"\\\"\" (map-node (transpile content) qescape) \"\\\"\"])\n         (do\n          (console.log (\"unknown content\" (prettify content)))\n          content)))\n\n(def ^debug (val)\n     (set sibilant 'debug (eval (output-formatter (transpile val)))) null)\n\n(def map-node (node fn)\n     (if (node? node)\n         (do\n          (var mapped-node (fn node))\n          (when (node? mapped-node)\n                (set mapped-node 'contents (map-node mapped-node.contents fn)))\n\n          mapped-node)\n\n         (list? node) (map node (#(c) (map-node c fn)))\n         (fn node)))\n\n(def each-node (node fn)\n     (if (node? node) (when (fn node) (each-node node.contents fn))\n         (list? node) (each (c) node (each-node c fn))\n         (fn node)))\n\n\n(def map-node-for-quote-expansion (node expansions)\n     (if (node? node)\n         (do\n          (var mapped-node (if (expansions.has-own-property node.node-id) (get expansions node.node-id) (clone node)))\n          (when (node? mapped-node)\n                (set mapped-node 'contents (map-node-for-quote-expansion mapped-node.contents expansions)))\n\n          (assign mapped-node (splice-dots mapped-node))\n          mapped-node)\n\n         (list? node)\n           (map node (#(c) (map-node-for-quote-expansion c expansions)))\n\n         node))\n\n\n(def ^expand-quote (node-id expansions)\n     (var expanded-nodes\n          (map-node-for-quote-expansion (get sibilant.node-cache node-id) expansions))\n\n     (transpile expanded-nodes))\n\n(def unquote? (node) (node? node 'at))\n\n(def find-unquotes (node)\n     (var unquotes {})\n     (each-node node (#(n)\n                       (when (unquote? n)\n                             (set unquotes n.node-id (transpile n)))\n                       (not (node? n 'tick))))\n     unquotes)\n\n(def splice-dots (node)\n     (when (list? node.contents)\n           (var contents [])\n           (each (content) node.contents\n                 (if (and (node? content 'dots)\n                          (list? content.contents)\n                          (= content.contents.length 1)\n                          (list? (first content.contents)))\n                      (contents.push.apply contents (first content.contents))\n                      (contents.push content)))\n\n           (set node 'contents contents))\n     node)\n\n\n(def alternating-keys-and-values (hash)\n     (flatten (map (keys hash)\n                   (#(key) [key, (get hash key)]))))\n\n\n(def ^list (...args)\n       (var arg-segments [])\n       (if (empty? args) \"[]\"\n           (do\n            (def simple-list (args)\n                 [\"[ \" (interleave \", \" (map args (#(arg) arg.transpiled))) \" ]\"])\n\n            (args.for-each (#(arg)\n                  (if (node? arg 'dots) (arg-segments.push {transpiled (transpile arg)})\n                   (list? (last arg-segments)) (send (last arg-segments) push {transpiled (transpile arg)})\n                   (arg-segments.push [{transpiled (transpile arg)}]))))\n\n            (assign arg-segments (map arg-segments\n                                      (#(segment)\n                                        (if (list? segment)\n                                            (simple-list segment)\n                                            segment.transpiled))))\n\n            (if (= 1 (length arg-segments))\n                (first arg-segments)\n                [(first arg-segments) \".concat(\" (interleave \", \" (rest arg-segments))\")\"]))))\n\n\n(def ^call (fn-name ...args)\n     (if (any? args (#(arg) (node? arg 'dots)))\n           (macros.apply fn-name (macros.list ...args))\n           [ (transpile fn-name)\n                   \"(\" (interleave \", \" (map args transpile)) \")\" ]))\n\n(def ^dots (...contents)\n     (transpile contents))\n\n",";; (def flatten-output (nodes)\n;;      (inject [] nodes\n;;              (#(collector item)\n;;                (if (list? item) (apply flatten-output item)\n;;                   (if \n                                \n\n(def node? (thing type)\n     (and\n      (exists? thing)\n      (= 'object (typeof thing))\n      (string? thing.type)\n      (or (undefined? type) (= thing.type type))\n      (thing.has-own-property 'contents)))\n\n(def empty-node? (item)\n     (if (node? item) (empty-node? item.contents)\n         (list? item) (all? item empty-node?)\n         (string? item) (item.match (regex \"^\\\\s*$\"))\n         (or (= null item)\n             (undefined? item)\n             (= false item))))\n\n(def compact-node (item)\n     (if (node? item) (do\n                       (set item 'contents (compact-node item.contents))\n                       (if (and item.contents item.contents.length) item null))\n         (list? item) (do\n                       (var compacted (compact (map item compact-node)))\n                       (if (and compacted compacted.length) compacted null))\n         (if (or (= item \"\") (= item false)) null item)))\n\n(def recurse-transpile (node)\n     (if (list? node) (map node recurse-transpile)\n         (and (node? node) (!= 'output node.type)) (transpile node)\n         (and (node? node) (= 'output node.type)) (do\n                                                   (set node 'contents (recurse-transpile node.contents))\n                                                   node)\n         node))\n\n(def transpile (node preprocessor)\n     (if\n      (string? node)\n      (assign node { type 'js token node contents []})\n\n      (number? node)\n      (assign node { type 'number token (node.to-string) contents []}))\n     \n     (if (list? node) node\n         (exists? node) (do\n                         (var transpiler (or (get transpile node.type) transpile.default))\n                         (var result (transpiler node))\n                         (var result-node (recurse-transpile (if (node? result) result\n                                              { contents result type 'output })))\n                         (set result-node\n                              'contents (compact (flatten result-node.contents))\n                              'source node)\n\n                         (when sibilant.debug\n                               (console.log (prettify node)\n                                            (red \"->\")\n                                            (prettify result-node)))\n\n                         (set node 'transpiled result-node)\n\n                         \n                         (if (empty-node? result-node) undefined\n                             result-node))))\n\n\n(set sibilant 'transpile transpile)\n\n(var reader-macros {})\n\n(def transpile.hat (node)\n     (var output (transpile (first node.contents)))\n     (set output 'contents [(\"macros.\" (first output.contents))])\n     output)\n\n(def transpile.tick (node)\n     (^quote.apply node node.contents))\n\n(def transpile.at (node)\n     (transpile (first node.contents)))\n\n(def transpile.dots (node)\n     (^dots.apply node node.contents))\n\n\n(def transpile.default (node)\n     node.token)\n\n(def transpile.output (node)\n     node)\n\n(def transpile.number (node)\n     (send (parse-float (node.token.replace (regex \",\" 'g) \"\")) to-string))\n\n(def transpile.root (node)\n     (if (= 1 node.contents.length)\n         (transpile (first node.contents))\n         (interleave \"\\n\" (compact (map node.contents as-statement)))))\n\n(def transpile.expression (node preprocessor)\n     (if node.contents.length\n         (do\n          (var head (first node.contents)\n               args (rest node.contents)\n               macro (get macros (output-formatter (transpile head))))\n\n          (when (exists? macro) (set head 'hint 'macro))\n\n          (when (and head (= 'string head.type))\n                (assign macro macros.concat args node.contents))\n\n          (when (undefined? macro)\n                (assign macro macros.call args node.contents))\n\n          (macro.apply node args))\n\n         \"null\"))\n\n(def transpile.bracket (node)\n     (apply macros.list node.contents))\n\n(def transpile.brace (node) (apply macros.hash node.contents))\n\n(def transpile.literal (node)\n     (var string node.token)\n     (inject (chain string\n                    (replace (regex \"\\\\*\" 'g) \"_\")\n                    (replace (regex \"\\\\?$\") \"__QUERY\")\n                    (replace (regex \"!$\") \"__BANG\"))\n             (string.match (regex \"-(.)\" 'g))\n             (#(return-string match)\n               (return-string.replace match\n                                      (send (second match) to-upper-case)))))\n\n(def transpile.string (node)\n     (chain node.token (split \"\\n\")\n            (join \"\\\\n\\\" +\\n\\\"\")))\n\n(def transpile.comment (node) null)\n\n","(def sibilize (input)\n     (sibilant.initialize)\n     (output-formatter (transpile (restructure (parse input)))))\n\n(def sourcemap (input)\n     (sibilant.initialize)\n     (sourcemapper (transpile (restructure (parse input)))))\n\n(set sibilant 'sibilize sibilize)\n\n(def sibilant.version ()\n     (get (sibilant.package-info) 'version))\n\n(def sibilant.strip-shebang (data)\n     (data.replace (regex \"^#!.*\\\\n\") \"\\n\"))\n\n(set sibilant 'file 'eval.sibilant)\n\n(def with-dir-and-file (dir file fn)\n     (var before { dir sibilant.dir\n                   file sibilant.file })\n     (set sibilant\n          'dir  dir\n          'file file)\n\n     (var retval (fn))\n\n     (set sibilant\n          'dir  before.dir\n          'file before.file)\n\n     retval)\n\n(set sibilant 'source-cache {})\n\n(def sibilant.sibilize-file (file-name)\n     (output-formatter (sibilant.transpile-file file-name)))\n\n(def sibilant.sibilize-json (file-name)\n     (sibilant.initialize)\n     (var before sibilant.macros.hash.quote-keys)\n     (set sibilant.macros.hash 'quote-keys true)\n     (var content (sibilant.sibilize-file file-name))\n     (set sibilant.macros.hash 'quote-keys before)\n     content)\n\n(def sibilant.macros.include (file)\n     (sibilant.include (eval (output-formatter (transpile file)))))\n\n"]}