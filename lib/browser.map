{"version":3,"sources":["/Users/jbr/code/sibilant/src/browser.sibilant","/Users/jbr/code/sibilant/include/functional.sibilant","/Users/jbr/code/sibilant/src/colors.sibilant","/Users/jbr/code/sibilant/src/pretty-printer.sibilant","/Users/jbr/code/sibilant/src/output-formatter.sibilant","/Users/jbr/code/sibilant/src/parser.sibilant","/Users/jbr/code/sibilant/src/restructurer.sibilant","/Users/jbr/code/sibilant/src/macros.sibilant","/Users/jbr/code/sibilant/src/transpiler.sibilant","/Users/jbr/code/sibilant/src/require-and-include.sibilant"],"names":[],"mappings":"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","sourcesContent":["(meta \"//# sourceMappingURL=browser.map\\n\")\n\n(chainable $ $.get)\n\n((#(root)\n   (var sibilant {} exports sibilant)\n   (def error (str) (throw str))\n   (def inspect (item) (if item.to-source (item.to-source) (item.to-string)))\n   (set root 'sibilant sibilant)\n\n   (include \"../include/functional\")\n   (include \"./pretty-printer\")\n   (include \"./output-formatter\")\n   (include \"../include/functional\")\n   (include \"./parser\")\n   (include \"./restructurer\")\n   (include \"./macros\")\n   (include \"./transpiler\")\n   (include \"./require-and-include\")\n\n                                        ;   (var package (include \"../package.son\"))\n   (var package {version \"BROWSER\"})\n   (def sibilant.package-info () package)\n\n   (def sibilant.version-string ()\n        (concat package.name \" browser version \" package.version))\n\n   (set sibilant 'dir \"browser\")\n\n   (when (defined? $)\n         ($ (#>\n             (var sibilant root.sibilant\n                  scripts ($.make-array ($ \"script[type=\\\"application/sibilant\\\"][src]\"\n                                           (map (#> this.src)))))\n\n             (def sibilant.initialize () false)\n\n             \n             (def eval-code (js)\n                  ((new Function js)))\n\n             (def sibilant.include (url)\n                  ($.get url (done (#(data) (eval-code (sibilize data))))))\n\n             (def sibilant.load-macros (fn)\n                  (chain (sibilant.include \"/javascripts/macros.sibilant\")\n                         (done (#> (when (function? fn) (fn sibilant))))))\n\n             (chain (sibilant.load-macros) (then (map scripts sibilant.include))))))) this)\n","(def bulk-map (arr fn)\n  (var index 0\n          group-size fn.length\n          ret-arr [])\n\n  (while (< index arr.length)\n    (send ret-arr push\n          (apply fn (send arr slice\n                          index (+ index group-size))))\n    (incr-by index group-size))\n  ret-arr)\n\n(def inject (start items fn)\n  (var value start)\n  (when (list? items)\n    (each (item index) items\n      (assign value (fn value item index))))\n  value)\n\n(def map (items fn)\n  (inject [] items\n          (#(collector item index)\n            (send collector push (fn item index))\n            collector)))\n\n(def select (items fn)\n  (inject [] items\n          (#(collector item index)\n            (when (fn item index)\n              (send collector push item))\n            collector)))\n\n(def detect (items fn)\n  (var return-item undefined\n          index 0\n          items (or items []))\n\n  (until (or (= items.length index) return-item)\n         (when (fn (get items index) index)\n           (assign return-item (get items index)))\n         (incr index))\n\n  return-item)\n\n(def all? (items fn)\n     (undefined? (detect items (#(item index) (not (fn item index))))))\n\n(def none? (items fn)\n     (undefined? (detect items fn)))\n\n(def any? (items fn)\n     (defined? (detect items fn)))\n\n(def reject (items fn)\n  (var args [ items fn ])\n  (select items (thunk (not (apply fn arguments)))))\n\n(def compact (arr)\n     (select arr (#(item)\n                   (and\n                    (!= null item)\n                    (!= false item)\n                    (defined? item)))))\n\n(def interleave (glue arr)\n     (inject [(first arr)] (rest arr)\n             (#(collector item index)\n               (collector.push (if (list? glue) (get glue index) glue))\n               (collector.push item)\n               collector)))\n\n(def flatten (...items)\n  (inject [] items\n          (#(collector item)\n            (collector.concat\n             (if (list? item)\n               (apply flatten item)\n               item)))))\n\n\n(def recurse-map (item fn)\n     (if (list? item) (map item (#(subitem) (recurse-map subitem fn)))\n         (fn item)))\n\n(def pluck (items attribute)\n     (map items (#(item) (get item attribute))))","(def log! (...args)\n     (send (inspect! ..args ) for-each (#(o) (console.log o))))\n\n(def inspect! (...args)\n     (args.map (#(arg) (util.inspect arg { colors false depth 3}))))\n\n(def color (code items depth)\n     (concat code (join \"\" items) \"\\033[0m\"))\n\n(def black (...args) (color \"\\033[0;30m\" args))\n(def red (...args) (color \"\\033[0;31m\" args))\n(def green (...args) (color \"\\033[0;32m\" args))\n(def brown (...args) (color \"\\033[0;33m\" args))\n(def blue (...args) (color \"\\033[0;34m\" args))\n(def purple (...args) (color \"\\033[0;35m\" args))\n(def cyan (...args) (color \"\\033[0;36m\" args))\n(def gray (...args) (color \"\\033[0;37m\" args))\n(def bold-gray (...args) (color \"\\033[1;30m\" args))\n(def bold-red (...args) (color \"\\033[1;31m\" args))\n(def bold-green (...args) (color \"\\033[1;32m\" args))\n(def yellow (...args) (color \"\\033[1;33m\" args))\n(def bold-blue (...args) (color \"\\033[1;34m\" args))\n(def bold-purple (...args) (color \"\\033[1;35m\" args))\n(def bold-cyan (...args) (color \"\\033[1;36m\" args))\n(def white (...args) (color \"\\033[1;37m\" args))\n","(include \"./colors.sibilant\")\n\n(def sibilant.pretty-print (node color)\n     (when (undefined? color) (assign color true))\n\n     (if (node? node) (do\n                       (var pretty-printer (or (get sibilant.pretty-print node.type)\n                                               sibilant.pretty-print.default))\n                       (pretty-printer node color))\n         (list? node)\n           (concat (if color (black \"[\") \"\")\n                   (join (if color (black \",\") \"\") (map node prettify))\n                   (if color (black \"]\") \"\"))\n\n           color (red (util.inspect node))\n           (util.inspect node)))\n\n\n(def sibilant.pretty-print.default (node color)\n     (sibilant.pretty-print.colorize node color\n      (concat\n       (if (and node.modifiers node.modifiers.length)\n           (join \"\" (map node.modifiers sibilant.pretty-print)) \"\")\n       node.token\n       (if (and node.contents node.contents.length)\n           (join \" \" (map node.contents sibilant.pretty-print)) \"\")\n       (or (get acceptable-pairs node.token) \"\"))))\n\n(def sibilant.pretty-print.root (node color)\n     (join \"\\n\" (map node.contents sibilant.pretty-print)))\n\n(def sibilant.pretty-print.output (node color)\n     (concat (if color (black \"{\") \"\")\n             (if (list? node.contents)\n                 (join (if color (black \",\") \"\")\n                       (map node.contents (#(c) (sibilant.pretty-print.colorize node color (prettify c)))))\n                 (sibilant.pretty-print.colorize node color node.contents))\n             (if color (black \"}\") \"\")))\n\n\n(def sibilant.pretty-print.colorize (node color string)\n     (if (not color) string\n         (= node.hint 'macro) (yellow string)\n         (= node.type 'output) (purple string)\n         (green string)))\n\n(var prettify sibilant.pretty-print)","(def output-formatter (node)\n     (if (list? node) (join \"\" (map node output-formatter))\n         (and (node? node) (= node.type 'output))\n           (output-formatter node.contents)\n         (or (string? node) (number? node)) node\n         (not (exists? node)) \"\"\n         (node? node) (do\n                       (console.log \"WE SHOULD NOT BE HERE\")\n                       (output-formatter (transpile node)))))\n\n(set sibilant 'output-formatter output-formatter)","(var parser {})\n(set sibilant 'parser parser)\n(set parser 'tokens\n     { 'regex              \"(\\\\/(\\\\\\\\\\\\\\/|[^\\\\/\\\\n])+\\\\/[glim]*)\"\n       'comment            \"(;.*)\"\n       'string             \"(\\\"(([^\\\"]|(\\\\\\\\\\\"))*[^\\\\\\\\])?\\\")\"\n       'number             \"(-?[0-9][0-9.,]*)\"\n       'literal            \"(-?[*.$a-zA-Z_][*.a-zA-Z0-9-_]*(\\\\?|!)?)\"\n       'special            \"([&'])\"\n       'at                 \"@\"\n       'tick               \"'\"\n       'hat                \"(\\\\^)\"\n       'dots               \"(\\\\.+)\"\n       'other-char         \"([#><=!\\\\+\\\\/\\\\*-]+)\"\n       'open-expression    \"(\\\\(|\\\\{|\\\\[)\"\n       'close-expression    \"(\\\\)|\\\\}|\\\\])\"\n       'newline \"\\\\n\"\n       'whitespace \"\\\\s\"\n       'ignored \".\" })\n\n;;(set parser.tokens 'special-literal (concat parser.tokens.special parser.tokens.literal))\n\n(set parser 'token-precedence  [ 'regex\n                                 'comment\n                                 'string\n                                 'number\n                                 'dots\n                                 'tick\n                                 'hat\n                                 'at\n                                 'special\n                                 'literal\n                                 'other-char\n                                 'open-expression\n                                 'close-expression\n                                 'newline\n                                 'whitespace\n                                 'ignored\n                                 ]\n     'ordered-regexes (parser.token-precedence.map\n                       (#(x)\n                         (var r (regex (\"^\" (get parser.tokens x))))\n                         (set r 'name x)\n                         r)))\n\n\n(var ordered-regexes parser.ordered-regexes)\n\n\n(def parser.parse (string context)\n     (var context (if context context { position 0\n                        stack []\n                        line 1\n                        last-newline 0 col 0}))\n\n     (var match true\n          regex-name null\n          remaining-input string)\n\n     (while match\n            (detect ordered-regexes\n                    (#(r)\n                      (assign match (r.exec remaining-input)\n                              regex-name r.name)\n                      match))\n\n            (when (exists? match)\n                  (var match-string (first match)\n                       length (length match-string))\n\n                  (context.stack.push { contents []\n                                        modifiers []\n                                        dir sibilant.dir\n                                        file sibilant.file\n                                        token match-string\n                                        type regex-name\n                                        start context.position\n                                        line context.line\n                                        col context.col\n                                        length length })\n\n                  (if\n                   (= 'newline regex-name)\n                   (do\n                    (incr context.line)\n                    (set context\n                         'col 0\n                         'last-newline context.position))\n\n\n                   (and (= 'string regex-name) (!= -1 (match-string.index-of \"\\n\")))\n                   (do\n                    (var string-newline-count (- (length (match-string.split \"\\n\")) 1))\n                    (incr-by context.line string-newline-count)\n                    (set context 'col (- length (match-string.last-index-of \"\\n\"))))\n\n                   (incr-by context.col length))\n\n                  (incr-by context.position length)\n                  (assign remaining-input (if remaining-input.length\n                                              (remaining-input.slice length)\n                                              \"\"))))\n     context.stack)\n\n(var parse parser.parse)\n","(var restructurers {}\n     acceptable-pairs { \"(\" \")\" \"[\" \"]\" \"{\" \"}\" }\n     bracket-types { \"(\" 'expression\n                     \"[\" 'bracket\n                     \"{\" 'brace })\n\n(def restructure (input)\n     (var output { type 'root contents [] modifiers [] file sibilant.file col 0 line 1 })\n     (inject { parse-stack [output], output output, input input } input\n             (#(context token index)\n               (var restructurer (or (get restructurers token.type) restructurers.default))\n               (restructurer token context index)))\n     output)\n\n(set sibilant 'restructure restructure)\n\n(def restructurers.open-expression (token context index)\n     (var first (first context.parse-stack))\n     (set token 'contents []\n          'type (get bracket-types token.token)\n          'parent first)\n     (send first.contents push token)\n     (context.parse-stack.unshift token)\n     context)\n\n(def code-context (node context)\n     (var context (or context 5))\n\n     (if node.input\n         (do\n          (var n (- node.col 1)\n               pointer \"\"\n               lines (chain node.input\n                            (split \"\\n\")\n                            (slice\n                             (- node.line context)\n                             (+ node.line context))))\n\n          (while (decr n) (assign pointer (pointer.concat \"-\"))) \n          \n          (join \"\\n\" (chain (lines.slice 0 context)\n                            (concat [(concat pointer \"^\" )])\n                            (concat (lines.slice context (* 2 context))))))\n         (sibilant.pretty-print node)))\n\n(def restructurers.close-expression (node context index)\n     (var first (first context.parse-stack))\n     (when (!= (get acceptable-pairs first.token) node.token)\n           (throw (\"trying to close \" (yellow (sibilant.pretty-print first))\n                                      \"\\n   on \"first.file\":\"first.line\":\"first.col\n                                      \"\\n   with \"(sibilant.pretty-print node)\n                                      \"\\n   on \"node.file\":\"node.line\":\"node.col\n                                      \"\\n\")))\n\n     (set first 'end node.end)\n     (context.parse-stack.shift)\n     (when (zero? context.parse-stack.length)\n           (throw (\"unbalanced parens:\\n\"\n                   (call inspect parse-stack))))\n     context)\n\n(def restructurers.hat (node context index)\n     (var next-node (get context.input (+ 1 index)))\n     (next-node.modifiers.push node)\n     context)\n\n(def restructurers.dots (node context index)\n     (var next-node (get context.input (+ 1 index)))\n     (next-node.modifiers.push node)\n     context)\n\n(def restructurers.tick (node context index)\n     (var next-node (get context.input (+ 1 index)))\n     (next-node.modifiers.push node)\n     context)\n(def restructurers.at (node context index)\n     (var next-node (get context.input (+ 1 index)))\n     (next-node.modifiers.push node)\n     context)\n\n(def restructurers.whitespace (token context index) context)\n(def restructurers.newline (token context index) context)\n(def restructurers.ignored (token context index) context)\n\n(def restructurers.default (token context index)\n     (send (get (first context.parse-stack) 'contents) push token)\n     context)\n","(var macros {})\n(set sibilant 'macros macros)\n\n(def recurse-indent (...args)\n     (map args\n          (#(arg)\n            (if (node? arg) (do (set arg 'contents (apply recurse-indent (compact (flatten arg.contents)))) arg)\n                (list? arg) (apply recurse-indent arg)\n                (number? arg) (arg.to-string)\n                (string? arg)\n                (chain arg\n                       (replace (regex \"\\\\n\" 'g) \"\\n  \")\n                       (replace (regex \"\\\\n\\\\s+\\\\n\" 'g) \"\\n\\n\"))\n\n                 arg))))\n\n(def indent (...args)\n     [\"\\n  \" (recurse-indent args) \"\\n\"])\n\n\n(def escape-regex (string)\n     (string.replace (regex \"[\\\\-\\\\[\\\\]\\\\/\\\\{\\\\}\\\\(\\\\)\\\\*\\\\+\\\\?\\\\.\\\\\\\\\\^\\\\$\\\\|]\" 'g) \"\\\\$&\"))\n\n(def ^return (token)\n     (when sibilant.debug (console.log \"returning \" (prettify token)))\n     (var default-return (as-statement [\"return \" (transpile token)]))\n     (if (and token token.contents token.contents.length\n              (empty? (get (first token.contents) 'modifiers)))\n         (switch (get (first token.contents) 'token)\n                 (('return 'throw 'do) (transpile token))\n                 ('delete\n                  (var delete-macro (get macros 'delete))\n                  (if (< token.contents.length 3) default-return\n                      [ (as-statement (apply delete-macro (token.contents.slice 1 -1)))\n                        \"\\nreturn \"\n                        (as-statement (call delete-macro (last token.contents)))]))\n                 ('assign\n                  (if (< token.contents.length 4) default-return\n                      [ (apply ^assign\n                               (token.contents.slice 1 (- token.contents.length 2)))\n                        \"\\nreturn \"\n                        (apply ^assign (token.contents.slice -2))]))\n                 ('var\n                  [ (transpile token) \"\\nreturn \" (transpile (if (even? token.contents.length)\n                                                                 (last token.contents)\n                                                                 (first (token.contents.slice -2))))])\n                 ('set\n                  (if (< token.contents.length 5) default-return\n                      (do\n                       (var obj (second token.contents)\n                            non-return-part (token.contents.slice 2 (- token.contents.length 2))\n                            return-part (token.contents.slice -2))\n                       (non-return-part.unshift obj)\n                       (return-part.unshift obj)\n                       [ (^set ...non-return-part)\n                         \"\\nreturn \"\n                         (^set ...return-part)])))\n                 (default default-return))\n         default-return))\n\n\n(def ^list (...args) [\"[ \" (interleave \", \" (map args transpile)) \" ]\"])\n\n(def statement? (transpiled)\n     (if (node? transpiled) (statement? transpiled.contents)\n         (list? transpiled) (statement? (last transpiled))\n         (string? transpiled) (= \";\" (last transpiled))\n         false))\n\n(def as-statement (node)\n     (var transpiled (transpile node))\n\n     (if (empty-node? transpiled) undefined\n         (statement? transpiled) transpiled\n         [ transpiled \";\" ]))\n\n(def ^do (...body)\n     (if (= 1 body.length) (^return (first body))\n         body.length [ (interleave \"\\n\" (map (body.slice 0 -1) (#(node) (as-statement node))))\n                       \"\\n\"\n                       (^return (last body)) ]\n         \"\"))\n\n(def ^empty-list () 'null)\n\n(def ^call (fn-name ...args)\n     [ (transpile fn-name)\n       \"(\" (interleave \", \" (map args transpile)) \")\"])\n\n(def ^def (fn-name args ...body)\n     (var fn-name-tr (transpile fn-name) this-node this)\n\n     (as-statement [ (if (match? (regex \"\\\\.\") (output-formatter fn-name-tr)) \"\" \"var \")\n                     fn-name-tr \" = \"\n                     (^lambda { name fn-name args args node this-node } ...body )\n                     ] ))\n\n(def ^macro (name args ...body)\n     (var name-tr (output-formatter (transpile name))\n          options { name name args args node this}\n          js (output-formatter (^lambda options ...body)))\n\n     (when sibilant.debug (console.log js))\n     \n     (try (set macros name-tr (eval js))\n          (error (\"error in parsing macro \"\n                  (sibilant.pretty-print name) \":\\n\" js)))\n\n     undefined)\n\n(def ^concat (...args)\n     [\"(\" (interleave \" + \" (map args transpile)) \")\"])\n\n(def ^reverse (arr)\n     (var reversed [])\n     (each (item) arr (reversed.unshift item))\n     reversed)\n\n(var reverse ^reverse)\n\n(def ^lambda (args-or-options ...body)\n     (var args (or (get args-or-options 'args) args-or-options)\n          body (or (get args-or-options 'body) body)\n          args (if (node? args 'expression) args.contents\n                   (and (node? args) (empty? body)) (do (assign body [ args ]) [])\n                   args)\n          name (when args-or-options.name\n                     (chain (output-formatter (transpile args-or-options.name))\n                            (replace (regex \"\\\\W+\" 'g) \"$\")\n                            (concat \"$\")))\n          rest (detect args\n                       (#(arg)\n                         (when arg.modifiers\n                               (var mod (first arg.modifiers))\n                               (and mod (= \"...\" mod.token))))))\n\n     (var this-node this\n          node (detect\n                [ this-node args-or-options.node args-or-options.name args (first body) ]\n                (#(n) (and (node? n) (get n 'file)))))\n     [\"(function\" (if name (\" \" name) \"\") \"(\"\n       (interleave \", \" (map args transpile)) \") {\"\n       (if (or args-or-options.name node)\n           (indent [\"/*\"\n                     (if args-or-options.name (\" \" (sibilant.pretty-print args-or-options.name false)) \"\")\n                     (if node (\" \" node.file \":\" node.line \":\" node.col) \"\")\n                     \" */\"]) \"\")\n       (when (exists? rest)\n             (indent (as-statement [\"var \" (transpile rest)\n                       \" = Array.prototype.slice.call(arguments, \"\n                       (- args.length 1) \")\"])))\n\n       (indent (apply ^do body))\n       \"})\"])\n\n(set macros \"#\" ^lambda)\n\n(def ^hash (...pairs)\n     (when (odd? pairs.length)\n           (error (\"odd number of key-value pairs in hash: \"\n                   (call inspect pairs))))\n\n     (var quote-keys ^hash.quote-keys\n          pair-strings (bulk-map pairs (#(key value)\n                                         [ (if (and quote-keys (not (node? key 'string)))\n                                               [\"\\\"\" (transpile key) \"\\\"\"]\n                                               (transpile key))\n                                           \": \"\n                                           (transpile value)])))\n     (if (>= 1 pair-strings.length)\n         [\"{ \" (interleave \", \" pair-strings) \" }\"]\n         [\"{\" (indent (interleave \",\\n\" pair-strings)) \"}\"]))\n\n\n(def qescape (content)\n     (if (not (exists? content)) \"\"\n\n         (string? content) (content.replace (regex \"\\\"\" 'g) \"\\\\\\\"\")\n\n         (and (not (defined? content.unquote) (= content.type 'output)))\n           (do\n            (set content 'contents (qescape content.contents))\n            content)\n\n         (list? content) (map content qescape)\n\n         content))\n\n(def ^quote (content)\n     (if (string? content) (\"\\\"\" (qescape content) \"\\\"\")\n         [\"[\\\"\"\n           (qescape (transpile content))\n           \"\\\"]\"]))\n\n(def ^unquote (content)\n     { type 'output contents [ \"\\\", \" (transpile content) \", \\\"\"] unquote true })\n\n(def ^debug (val)\n     (set sibilant 'debug (eval (output-formatter (transpile val)))) null)",";; (def flatten-output (nodes)\n;;      (inject [] nodes\n;;              (#(collector item)\n;;                (if (list? item) (apply flatten-output item)\n;;                   (if \n                                \n\n(def node? (thing type)\n     (and\n      (exists? thing)\n      (= 'object (typeof thing))\n      (string? thing.type)\n      (or (undefined? type) (= thing.type type))\n      (thing.has-own-property 'contents)))\n\n(def empty-node? (item)\n     (if (node? item) (empty-node? item.contents)\n         (list? item) (all? item empty-node?)\n         (string? item) (item.match (regex \"^\\\\s*$\"))\n         (or (= null item)\n             (undefined? item)\n             (= false item))))\n\n(def compact-node (item)\n     (if (node? item) (do\n                       (set item 'contents (compact-node item.contents))\n                       (if (and item.contents item.contents.length) item null))\n         (list? item) (do\n                       (var compacted (compact (map item compact-node)))\n                       (if (and compacted compacted.length) compacted null))\n         (if (or (= item \"\") (= item false)) null item)))\n\n(def recurse-transpile (node)\n     (if (list? node) (map node recurse-transpile)\n         (and (node? node) (!= 'output node.type)) (transpile node)\n         (and (node? node) (= 'output node.type)) (do\n                                                   (set node 'contents (recurse-transpile node.contents))\n                                                   node)\n         node))\n\n(def transpile (node preprocessor)\n     (if\n      (string? node)\n      (assign node { type 'js token node contents [] modifiers []})\n\n      (number? node)\n      (assign node { type 'number token (node.to-string) contents [] modifiers []}))\n     \n     (if (list? node) node\n         (exists? node) (do\n                         (var transpiler (or (get transpile node.type) transpile.default))\n                         (each (modifier) (or node.modifiers [])\n                               (var reader-macro (get reader-macros modifier.type)\n                                    previous-transpiler transpiler)\n                               (when (undefined? reader-macro) (console.log \"NO READER MACRO\" modifier.type))\n                               (assign transpiler (#(node) (reader-macro node previous-transpiler))))\n                         (var result (transpiler node preprocessor))\n                         (var result-node (recurse-transpile (if (node? result) result\n                                                                 { contents result type 'output })))\n                         (set result-node\n                              'contents (compact (flatten result-node.contents))\n                              'source node)\n\n                         (when sibilant.debug\n                               (console.log (prettify node)\n                                            (red \"->\")\n                                            (prettify result-node)))\n\n                         (set node 'transpiled result-node)\n\n                         \n                         (if (empty-node? result-node) undefined\n                             result-node))))\n\n\n(set sibilant 'transpile transpile)\n\n(var reader-macros {})\n\n(def reader-macros.hat (node transpiler) (\"macros.\" (transpiler node)))\n(def reader-macros.tick (node transpiler)\n     (macros.quote (transpiler node)))\n(def reader-macros.at (node transpiler)\n     (macros.unquote (transpiler node)))\n(def reader-macros.dots (node transpiler)\n     (transpiler node))\n\n(def transpile.default (node)\n     node.token)\n\n(def transpile.output (node)\n     node)\n\n(def transpile.number (node)\n     (send (parse-float (node.token.replace (regex \",\" 'g) \"\")) to-string))\n\n(def transpile.root (node)\n     (if (= 1 node.contents.length)\n         (transpile (first node.contents))\n         (interleave \"\\n\" (compact (map node.contents as-statement)))))\n\n(def transpile.expression (node preprocessor)\n     (if node.contents.length\n         (do\n          (var head (first node.contents)\n               args (rest node.contents)\n               macro (get macros (output-formatter (transpile head))))\n\n          (when (exists? macro) (set head 'hint 'macro))\n\n          (when (and head (= 'string head.type))\n                (assign macro macros.concat args node.contents))\n\n          (when (undefined? macro)\n                (assign macro macros.call args node.contents))\n\n          (macro.apply node args))\n\n         \"null\"))\n\n(def transpile.bracket (node)\n     (apply macros.list node.contents))\n(def transpile.brace (node) (apply macros.hash node.contents))\n\n(def transpile.literal (node)\n     (var string node.token)\n     (inject (chain string\n                    (replace (regex \"\\\\*\" 'g) \"_\")\n                    (replace (regex \"\\\\?$\") \"__QUERY\")\n                    (replace (regex \"!$\") \"__BANG\"))\n             (string.match (regex \"-(.)\" 'g))\n             (#(return-string match)\n               (return-string.replace match\n                                      (send (second match) to-upper-case)))))\n\n(def transpile.string (node)\n     (chain node.token (split \"\\n\")\n            (join \"\\\\n\\\" +\\n\\\"\")))\n\n(def transpile.comment (node) null)\n\n","(def sibilize (input)\n     (sibilant.initialize)\n     (output-formatter (transpile (restructure (parse input)))))\n\n(def sourcemap (input)\n     (sibilant.initialize)\n     (sourcemapper (transpile (restructure (parse input)))))\n\n(set sibilant 'sibilize sibilize)\n\n(def sibilant.version ()\n     (get (sibilant.package-info) 'version))\n\n(def sibilant.strip-shebang (data)\n     (data.replace (regex \"^#!.*\\\\n\") \"\\n\"))\n\n(set sibilant 'file 'eval.sibilant)\n\n(def with-dir-and-file (dir file fn)\n     (var before { dir sibilant.dir\n                   file sibilant.file })\n     (set sibilant\n          'dir  dir\n          'file file)\n\n     (var retval (fn))\n\n     (set sibilant\n          'dir  before.dir\n          'file before.file)\n\n     retval)\n\n(set sibilant 'source-cache {})\n\n(def sibilant.sibilize-file (file-name)\n     (output-formatter (sibilant.transpile-file file-name)))\n\n(def sibilant.sibilize-json (file-name)\n     (sibilant.initialize)\n     (var before sibilant.macros.hash.quote-keys)\n     (set sibilant.macros.hash 'quote-keys true)\n     (var content (sibilant.sibilize-file file-name))\n     (set sibilant.macros.hash 'quote-keys before)\n     content)\n\n(def sibilant.macros.include (file)\n     (sibilant.include (eval (output-formatter (transpile file)))))\n\n"]}