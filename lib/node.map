{"version":3,"sources":["/Users/jbr/code/sibilant/src/node.sibilant"],"names":[],"mappings":"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","sourcesContent":["(var sibilant exports\n     util     (require 'util)\n     path     (require 'path)\n     fs       (require 'fs)\n     error    (#(str) (throw str))\n     inspect  util.inspect)\n\n(set sibilant 'dir (process.cwd))\n\n\n(def sibilant.transpile-file (file-name)\n     (with-dir-and-file (path.dirname file-name) file-name\n                        (#>\n                         (var source (sibilant.strip-shebang\n                                      (fs.read-file-sync file-name \"utf8\")))\n\n                         (set sibilant.source-cache file-name source)\n                         (sibilant.initialize)\n                         (transpile (restructure (parse source))))))\n\n\n(def sibilant.sourcemap-file (file-name)\n     (with-dir-and-file (path.dirname file-name) file-name\n                        (#> (sourcemap\n                             (sibilant.strip-shebang\n                              (fs.read-file-sync file-name \"utf8\"))))))\n\n\n(set require.extensions \".sibilant\"\n     (#(module filename)\n       (var content (sibilant.sibilize-file filename))\n       (module.*compile content filename)))\n\n(set require.extensions \".son\"\n     (#(module filename)\n       (var content (sibilant.sibilize-json filename))\n       (set module 'exports (JSON.parse content))))\n\n\n(def sibilant.package-info ()\n     (var fs (require 'fs))\n     (JSON.parse (fs.read-file-sync\n                  (concat **dirname \"/../package.json\"))))\n\n(def sibilant.version-string ()\n     (var package (sibilant.package-info)\n          path (require 'path))\n     (concat package.name \" version \" package.version\n             \"\\n(at \" (path.join **dirname \"..\") \")\"))\n\n\n(def sibilant.initialize ()\n     (unless (or sibilant.loaded? sibilant.loading?)\n             (set sibilant 'loading? true)\n             (sibilant.load-macros)\n             (delete sibilant.loading?)\n             (set sibilant 'loaded? true)))\n     \n(def sibilant.load-macros ()\n     (sibilant.include (path.normalize (concat **dirname \"/../include/macros\"))))\n\n\n(def sibilant.include (file)\n     (when (not (file.match (regex \"\\\\.(sibilant|son)$\")))\n           (assign file (concat file \".sibilant\")))\n\n     (when (file.match (regex \"^\\\\.\\\\.?/\"))\n           (assign file (concat sibilant.dir \"/\" file)))\n\n     (var resolved-file\n          (try (require.resolve file)\n               (error (\"Failed to resolve file for inclusion: \" file))))\n\n     (sibilant.transpile-file resolved-file))\n"]}