{"version":3,"sources":["/Users/jbr/code/sibilant/src/repl.sibilant","/Users/jbr/code/sibilant/include/macros.sibilant"],"names":[],"mappings":"AAAW,OAAD,CAAS,oBAAT,CAAV,CAAE,OAAF,E;AACA;;AAEA,IAAK,KAAL,GAAiB,iBAAD,EAAhB;AAAA,IACK,MADL,GACgB,cADhB;AAAA,IAEK,EAFL,GAEiB,OAAD,CAAS,CAAC,EAAD,CAAT,CAFhB;AAAA,IAGK,QAHL,GAGoC,OAAD,CAAS,CAAC,QAAD,CAAT,CAAnB,CAAE,eAAF,CAAuC,KAAvC,EAA6C,MAA7C,CAHhB;AAAA,IAIK,QAJL,GAIiB,OAAD,CAAS,YAAT,CAJhB;AAAA,IAKK,OALL,GAKgB,SALhB;AAAA,IAMK,SANL,GAMgB,EANhB;AAAA,IAOK,IAPL,GAOiB,OAAD,CAAS,CAAC,IAAD,CAAT,CAPhB,C;AASA,IAAK,aAAL;AAAA;AAAA;AAAA,EACK,IAAK,OAAL,GAAc,gBAAD,EAAb,CADL;AAAA,EAEU,MCkekD,SAAR,GDlezB,CAAS,WAAD,EAAR,GAAsB,OAAtB,CCkeyB,CDpepD;AAAA,EAGU,OCiekD,OAAR,GDhejC,MCgeiC,CDje/C;AAAA,EAAK,OCiekD,QAAR,GD/djC,OC+diC,CDpepD;AAAA,EAMK;AAAA,ICiU4B,SDjUlB,GCiUkB,IDjUd,MCiUc,E;MAAA,ODjUF,OC8d6B,CD9drB,GC8dqB,CAAR,GD9dJ,MAAL,CAAY,GAAZ,CC8dS,C;QA7JnB;AAAA,WDjUd,MCiUc,CDjU5B;AAAA,MANL;AAAA,SAOK,OAPL;AAAA,G;AASQ,OAAR,GAAiB,aAAD,EAAhB,C;AAEA,IAAK,aAAL;AAAA;AAAA;AAAA,EACM,kBAAD,CACC,CAAQ;AAAA,QAAI,CAAG,gBAAH,GAAqB,EAArB,CAAJ;AAAA,MC6V8B,OD5V1B,CAAC,KAAD,GAAQ,eAAD,CAAkB,GAAlB,CAAP,CC4V0B,CD7V9B;AAAA;AAAA,MC+ViC,OD7V7B;AAAA,YAAI,CAAG,gBAAH,GAAqB,CAArB,CAAJ;AAAA,UC2V0B,OD3VE,SC2VF,CD3V1B;AAAA;AAAA,UC6V6B,OD7VU,UC6VV,CD7V7B;AAAA;AAAA,UC6V6B,CD/VjC;AAAA;AAAA,MAAR,GAGQ,IAHR,CADD,CADL;AAAA,SAMM,eAAD,EANL;AAAA,G;AAQA,IAAK,UAAL,yBAAkB,GAAlB;AAAA;AAAA;AAAA,EACK,IAAK,MAAL,GAAa,EAAb,CADL;AAAA,EAGK;AAAA;AAAA,MAEU,SAAR,GAAmB,CAAQ,SAAR,GAAmB,GAAnB,CAAnB;AAAA,MACQ,MADR,GACiB,iBAAD,CAAmB,SAAnB,CADhB,CCoNmB;AAAA,MDjNnB,IAAK,MAAL,GAAa;AAAA,YAAI,CAAU,MAAP,CCaG,CDbH,CAAH,KAAmB,GAAnB,CAAJ;AAAA,UC+UwB,OD3Ub,wBAHP,CAEO,kBAAD,CADE,qBAAD,CAAwB,CAAC,MAAD,CAAxB,CAAD,CADA,MACA,CACA,CAFN,CC8UoB,CD/UxB;AAAA;AAAA,UCiV2B,OD5UvB,MC4UuB,CDjV3B;AAAA;AAAA,UAAb,CCiNmB;AAAA,MD1MlB,WAAD,CAAa,MAAb,CC0MmB;AAAA,MDzMnB,IAAK,MAAL,GAAa,eAAD,CAAmB,MAAnB,EAA2B,OAA3B,EAAmC,eAAnC,CAAZ,CCyMmB;AAAA,MDxMd,gBCgcgD,CDhc/B,CCgc+B,CAAR,GDhcrB,SCgcqB,CAxP1B;AAAA,MDvMnB;AAAA,YAAM,CCyF+B,ODzFrB,MAAV,KCyF+C,CAAC,SAAD,CDzF/C,CAAN;AAAA,UCmJ0B,ODlJnB,YAAD,CAAc,CAAC,UAAD,GACE,YAAD,CAAc,MAAd,CADD,GACuB,IADvB,CAAd,CCkJoB,CDnJ1B;AAAA;AAAA,UCuMmB;AAAA,MDpMd,OC4bgD,CD5bxC,GC4bwC,CAAR,GD5b5B,MC4b4B,CAxP1B;AAAA,aDnMX,SAAR,GAAmB,EAAnB,CAnBF;AAAA;AAAA,MCwNqB,ODnMnB;AAAA,YAAK,eAAD,CAAiB,gBAAjB,CAAJ;AAAA,UAEa,SAAR,GAAmB,CAAQ,SAAR,GAAmB,GAAnB,CAAnB,CC6TgC;AAAA,iBD5T/B,sBAAD,EC4TgC,CD/TrC;AAAA;AAAA,UAKU,gBCob2C,CDpb1B,CCob0B,CAAR,GDpbhB,SCobgB,CAxHL;AAAA,UD3TlC,YAAD,CAAc,CAAQ,OAAR,GAAgB,IAAhB,CAAd,CC2TmC;AAAA,iBD1T1B,SAAT,GAAoB,EAApB,CAPL;AAAA;AAAA,UCmMmB,CDxNrB;AAAA;AAAA,MAHL;AAAA,SAgCM,aAAD,EAhCL;AAAA,G;AAkCC,WAAD,CAAa,CAAC,IAAD,CAAb,EAAmB,UAAnB,C;AAEC,WAAD,CAAa,CAAC,KAAD,CAAb,EAAoB,aAApB,C;AAEC,aAAD,E","sourcesContent":["(.install (require \"source-map-support\"))\n(meta \"//# sourceMappingURL=./repl.map\\n\")\n\n(var input      (process.open-stdin)\n     output     process.stdout\n     vm         (require 'vm)\n     readline   (.create-interface (require 'readline) input output)\n     sibilant   (require \"./sibilant\")\n     context    undefined\n     cmd-buffer \"\"\n     util       (require 'util))\n\n(def create-context ()\n     (var context (vm.create-context))\n     (set module 'filename (concat (process.cwd) \"/exec\"))\n     (set context\n          'module  module\n          'require require)\n     (each-key key global (set context key (get global key)))\n     context)\n\n(assign context (create-context))\n\n(def display-prompt ()\n     (readline.set-prompt\n      (concat (if (> cmd-buffer.length 10)\n                  (\"...\" (cmd-buffer.slice -10))\n                  (if (> cmd-buffer.length 0) cmd-buffer \"sibilant\"))\n              \"> \"))\n     (readline.prompt))\n\n(def handle-line (cmd)\n     (var js-line \"\")\n\n     (try\n      (do\n       (assign cmd-buffer (concat cmd-buffer cmd)\n               js-line (sibilant.sibilize cmd-buffer))\n\n       (var safe-js (if (= (first js-line) \"{\")\n                        (pipe js-line\n                              ((sibilant.resolve-macro 'scoped))\n                              (sibilant.transpile)\n                              (sibilant.output-formatter))\n                        js-line))\n\n       (console.log js-line)\n       (var result (vm.run-in-context safe-js context \"sibilant-repl\"))\n       (set readline.history 0 cmd-buffer)\n       (when (defined? result)\n             (output.write (\"result: \"\n                            (util.inspect result) \"\\n\")))\n       (set context \"_\" result)\n       (assign cmd-buffer \"\"))\n      (do\n       (if (e.message.match /unclosed node:/)\n           (do\n            (assign cmd-buffer (concat cmd-buffer \" \"))\n            (readline.history.shift))\n           (do\n            (set readline.history 0 cmd-buffer)\n            (output.write (concat e.stack \"\\n\"))\n            (assign  cmd-buffer \"\")))))\n     (display-prompt))\n\n(readline.on 'line handle-line)\n\n(readline.on 'close input.destroy)\n\n(display-prompt)\n","(namespace core)\n\n(macro ternary (cond if-true if-false)\n       [\"(\" (transpile cond) \") ? \"\n            (transpile if-true) \" : \"\n            (transpile if-false)])\n\n(macro join (glue arr)\n       [\"(\" (transpile arr) \").join(\" (transpile glue) \")\"])\n\n(macro set (arr ...kv-pairs)\n       (interleave \"\\n\" (bulk-map kv-pairs\n                                  (#(k v)\n                                    (as-statement [\"(\" (transpile arr) \")\"\n                                                    \"[\" (transpile k) \"] = \" (transpile v) ])))))\n\n(macro var (...pairs)\n       (as-statement\n        [\"var \"\n         (interleave \",\\n    \"\n               (bulk-map pairs\n                         (#(name value)\n                           [ (transpile name) \" = \" (transpile value) ])))\n         ]))\n\n(macro get (obj ...keys)\n       [\"(\" (transpile obj) \")\" (map keys (#(key)\n                                            [\"[\" (transpile key) \"]\"]))])\n\n(macro alias-macro (current-macro-name desired-macro-name)\n       (var current-macro-name (output-formatter (transpile current-macro-name))\n            desired-macro-name (output-formatter (transpile desired-macro-name)))\n       (set sibilant.macros.namespace\n            desired-macro-name (get sibilant.macros.namespace current-macro-name))\n       null)\n\n(macro send (object method ...args)\n       [(transpile object) \".\" (transpile method)\n               \"(\" (interleave \", \" (map args transpile)) \")\"])\n\n(macro apply (fn arglist)\n       '(.apply @fn this @arglist))\n\n(macro cons (first rest)\n       [\"[ \" (transpile first) \" ].concat(\" (transpile rest) \")\"])\n\n(macro append (list ...additional)\n       '(.concat @list (list ...@additional)))\n\n(macro length (arr)\n       '(get @arr 'length))\n\n(macro first (arr) '(get @arr 0))\n(macro second (arr) '(get @arr 1))\n(macro third (arr) '(get @arr 2))\n(macro fourth (arr) '(get @arr 3))\n(macro fifth (arr) '(get @arr 4))\n(macro sixth (arr) '(get @arr 5))\n(macro seventh (arr) '(get @arr 6))\n(macro eighth (arr) '(get @arr 7))\n(macro ninth (arr) '(get @arr 8))\n(macro rest (arr) '(.slice @arr 1))\n\n(macro last (arr) '(first (.slice @arr -1)))\n\n\n(macro = (a b) [ (transpile a) \" === \" (transpile b) ])\n(macro +   (...args)\n       [\"(\" (interleave \" + \" (map args transpile)) \")\"])\n(macro -   (...args)\n       [\"(\" (interleave \" - \" (map args transpile)) \")\"])\n(macro *   (...args)\n       [\"(\" (interleave \" * \" (map args transpile)) \")\"])\n(macro /   (...args)\n           [\"(\" (interleave \" / \" (map args transpile)) \")\"])\n(macro or  (...args)\n       [\"(\" (interleave \" || \" (map args transpile)) \")\"])\n\n(macro and (...args)\n       (ternary (= 1 (length args)) (transpile (first args))\n                [\"(\" (interleave \" && \" (map args transpile)) \")\"]))\n\n(macro mod (...args)\n       [\"(\" (interleave \" % \" (map args transpile)) \")\"])\n\n(macro infix-comparator (comparator args)\n       [\"(\" (interleave \" && \"\n                  (map (args.slice 0 -1)\n                       (#(item index)\n                         [ item \" \" comparator \" \" (get args (+ 1 index))])))\n            \")\"])\n\n(macro >  (...args) (^infix-comparator  \">\"  (map args transpile)))\n(macro <  (...args) (^infix-comparator  \"<\"  (map args transpile)))\n(macro <= (...args) (^infix-comparator \"<=\"  (map args transpile)))\n(macro >= (...args) (^infix-comparator \">=\"  (map args transpile)))\n(macro != (...args) (^infix-comparator \"!==\" (map args transpile)))\n\n(macro pow (base exponent)\n       '(Math.pow @base @exponent))\n\n(macro incr-by (item increment)\n       [ (transpile item) \" += \" (transpile increment)])\n\n(macro incr (item)\n       [\"((\" (transpile item) \")++)\"])\n\n(macro decr (item)\n       [\"((\" (transpile item) \")--)\"])\n\n(macro new (...args)\n       [\"(new \" '(call ...@args) \")\"])\n\n(macro regex (string glim)\n       '(new RegExp @string @(or glim 'undefined)))\n\n(macro timestamp ()\n       [\"\\\"\" (.to-string (new Date)) \"\\\"\"])\n\n(macro zero? (item) '(= @item 0))\n\n(macro empty? (arr)\n       [\"((\" (transpile arr) \").length === 0)\"])\n\n(macro odd? (number)\n       '(= 1 (mod @number 2)))\n\n(macro even? (number)\n       '(= 0 (mod @number 2)))\n\n(macro typeof (thing) [\"typeof \" (transpile thing)])\n\n\n(macro function? (...things)\n       '(and ...@(map things (#(thing) '(= (typeof @thing) 'function)))))\n(macro undefined? (...things)\n       '(and ...@(map things (#(thing) '(= (typeof @thing) 'undefined)))))\n(macro defined? (...things)\n       '(and ...@(map things (#(thing) '(!= (typeof @thing) 'undefined)))))\n(macro number? (...things)\n       '(and ...@(map things (#(thing) '(= (typeof @thing) 'number)))))\n\n(macro if (arg truebody falsebody)\n       [\"(function() {\"\n        (indent [\"if (\" (transpile arg) \") {\"\n                        (indent '(do ...@truebody))\n                        \"} else {\"\n                        (indent '(do ...@falsebody))\n                        \"}\"])\n         \"})()\"])\n\n(macro pipe (...calls)\n       (inject undefined calls\n         (#(value item)\n           (var cloned (clone item))\n           (if (undefined? value)\n               cloned\n               (merge-into cloned\n                           { contents [ (first cloned.contents)\n                                        value\n                                        ...(rest cloned.contents) ] })))))\n\n(macro comment (...contents)\n       (map contents (#(content)\n                       [\"// \"(recurse-map (transpile content)\n                                    (#(item)\n                                      (ternary item\n                                               (pipe item\n                                                     (transpile)\n                                                     (output-formatter)\n                                                     (.replace (regex \"\\n\" 'g) \"\\n// \"))\n                                               null)))])))\n\n(macro = (first-thing ...other-things)\n       (var transpiled-first-thing (transpile first-thing))\n       [\"(\" (interleave \" &&\\n \"\n                  (map other-things\n                       (#(thing)\n                         [ transpiled-first-thing\n                                 \" === \"\n                                 (transpile thing) ])))\n            \")\"])\n\n\n(macro string? (thing)\n       [\"typeof(\" (transpile thing) \") === \\\"string\\\"\"])\n\n(macro list? (thing)\n       (var transpiled (transpile thing))\n       [\"((\" transpiled \") && typeof (\" transpiled \") === \\\"object\\\" && (\"\n               transpiled \").constructor.name === \\\"Array\\\")\"])\n\n\n(macro when (arg ...body)\n       [\"(function() {\"\n        (indent [\"if (\" (transpile arg) \") {\"\n                        (indent '(do ...@body))\n                        \"}\"])\n        \"})()\"])\n\n\n(macro not (exp)\n       [\"(!\" (transpile exp) \")\"])\n\n(macro unless (arg ...body)\n       [\"(function() {\"\n        (indent [\"if (\" '(not @arg) \") {\"\n                        (indent '(do ...@body))\n                        \"}\"])\n        \"})()\"])\n\n\n(macro slice (arr start end)\n       '(.slice @arr @start @end))\n\n(macro inspect (...args)\n       (interleave \" + \\\"\\\\n\\\" + \"\n             (map args\n                  (#(arg)\n                    [\"\\\"\" arg \":\\\" + \" (transpile arg)]))))\n\n(macro each (item array ...body)\n       '(.for-each @array\n              (lambda @{ node this args item } ...@body)))\n\n(macro assign (...args)\n       (interleave \"\\n\"\n             (bulk-map args (#(name value)\n                              (as-statement [ (transpile name) \" = \"\n                                                    (transpile value)])))))\n\n\n\n(macro macro-expand (name)\n       (var macro (get macros (output-formatter (transpile name))))\n       (if macro\n           (macro.to-string)\n           \"undefined\"))\n\n(macro throw (...string)\n       [\"throw new Error (\" (interleave \" \" (map string transpile)) \")\"])\n\n(macro as-boolean (expr)\n       [\"(!!(\" (transpile expr) \"))\"])\n\n(macro try (tryblock catchblock)\n       [\"(function() {\"\n        (indent [\"try {\"\n                 (indent '(do @tryblock))\n                 \"} catch (e) {\"\n                 (indent '(do @catchblock))\n                 \"}\"])\n         \"})()\"])\n\n(macro log-pretty (label arg)\n       (var node this)\n       (when (undefined? arg)\n             (assign arg label\n                     label [\"\\\"\" (prettify label false) \"\\\"\"]))\n       `(console.log (concat @[\"\\\"\" node.file \":\" node.line \"\\\"\"] \" \" @label \" = \" (prettify @arg))))\n(alias-macro log-pretty pretty-log)\n\n\n(macro state (...pairs)\n       (if (= 1 (length pairs))\n           (get sibilant.state (output-formatter (transpile (first pairs))))\n           (do (bulk-map pairs (#(k v) (set sibilant.state (output-formatter (transpile k)) (eval (output-formatter (transpile v))))))\n               null)))\n\n(macro symbol ()\n       (var symbol-count (or (get sibilant.state 'symbol-count) 0)\n            new-symbol-count (+ 1 symbol-count))\n       (^state 'symbol-count new-symbol-count)\n       [\"$_symbol\" new-symbol-count \"_$\"])\n\n(macro while (condition ...block)\n       (var symbol (^symbol))\n       '(scoped-without-source\n         (var @symbol)\n         @[\"while (\" (transpile condition) \") {\"\n           (indent '(assign @symbol (scoped-without-source ...@block)))\n            \"}\"]\n         @symbol))\n\n(macro until (condition ...block)\n       '(while (not @condition) ...@block))\n\n(macro match? (regexp string)\n       '(.match @string @regexp))\n\n(macro match-regex? (string regexp-string glim)\n       '(match? (regex @regexp-string @glim) @string))\n\n(macro replace (string regexp-string replacement)\n       '(.replace @string\n              (regex @regexp-string)\n              @replacement))\n\n(macro replace-all (string regexp-string replacement)\n       '(.replace @string (regex @regexp-string 'g) @replacement))\n\n(macro thunk (...body)\n       '(lambda @{ node this args [] }\n       ...@(map-node body\n                 (#(node)\n                   (if (node? node 'arg-placeholder)\n                       '(argument @(replace node.token \"^#\" \"\"))\n                       node)))))\n(alias-macro thunk #>)\n\n(macro keys (obj)\n       '(Object.keys @obj))\n\n(macro delete (...objects)\n       (interleave \"\\n\" (map objects (#(obj)\n                                 (as-statement [\"delete \" (transpile obj)])))))\n\n(macro delmacro (...macro-names)\n       (each (macro-name) macro-names\n             (delete (get sibilant.macros.namespace (output-formatter (transpile macro-name)))))\n       null)\n(alias-macro delmacro delete-macro)\n\n\n(macro rename-macro (current-macro-name desired-macro-name)\n       (^alias-macro current-macro-name desired-macro-name)\n       (^delmacro current-macro-name)\n       null)\n\n(macro arguments ()\n       [\"(Array.prototype.slice.apply(arguments))\"])\n\n(macro argument (n)\n       '(get arguments @n))\n\n(macro scoped (...body)\n       '(call (lambda @{node this args []} ...@body)))\n\n(macro scoped-without-source (...body)\n       [\"(function() {\" (indent '(do ...@body)) \"})()\"])\n       \n\n(macro each-key (as obj ...body)\n       '(scoped-without-source\n         @[\"for (var \" (transpile as) \" in \" (transpile obj) \") \"\n            (as-statement '(scoped-without-source ...@body))\n            ]\n         @obj))\n\n(macro switch (obj ...cases)\n       [\"(function() {\"\n         (indent [\"switch(\" (transpile obj) \") {\"\n                   (map cases (#(case-def)\n                                (var case-name-node (first case-def.contents)\n                                     case-labels (if (or (node? case-name-node 'expression)\n                                                         (node? case-name-node 'bracket))\n                                                     case-name-node.contents\n                                                     [case-name-node])\n                                     case-string (interleave \"\\n\" (map case-labels (#(c)\n                                                                                     (if (= 'default c.token)\n                                                                                         \"default:\"\n                                                                                         [\"case \" (transpile c) \":\"])))))\n                                [\"\\n\" case-string (indent '(do ...@(rest case-def.contents)))]))\n                   \"}\"])\n         \"})()\"])\n\n(macro if (...args)\n       [\"(function() {\"\n        (indent\n         (interleave \" else \"\n               (bulk-map args\n                         (#(cond val)\n                           (if (!= (typeof val) 'undefined)\n                                 [\"if (\" (transpile cond) \") {\"\n                                   (indent '(do @val))\n                                   \"}\"]\n                                 [\"{\" (indent '(do @cond)) \"}\"])))))\n        \"})()\"])\n\n(macro chain (object ...calls)\n       (if (= 0 calls.length) (transpile object)\n           (= 1 calls.length) '(send @object ...@(get (first calls) 'contents))\n           (do\n            (var lines (map calls (#(call index)\n                                    [\".\" (transpile (first call.contents))\n                                         \"(\" (interleave \", \" (map (rest call.contents) transpile)) \")\"])))\n\n            [ (transpile object)\n              (first lines)\n              \"\\n  \"\n              (recurse-indent\n               (interleave \"\\n\" (rest lines)))])))\n\n(macro chainable (...names)\n       (each (name) names\n             '(macro @name (target ...calls)\n                     '(chain (call @name @target) ...@calls))))\n\n(macro let (args body)\n       [\"let (\"\n         (interleave \", \" (bulk-map args\n                   (#(k v)\n                     [ (transpile k) \" = \" (transpile v) ])))\n         (if (undefined? body) \");\"\n             [\") {\" (indent (transpile body)) \"}\"])])\n\n(macro instance-of? (item type)\n       [\"(\" (transpile item) \" instanceof \" (transpile type) \")\"])\n\n(macro slice (list begin end)\n       [\"Array.prototype.slice.call(\" (transpile list)\n                                      \", \" (or (transpile begin) 0)\n                                      (if (defined? end) (\", \" (transpile end) \")\") \")\")])\n\n(macro includes? (list item)\n       '(pipe @list (.index-of @item) (!= -1)))\n\n(macro excludes? (list item)\n       '(pipe @list (.index-of @item) (= -1)))\n\n(macro exists? (thing)\n       '(and (defined? @thing) (!= @thing null)))\n\n(macro with-state (k v ...body)\n       (var before (^state k))\n       (^state k v)\n       (var return-value\n            (interleave \"\\n\" (map body transpile)))\n       (^state k before)\n       return-value)\n\n(macro join (glue arr)\n       (if (and (defined? glue) (undefined? arr))\n           (assign arr glue glue undefined))\n       [\"(\" (transpile arr) \").join(\" (if glue (transpile glue) \"\\\"\\\"\") \")\"])\n\n(macro var (...pairs)\n       (var destructured [])\n       (bulk-map pairs (#(lhs rhs)\n                         (switch lhs.type\n                                 ('bracket\n                                  (var symbol (^symbol))\n                                  (destructured.push [symbol (transpile rhs)])\n                                  (each (item index) lhs.contents\n                                        (destructured.push [(transpile item) '(get @symbol @index)]))\n                                  (destructured.push [symbol 'undefined]))\n                                 ('brace\n                                  (var symbol (^symbol))\n                                  (destructured.push [symbol (transpile rhs)])\n                                  (each (item index) lhs.contents\n                                        (var tr-item (transpile item))\n                                        (destructured.push [tr-item '(get @symbol @[\"\\\"\" tr-item \"\\\"\"])]))\n                                  (destructured.push [symbol 'undefined]))\n\n                                 (default\n                                  (destructured.push [(transpile lhs)\n                                                       (if rhs (transpile rhs) 'undefined)])))))\n\n       (as-statement\n        [\"var \" (interleave \",\\n    \"\n           (map destructured\n                (#(pair)\n                  [(first pair) \" = \" (second pair)]\n                  )))]))\n\n(macro default (...pairs)\n       (interleave \"\\n\" (bulk-map pairs (#(name value)\n                                  '(assign @name (ternary (defined? @name) @name @value))))))\n\n\n(macro import-namespace (namespace)\n       (var namespace-as-string (output-formatter (transpile namespace)))\n       (unless (sibilant.macros.namespaces.has-own-property namespace-as-string)\n               (set sibilant.macros.namespaces namespace-as-string {}))\n       (sibilant.macros.search-path.unshift namespace-as-string)\n       undefined)\n\n(macro namespace (namespace)\n       `(import-namespace @namespace)\n       (set sibilant.macros 'namespace (get sibilant.macros.namespaces (output-formatter (transpile namespace))))\n       undefined)\n\n(macro has-key? (object key)\n       `(.has-own-property @object @key))\n\n(macro get (obj ...keys)\n       [(transpile obj)\n         (map keys (#(key)\n                     (var transpiled (transpile key)\n                          output (output-formatter transpiled))\n\n                     (if (match-regex? output \"^\\\"[a-zA-Z0-9]+\\\"$\")\n                         [\".\" (replace-all output \"\\\"\" \"\") ]\n                         [\"[\" transpiled \"]\"])))])\n\n(macro set (arr ...kv-pairs)\n       (interleave \"\\n\" (bulk-map kv-pairs (#(k v) `(assign (get @arr @k) @v)))))\n\n\n"]}