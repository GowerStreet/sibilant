{"version":3,"sources":["/Users/jbr/code/sibilant/src/repl.sibilant"],"names":[],"mappings":"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","sourcesContent":["(var input      (process.open-stdin)\n     output     process.stdout\n     vm         (require 'vm)\n     readline   (send (require 'readline) create-interface input output)\n     sibilant   (require \"./sibilant\")\n     context    undefined\n     cmd-buffer \"\"\n     util       (require 'util))\n\n(def create-context ()\n     (var context (vm.create-context))\n     (set module 'filename (concat (process.cwd) \"/exec\"))\n     (set context\n          'module  module\n          'require require)\n     (each-key key global (set context key (get global key)))\n     context)\n\n(assign context (create-context))\n\n(def display-prompt ()\n     (readline.set-prompt\n      (concat (if (> cmd-buffer.length 10)\n                  (\"...\" (cmd-buffer.slice -10))\n                  (if (> cmd-buffer.length 0) cmd-buffer \"sibilant\"))\n              \"> \"))\n     (readline.prompt))\n\n(def handle-line (cmd)\n     (var js-line \"\")\n\n     (try\n      (do\n       (assign cmd-buffer (concat cmd-buffer cmd)\n               js-line (sibilant.sibilize cmd-buffer))\n\n       (var safe-js (if (= (first js-line) \"{\") (sibilant.macros.scoped js-line) js-line))\n       (console.log safe-js)\n       (var result (vm.run-in-context safe-js context \"sibilant-repl\"))\n       (set readline.history 0 cmd-buffer)\n       (when (defined? result)\n             (output.write (\"result: \"\n                            (util.inspect result) \"\\n\")))\n       (set context \"_\" result)\n       (assign cmd-buffer \"\"))\n      (do\n       (if (e.message.match /unexpected EOF/)\n           (do\n            (assign cmd-buffer (concat cmd-buffer \" \"))\n            (readline.history.shift))\n           (do\n            (set readline.history 0 cmd-buffer)\n            (output.write (concat e.stack \"\\n\"))\n            (assign  cmd-buffer \"\")))))\n     (display-prompt))\n\n(readline.on 'line handle-line)\n\n(readline.on 'close input.destroy)\n\n(display-prompt)\n"]}