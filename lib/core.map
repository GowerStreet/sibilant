{"version":3,"sources":["/Users/jbr/code/sibilant/src/core.sibilant","/Users/jbr/code/sibilant/include/macros.sibilant"],"names":[],"mappings":"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","sourcesContent":["(def sibilant.macros.namespaces.core.return (token)\n     (when sibilant.debug (console.log \"returning \" (prettify token)))\n     (var default-return (as-statement [\"return \" (transpile token)]))\n     (if (and token token.contents token.contents.length)\n         (switch (get (first token.contents) 'token)\n                 (('return 'throw 'do) (transpile token))\n\n                 ('delete\n                  (var delete-macro (get macros 'delete))\n                  (if (< token.contents.length 3) default-return\n                      [ (as-statement (apply delete-macro (token.contents.slice 1 -1)))\n                        \"\\nreturn \"\n                        (as-statement (call delete-macro (last token.contents)))]))\n\n                 ('assign\n                  (if (< token.contents.length 4) default-return\n                      [ (apply sibilant.macros.namespaces.core.assign\n                               (token.contents.slice 1 (- token.contents.length 2)))\n                        \"\\nreturn \"\n                        (apply sibilant.macros.namespaces.core.assign (token.contents.slice -2))]))\n\n                 ('var\n                  [ (transpile token) \"\\nreturn \" (transpile (if (even? token.contents.length)\n                                                                 (last token.contents)\n                                                                 (first (token.contents.slice -2))))])\n\n                 ('set\n                  (if (< token.contents.length 5) default-return\n                      (do\n                       (var obj (second token.contents)\n                            non-return-part (token.contents.slice 2 (- token.contents.length 2))\n                            return-part (token.contents.slice -2))\n                       (non-return-part.unshift obj)\n                       (return-part.unshift obj)\n                       [ (sibilant.macros.namespaces.core.set ...non-return-part)\n                         \"\\nreturn \"\n                         (sibilant.macros.namespaces.core.set ...return-part)])))\n\n                 (default default-return))\n         default-return))\n\n\n(def sibilant.macros.namespaces.core.do (...body)\n     (if (= 1 body.length) (sibilant.macros.namespaces.core.return (first body))\n\n         body.length [ (interleave \"\\n\" (map (body.slice 0 -1) (#> (as-statement #0))))\n                       \"\\n\"\n                       (sibilant.macros.namespaces.core.return (last body)) ]\n         \"\"))\n\n(def sibilant.macros.namespaces.core.empty-list () 'null)\n\n(def sibilant.macros.namespaces.core.def (fn-name args ...body)\n     (if (undefined? fn-name) (error \"invalid function definition. missing name.\")\n         (undefined? args) (error \"invalid function definition. missing arguments or return value.\"))\n\n     (var fn-name-tr (transpile fn-name) this-node this)\n\n     (as-statement [ (if (match? (regex \"\\\\.\") (output-formatter fn-name-tr)) \"\" \"var \")\n                     fn-name-tr \" = \"\n                     (sibilant.macros.namespaces.core.lambda { name fn-name args args node this-node } ...body )\n                     ] ))\n\n(def sibilant.macros.namespaces.core.macro (name args ...body)\n     (var name-tr (output-formatter (transpile name))\n          options { name name args args node this}\n          js (output-formatter (sibilant.macros.namespaces.core.lambda options ...body)))\n\n     (when sibilant.debug (console.log js))\n     \n     (try (set sibilant.macros.namespace name-tr (eval js))\n          (error (\"error in parsing macro \"\n                  (sibilant.pretty-print name) \":\\n\" js)))\n\n     undefined)\n\n(def sibilant.macros.namespaces.core.meta (...body)\n     (var js (output-formatter (sibilant.macros.namespaces.core.scoped ...body)))\n     (when sibilant.debug (console.log js))\n     (output-formatter (eval js)))\n\n\n(def sibilant.macros.namespaces.core.concat (...args)\n     [\"(\" (interleave \" + \" (map args transpile)) \")\"])\n\n(def sibilant.macros.namespaces.core.reverse (arr)\n     (var reversed [])\n     (each (item) arr (reversed.unshift item))\n     reversed)\n\n(var reverse sibilant.macros.namespaces.core.reverse)\n\n(def sibilant.macros.namespaces.core.lambda (args-or-options ...body)\n     (when sibilant.debug\n           (console.log args-or-options))\n     (var args (or (get args-or-options 'args) args-or-options)\n          body (or (get args-or-options 'body) body)\n          args (if (node? args 'expression) args.contents\n                   (and (node? args) (empty? body)) (do (assign body [ args ]) [])\n                   args)\n          name (when args-or-options.name\n                     (chain (output-formatter (transpile args-or-options.name))\n                            (replace (regex \"\\\\W+\" 'g) \"$\")\n                            (concat \"$\")))\n          rest (detect args\n                       (#> (node? #0 'dots))))\n\n     (var this-node this\n          node (detect\n                [ args-or-options.node this-node args-or-options.name args (first body) ]\n                (#(n) (and (node? n) (get n 'file)))))\n     [\"(function\" (if name (\" \" name) \"\") \"(\"\n       (interleave \", \" (map args transpile)) \") {\"\n       (if (or args-or-options.name node)\n           (indent [\"/*\"\n                     (if args-or-options.name (\" \" (sibilant.pretty-print args-or-options.name false)) \"\")\n                     (if node (\" \" node.file \":\" node.line \":\" node.col) \"\")\n                     \" */\"]) \"\")\n       (when (exists? rest)\n             (indent (as-statement [\"var \" (transpile rest)\n                       \" = Array.prototype.slice.call(arguments, \"\n                       (- args.length 1) \")\"])))\n\n       (indent (apply sibilant.macros.namespaces.core.do body))\n       \"})\"])\n\n(set sibilant.macros.namespaces.core \"#\" sibilant.macros.namespaces.core.lambda)\n\n(def sibilant.macros.namespaces.core.quoted-hash (...pairs)\n     (var cached-quote-value sibilant.macros.namespaces.core.hash.quote-keys)\n     (set sibilant.macros.namespaces.core.hash 'quote-keys true)\n     (var value (sibilant.macros.namespaces.core.hash ...pairs))\n     (set sibilant.macros.namespaces.core.hash 'quote-keys cached-quote-value)\n     value)\n\n(def sibilant.macros.namespaces.core.hash (...pairs)\n     (when (odd? pairs.length)\n           (error (\"odd number of key-value pairs in hash: \"\n                   (call inspect pairs))))\n\n     (var quote-keys sibilant.macros.namespaces.core.hash.quote-keys\n          pair-strings (bulk-map pairs (#(key value)\n                                         [ (if (and quote-keys (not (node? key 'string)))\n                                               [\"\\\"\" (transpile key) \"\\\"\"]\n                                               (transpile key))\n                                           \": \"\n                                           (transpile value)])))\n     (if (>= 1 pair-strings.length)\n         [\"{ \" (interleave \", \" pair-strings) \" }\"]\n         [\"{\" (indent (interleave \",\\n\" pair-strings)) \"}\"]))\n\n\n(def sibilant.macros.namespaces.core.quote (content)\n     (if (string? content) (\"\\\"\" (qescape content) \"\\\"\")\n         (number? content) (sibilant.macros.namespaces.core.quote (content.to-string))\n         (node? content 'literal) [\"\\\"\" (transpile content) \"\\\"\"]\n         \n         (node? content 'expression)\n         (if (length (keys (find-unquotes content)))\n             (sibilant.macros.namespaces.core.call 'macros.expand-quote.call 'this (sibilant.macros.namespaces.core.quote content.node-id)\n                    (apply sibilant.macros.namespaces.core.quoted-hash (alternating-keys-and-values (find-unquotes content))))\n             [\"\\\"\" (map-node (transpile content) qescape) \"\\\"\"])\n\n         (node? content 'bracket)\n         (if (length (keys (find-unquotes content)))\n             (sibilant.macros.namespaces.core.call 'macros.expand-quote.call 'this (sibilant.macros.namespaces.core.quote content.node-id)\n                    (apply sibilant.macros.namespaces.core.quoted-hash (alternating-keys-and-values (find-unquotes content))))\n             (sibilant.macros.namespaces.core.list ...(map content.contents sibilant.macros.namespaces.core.quote)))\n\n         (node? content 'brace)\n         (if (length (keys (find-unquotes content)))\n             (sibilant.macros.namespaces.core.call 'macros.expand-quote.call 'this (sibilant.macros.namespaces.core.quote content.node-id)\n                    (apply sibilant.macros.namespaces.core.quoted-hash (alternating-keys-and-values (find-unquotes content))))\n             (sibilant.macros.namespaces.core.hash ...(map content.contents sibilant.macros.namespaces.core.quote)))\n\n         (do\n          (console.log (\"unknown content\" (prettify content)))\n          content)))\n\n(def sibilant.macros.namespaces.core.debug (val)\n     (set sibilant 'debug (eval (output-formatter (transpile val)))) null)\n\n(def sibilant.macros.namespaces.core.expand-quote (node-id expansions)\n     (var expanded-nodes\n          (map-node-for-quote-expansion (get sibilant.node-cache node-id) expansions))\n\n     (transpile expanded-nodes))\n\n\n(def sibilant.macros.namespaces.core.list (...args)\n       (var arg-segments [])\n       (if (empty? args) \"[]\"\n           (do\n            (def simple-list (args)\n                 [\"[ \" (interleave \", \" (map args (#(arg) arg.transpiled))) \" ]\"])\n\n            (args.for-each (#(arg)\n                  (if (node? arg 'dots) (arg-segments.push {transpiled (transpile arg)})\n                   (list? (last arg-segments)) (.push (last arg-segments) { transpiled (transpile arg)})\n                   (arg-segments.push [{transpiled (transpile arg)}]))))\n\n            (assign arg-segments (map arg-segments\n                                      (#(segment)\n                                        (if (list? segment)\n                                            (simple-list segment)\n                                            segment.transpiled))))\n\n            (if (= 1 (length arg-segments))\n                (first arg-segments)\n                [(first arg-segments) \".concat(\" (interleave \", \" (rest arg-segments))\")\"]))))\n\n\n(def sibilant.macros.namespaces.core.call (fn-name ...args)\n     (if (any? args (#> (node? #0 'dots)))\n           (macros.apply fn-name (macros.list ...args))\n           [ (transpile fn-name)\n                   \"(\" (interleave \", \" (map args transpile)) \")\" ]))\n\n(def sibilant.macros.namespaces.core.dots (...contents)\n     (transpile contents))\n\n(def sibilant.macros.namespaces.core.include (...files)\n     (pipe files\n           (.map (#(file)\n                   (sibilant.with-default-search-path\n                    (#> (pipe file\n                              (transpile)\n                              (output-formatter)\n                              (eval)\n                              (sibilant.include))))))\n           (interleave \"\\n\")))\n","(namespace core)\n\n(macro ternary (cond if-true if-false)\n       [\"(\" (transpile cond) \") ? \"\n            (transpile if-true) \" : \"\n            (transpile if-false)])\n\n(macro join (glue arr)\n       [\"(\" (transpile arr) \").join(\" (transpile glue) \")\"])\n\n(macro set (arr ...kv-pairs)\n       (interleave \"\\n\" (bulk-map kv-pairs\n                                  (#(k v)\n                                    (as-statement [\"(\" (transpile arr) \")\"\n                                                    \"[\" (transpile k) \"] = \" (transpile v) ])))))\n\n(macro var (...pairs)\n       (as-statement\n        [\"var \"\n         (interleave \",\\n    \"\n               (bulk-map pairs\n                         (#(name value)\n                           [ (transpile name) \" = \" (transpile value) ])))\n         ]))\n\n(macro get (obj ...keys)\n       [\"(\" (transpile obj) \")\" (map keys (#(key)\n                                            [\"[\" (transpile key) \"]\"]))])\n\n(macro alias-macro (current-macro-name desired-macro-name)\n       (var current-macro-name (output-formatter (transpile current-macro-name))\n            desired-macro-name (output-formatter (transpile desired-macro-name)))\n       (set sibilant.macros.namespace\n            desired-macro-name (get sibilant.macros.namespace current-macro-name))\n       null)\n\n(macro send (object method ...args)\n       [(transpile object) \".\" (transpile method)\n               \"(\" (interleave \", \" (map args transpile)) \")\"])\n\n(macro apply (fn arglist)\n       '(.apply @fn this @arglist))\n\n(macro cons (first rest)\n       [\"[ \" (transpile first) \" ].concat(\" (transpile rest) \")\"])\n\n(macro append (list ...additional)\n       '(.concat @list (list ...@additional)))\n\n(macro length (arr)\n       '(get @arr 'length))\n\n(macro first (arr) '(get @arr 0))\n(macro second (arr) '(get @arr 1))\n(macro third (arr) '(get @arr 2))\n(macro fourth (arr) '(get @arr 3))\n(macro fifth (arr) '(get @arr 4))\n(macro sixth (arr) '(get @arr 5))\n(macro seventh (arr) '(get @arr 6))\n(macro eighth (arr) '(get @arr 7))\n(macro ninth (arr) '(get @arr 8))\n(macro rest (arr) '(.slice @arr 1))\n\n(macro last (arr) '(first (.slice @arr -1)))\n\n\n(macro = (a b) [ (transpile a) \" === \" (transpile b) ])\n(macro +   (...args)\n       [\"(\" (interleave \" + \" (map args transpile)) \")\"])\n(macro -   (...args)\n       [\"(\" (interleave \" - \" (map args transpile)) \")\"])\n(macro *   (...args)\n       [\"(\" (interleave \" * \" (map args transpile)) \")\"])\n(macro /   (...args)\n           [\"(\" (interleave \" / \" (map args transpile)) \")\"])\n(macro or  (...args)\n       [\"(\" (interleave \" || \" (map args transpile)) \")\"])\n\n(macro and (...args)\n       (ternary (= 1 (length args)) (transpile (first args))\n                [\"(\" (interleave \" && \" (map args transpile)) \")\"]))\n\n(macro mod (...args)\n       [\"(\" (interleave \" % \" (map args transpile)) \")\"])\n\n(macro infix-comparator (comparator args)\n       [\"(\" (interleave \" && \"\n                  (map (args.slice 0 -1)\n                       (#(item index)\n                         [ item \" \" comparator \" \" (get args (+ 1 index))])))\n            \")\"])\n\n(macro >  (...args) (^infix-comparator  \">\"  (map args transpile)))\n(macro <  (...args) (^infix-comparator  \"<\"  (map args transpile)))\n(macro <= (...args) (^infix-comparator \"<=\"  (map args transpile)))\n(macro >= (...args) (^infix-comparator \">=\"  (map args transpile)))\n(macro != (...args) (^infix-comparator \"!==\" (map args transpile)))\n\n(macro pow (base exponent)\n       '(Math.pow @base @exponent))\n\n(macro incr-by (item increment)\n       [ (transpile item) \" += \" (transpile increment)])\n\n(macro incr (item)\n       [\"((\" (transpile item) \")++)\"])\n\n(macro decr (item)\n       [\"((\" (transpile item) \")--)\"])\n\n(macro new (...args)\n       [\"(new \" '(call ...@args) \")\"])\n\n(macro regex (string glim)\n       '(new RegExp @string @(or glim 'undefined)))\n\n(macro timestamp ()\n       [\"\\\"\" (.to-string (new Date)) \"\\\"\"])\n\n(macro zero? (item) '(= @item 0))\n\n(macro empty? (arr)\n       [\"((\" (transpile arr) \").length === 0)\"])\n\n(macro odd? (number)\n       '(= 1 (mod @number 2)))\n\n(macro even? (number)\n       '(= 0 (mod @number 2)))\n\n(macro typeof (thing) [\"typeof \" (transpile thing)])\n\n\n(macro function? (...things)\n       '(and ...@(map things (#(thing) '(= (typeof @thing) 'function)))))\n(macro undefined? (...things)\n       '(and ...@(map things (#(thing) '(= (typeof @thing) 'undefined)))))\n(macro defined? (...things)\n       '(and ...@(map things (#(thing) '(!= (typeof @thing) 'undefined)))))\n(macro number? (...things)\n       '(and ...@(map things (#(thing) '(= (typeof @thing) 'number)))))\n\n(macro if (arg truebody falsebody)\n       [\"(function() {\"\n        (indent [\"if (\" (transpile arg) \") {\"\n                        (indent '(do ...@truebody))\n                        \"} else {\"\n                        (indent '(do ...@falsebody))\n                        \"}\"])\n         \"})()\"])\n\n(macro pipe (...calls)\n       (inject undefined calls\n         (#(value item)\n           (var cloned (clone item))\n           (if (undefined? value)\n               cloned\n               (merge-into cloned\n                           { contents [ (first cloned.contents)\n                                        value\n                                        ...(rest cloned.contents) ] })))))\n\n(macro comment (...contents)\n       (map contents (#(content)\n                       [\"// \"(recurse-map (transpile content)\n                                    (#(item)\n                                      (ternary item\n                                               (pipe item\n                                                     (transpile)\n                                                     (output-formatter)\n                                                     (.replace (regex \"\\n\" 'g) \"\\n// \"))\n                                               null)))])))\n\n(macro = (first-thing ...other-things)\n       (var transpiled-first-thing (transpile first-thing))\n       [\"(\" (interleave \" &&\\n \"\n                  (map other-things\n                       (#(thing)\n                         [ transpiled-first-thing\n                                 \" === \"\n                                 (transpile thing) ])))\n            \")\"])\n\n\n(macro string? (thing)\n       [\"typeof(\" (transpile thing) \") === \\\"string\\\"\"])\n\n(macro list? (thing)\n       (var transpiled (transpile thing))\n       [\"((\" transpiled \") && typeof (\" transpiled \") === \\\"object\\\" && (\"\n               transpiled \").constructor.name === \\\"Array\\\")\"])\n\n\n(macro when (arg ...body)\n       [\"(function() {\"\n        (indent [\"if (\" (transpile arg) \") {\"\n                        (indent '(do ...@body))\n                        \"}\"])\n        \"})()\"])\n\n\n(macro not (exp)\n       [\"(!\" (transpile exp) \")\"])\n\n(macro unless (arg ...body)\n       [\"(function() {\"\n        (indent [\"if (\" '(not @arg) \") {\"\n                        (indent '(do ...@body))\n                        \"}\"])\n        \"})()\"])\n\n\n(macro slice (arr start end)\n       '(.slice @arr @start @end))\n\n(macro inspect (...args)\n       (interleave \" + \\\"\\\\n\\\" + \"\n             (map args\n                  (#(arg)\n                    [\"\\\"\" arg \":\\\" + \" (transpile arg)]))))\n\n(macro each (item array ...body)\n       '(.for-each @array\n              (lambda @{ node this args item } ...@body)))\n\n(macro assign (...args)\n       (interleave \"\\n\"\n             (bulk-map args (#(name value)\n                              (as-statement [ (transpile name) \" = \"\n                                                    (transpile value)])))))\n\n\n\n(macro macro-expand (name)\n       (var macro (get macros (output-formatter (transpile name))))\n       (if macro\n           (macro.to-string)\n           \"undefined\"))\n\n(macro throw (...string)\n       [\"throw new Error (\" (interleave \" \" (map string transpile)) \")\"])\n\n(macro as-boolean (expr)\n       [\"(!!(\" (transpile expr) \"))\"])\n\n(macro try (tryblock catchblock)\n       [\"(function() {\"\n        (indent [\"try {\"\n                 (indent '(do @tryblock))\n                 \"} catch (e) {\"\n                 (indent '(do @catchblock))\n                 \"}\"])\n         \"})()\"])\n\n(macro log-pretty (label arg)\n       (var node this)\n       (when (undefined? arg)\n             (assign arg label\n                     label [\"\\\"\" (prettify label false) \"\\\"\"]))\n       `(console.log (concat @[\"\\\"\" node.file \":\" node.line \"\\\"\"] \" \" @label \" = \" (prettify @arg))))\n(alias-macro log-pretty pretty-log)\n\n\n(macro state (...pairs)\n       (if (= 1 (length pairs))\n           (get sibilant.state (output-formatter (transpile (first pairs))))\n           (do (bulk-map pairs (#(k v) (set sibilant.state (output-formatter (transpile k)) (eval (output-formatter (transpile v))))))\n               null)))\n\n(macro symbol ()\n       (var symbol-count (or (get sibilant.state 'symbol-count) 0)\n            new-symbol-count (+ 1 symbol-count))\n       (^state 'symbol-count new-symbol-count)\n       [\"$_symbol\" new-symbol-count \"_$\"])\n\n(macro while (condition ...block)\n       (var symbol (^symbol))\n       '(scoped-without-source\n         (var @symbol)\n         @[\"while (\" (transpile condition) \") {\"\n           (indent '(assign @symbol (scoped-without-source ...@block)))\n            \"}\"]\n         @symbol))\n\n(macro until (condition ...block)\n       '(while (not @condition) ...@block))\n\n(macro match? (regexp string)\n       '(.match @string @regexp))\n\n(macro match-regex? (string regexp-string glim)\n       '(match? (regex @regexp-string @glim) @string))\n\n(macro replace (string regexp-string replacement)\n       '(.replace @string\n              (regex @regexp-string)\n              @replacement))\n\n(macro replace-all (string regexp-string replacement)\n       '(.replace @string (regex @regexp-string 'g) @replacement))\n\n(macro thunk (...body)\n       '(lambda @{ node this args [] }\n       ...@(map-node body\n                 (#(node)\n                   (if (node? node 'arg-placeholder)\n                       '(argument @(replace node.token \"^#\" \"\"))\n                       node)))))\n(alias-macro thunk #>)\n\n(macro keys (obj)\n       '(Object.keys @obj))\n\n(macro delete (...objects)\n       (interleave \"\\n\" (map objects (#(obj)\n                                 (as-statement [\"delete \" (transpile obj)])))))\n\n(macro delmacro (...macro-names)\n       (each (macro-name) macro-names\n             (delete (get sibilant.macros.namespace (output-formatter (transpile macro-name)))))\n       null)\n(alias-macro delmacro delete-macro)\n\n\n(macro rename-macro (current-macro-name desired-macro-name)\n       (^alias-macro current-macro-name desired-macro-name)\n       (^delmacro current-macro-name)\n       null)\n\n(macro arguments ()\n       [\"(Array.prototype.slice.apply(arguments))\"])\n\n(macro argument (n)\n       '(get arguments @n))\n\n(macro scoped (...body)\n       '(call (lambda @{node this args []} ...@body)))\n\n(macro scoped-without-source (...body)\n       [\"(function() {\" (indent '(do ...@body)) \"})()\"])\n       \n\n(macro each-key (as obj ...body)\n       '(scoped-without-source\n         @[\"for (var \" (transpile as) \" in \" (transpile obj) \") \"\n            (as-statement '(scoped-without-source ...@body))\n            ]\n         @obj))\n\n(macro switch (obj ...cases)\n       [\"(function() {\"\n         (indent [\"switch(\" (transpile obj) \") {\"\n                   (map cases (#(case-def)\n                                (var case-name-node (first case-def.contents)\n                                     case-labels (if (node? case-name-node 'expression 'bracket)\n                                                     case-name-node.contents\n                                                     [case-name-node])\n                                     case-string (interleave \"\\n\" (map case-labels (#(c)\n                                                                                     (if (= 'default c.token)\n                                                                                         \"default:\"\n                                                                                         [\"case \" (transpile c) \":\"])))))\n                                [\"\\n\" case-string (indent '(do ...@(rest case-def.contents)))]))\n                   \"}\"])\n         \"})()\"])\n\n(macro if (...args)\n       [\"(function() {\"\n        (indent\n         (interleave \" else \"\n               (bulk-map args\n                         (#(cond val)\n                           (if (!= (typeof val) 'undefined)\n                                 [\"if (\" (transpile cond) \") {\"\n                                   (indent '(do @val))\n                                   \"}\"]\n                                 [\"{\" (indent '(do @cond)) \"}\"])))))\n        \"})()\"])\n\n(macro chain (object ...calls)\n       (if (= 0 calls.length) (transpile object)\n           (= 1 calls.length) '(send @object ...@(get (first calls) 'contents))\n           (do\n            (var lines (map calls (#(call index)\n                                    [\".\" (transpile (first call.contents))\n                                         \"(\" (interleave \", \" (map (rest call.contents) transpile)) \")\"])))\n\n            [ (transpile object)\n              (first lines)\n              \"\\n  \"\n              (recurse-indent\n               (interleave \"\\n\" (rest lines)))])))\n\n(macro chainable (...names)\n       (each (name) names\n             '(macro @name (target ...calls)\n                     '(chain (call @name @target) ...@calls))))\n\n(macro let (args body)\n       [\"let (\"\n         (interleave \", \" (bulk-map args\n                   (#(k v)\n                     [ (transpile k) \" = \" (transpile v) ])))\n         (if (undefined? body) \");\"\n             [\") {\" (indent (transpile body)) \"}\"])])\n\n(macro instance-of? (item type)\n       [\"(\" (transpile item) \" instanceof \" (transpile type) \")\"])\n\n(macro slice (list begin end)\n       [\"Array.prototype.slice.call(\" (transpile list)\n                                      \", \" (or (transpile begin) 0)\n                                      (if (defined? end) (\", \" (transpile end) \")\") \")\")])\n\n(macro includes? (list item)\n       '(pipe @list (.index-of @item) (!= -1)))\n\n(macro excludes? (list item)\n       '(pipe @list (.index-of @item) (= -1)))\n\n(macro exists? (thing)\n       '(and (defined? @thing) (!= @thing null)))\n\n(macro with-state (k v ...body)\n       (var before (^state k))\n       (^state k v)\n       (var return-value\n            (interleave \"\\n\" (map body transpile)))\n       (^state k before)\n       return-value)\n\n(macro join (glue arr)\n       (if (and (defined? glue) (undefined? arr))\n           (assign arr glue glue undefined))\n       [\"(\" (transpile arr) \").join(\" (if glue (transpile glue) \"\\\"\\\"\") \")\"])\n\n(macro var (...pairs)\n       (var destructured [])\n       (bulk-map pairs (#(lhs rhs)\n                         (switch lhs.type\n                                 ('bracket\n                                  (var symbol (^symbol))\n                                  (destructured.push [symbol (transpile rhs)])\n                                  (each (item index) lhs.contents\n                                        (destructured.push [(transpile item) '(get @symbol @index)]))\n                                  (destructured.push [symbol 'undefined]))\n                                 ('brace\n                                  (var symbol (^symbol))\n                                  (destructured.push [symbol (transpile rhs)])\n                                  (each (item index) lhs.contents\n                                        (var tr-item (transpile item))\n                                        (destructured.push [tr-item '(get @symbol @[\"\\\"\" tr-item \"\\\"\"])]))\n                                  (destructured.push [symbol 'undefined]))\n\n                                 (default\n                                  (destructured.push [(transpile lhs)\n                                                       (if rhs (transpile rhs) 'undefined)])))))\n\n       (as-statement\n        [\"var \" (interleave \",\\n    \"\n           (map destructured\n                (#(pair)\n                  [(first pair) \" = \" (second pair)]\n                  )))]))\n\n(macro default (...pairs)\n       (interleave \"\\n\" (bulk-map pairs (#(name value)\n                                  '(assign @name (ternary (defined? @name) @name @value))))))\n\n\n(macro import-namespace (namespace)\n       (var namespace-as-string (output-formatter (transpile namespace)))\n       (unless (sibilant.macros.namespaces.has-own-property namespace-as-string)\n               (set sibilant.macros.namespaces namespace-as-string {}))\n       (sibilant.macros.search-path.unshift namespace-as-string)\n       undefined)\n\n(macro namespace (namespace)\n       `(import-namespace @namespace)\n       (set sibilant.macros 'namespace (get sibilant.macros.namespaces (output-formatter (transpile namespace))))\n       undefined)\n\n(macro has-key? (object key)\n       `(.has-own-property @object @key))\n\n(macro get (obj ...keys)\n       [(transpile obj)\n         (map keys (#(key)\n                     (var transpiled (transpile key)\n                          output (output-formatter transpiled))\n\n                     (if (match-regex? output \"^\\\"[a-zA-Z0-9]+\\\"$\")\n                         [\".\" (replace-all output \"\\\"\" \"\") ]\n                         [\"[\" transpiled \"]\"])))])\n\n(macro set (arr ...kv-pairs)\n       (interleave \"\\n\" (bulk-map kv-pairs (#(k v) `(assign (get @arr @k) @v)))))\n\n\n"]}