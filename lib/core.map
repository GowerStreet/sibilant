{"version":3,"sources":["/Users/jbr/code/sibilant/src/core.sibilant","/Users/jbr/code/sibilant/include/macros.sibilant"],"names":[],"mappings":"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","sourcesContent":["(set sibilant 'tokens\n     { 'regex              \"(\\\\/(\\\\\\\\\\\\\\/|[^\\\\/\\\\n])+\\\\/[glim]*)\"\n       'comment            \"(;.*)\"\n       'string             \"(\\\"(([^\\\"]|(\\\\\\\\\\\"))*[^\\\\\\\\])?\\\")\"\n       'number             \"(-?[0-9][0-9.,]*)\"\n       'literal            \"(-?[*.$a-zA-Z^_][*.a-zA-Z0-9-_]*(\\\\?|!)?)\"\n       'special            \"([&']?)\"\n       'dots               \"(\\\\.+)\"\n       'other-char         \"([#><=!\\\\+\\\\/\\\\*-]+)\"\n       'open-paren         \"(\\\\()\"\n       'special-open-paren \"('?\\\\()\"\n       'close-paren        \"(\\\\))\"\n       'alternative-parens \"\\\\{|\\\\[|\\\\}|\\\\]\" })\n\n(set sibilant.tokens 'special-literal\n     (concat sibilant.tokens.special sibilant.tokens.literal))\n\n(set sibilant 'token-precedence\n     '( regex comment string number dots special-literal other-char\n              special-open-paren close-paren alternative-parens))\n\n(set sibilant\n     'ordered-regexes (map sibilant.token-precedence (#(x) (get sibilant.tokens x)))\n     'master-regex (regex (join \"|\" sibilant.ordered-regexes) 'g))\n\n(def tokenize (string)\n     (var tokens []\n          parse-stack [tokens]\n          specials [])\n\n     (def accept-token (token)\n          (send (get parse-stack 0) push token))\n\n     (def increase-nesting ()\n          (var new-arr [])\n          (accept-token new-arr)\n          (parse-stack.unshift new-arr))\n\n     (def decrease-nesting ()\n          (specials.shift)\n          (parse-stack.shift)\n          (when (zero? parse-stack.length)\n                (throw (\"unbalanced parens:\\n\"\n                        (call inspect parse-stack)))))\n\n     (def handle-token (token)\n          (var special (first token)\n               token token)\n\n          (switch special\n                  (\"'\"\n                   (assign token (token.slice 1))\n                   (increase-nesting)\n                   (accept-token 'quote))\n                  (\"^\" (assign token (\"macros.\"(token.slice 1)) special false))\n                  (default (assign special false)))\n\n          (specials.unshift (as-boolean special))\n\n          (switch token\n                  (\"(\" (increase-nesting))\n                  ((\"]\" \"}\" \")\") (decrease-nesting))\n\n                  (\"{\" (increase-nesting) (accept-token 'hash))\n                  (\"[\" (increase-nesting) (accept-token 'list))\n\n                  (default\n                   (if (token.match (regex (\"^\" sibilant.tokens.number \"$\")))\n                       (accept-token (parse-float (token.replace (regex \",\" 'g) \"\")))\n                       (accept-token token))))\n\n          (when (and (!= token \"(\")\n                     (specials.shift))\n                (decrease-nesting)))\n\n\n     (chain string\n            (match sibilant.master-regex)\n            (for-each handle-token))\n\n     (when (> parse-stack.length 1)\n           (error \"unexpected EOF, probably missing a )\\n\"\n                  (call inspect (first parse-stack))))\n     tokens)\n\n(set sibilant 'tokenize tokenize)\n\n(def indent (...args)\n     (concat\n      (chain (compact args)\n             (join \"\\n\")\n             (replace (regex \"^\") \"\\n\")\n             (replace (regex \"\\\\n\" 'g) \"\\n  \"))\n      \"\\n\"))\n\n(def construct-hash (array-of-arrays)\n     (inject {} array-of-arrays\n             (#(object item)\n               (set object (first item) (get object (second item)))\n               object)))\n\n(var macros {})\n(set sibilant 'macros macros)\n\n(set macros 'return\n     (#(token)\n       (var default-return (\"return \" (translate token)))\n\n       (if (list? token)\n           (switch (first token)\n                   ('(return throw do) (translate token))\n                   ('delete\n                    (var delete-macro (get macros 'delete))\n                    (if (< token.length 3) default-return\n                        (concat (apply delete-macro (token.slice 1 -1))\n                                \"\\nreturn \"\n                                (call delete-macro (last token)))))\n                   ('(setf assign)\n                     (if (< token.length 4) default-return\n                         (concat (apply ^setf\n                                        (token.slice 1 (- token.length 2)))\n                                 \"\\nreturn \"\n                                 (apply ^setf (token.slice -2)))))\n                   ('set\n                    (if (< token.length 5) default-return\n                        (do\n                         (var obj (second token)\n                              non-return-part (token.slice 2 (- token.length 2))\n                              return-part (token.slice -2))\n                         (non-return-part.unshift obj)\n                         (return-part.unshift obj)\n                         (concat (^set ...non-return-part)\n                                 \"\\nreturn \"\n                                 (^set ...return-part)))))\n                   (default default-return))\n           default-return)))\n\n(def as-statement (string)\n     (chain string (to-string) (replace (regex \";*\\\\s*$\") \";\")))\n\n(def ^statement (...args)\n     (concat (^call ...args) \";\\n\"))\n\n(def ^do (...body)\n     (var last-index (Math.max 0 (- body.length 1)))\n\n     (set body last-index ['return (get body last-index)])\n\n     (join \"\\n\"\n           (map body (#(arg) (concat (as-statement (translate arg)))))))\n\n(def ^empty-list () 'null)\n\n(def ^call (fn-name ...args)\n     (concat (translate fn-name)\n             \"(\" (join \", \" (map args translate)) \")\"))\n\n(def ^def (fn-name ...args-and-body)\n     (var fn-name-tr (translate fn-name)\n          start (if (match? (regex \"\\\\.\") fn-name-tr) \"\" \"var \"))\n     (concat start fn-name-tr \" = \"\n             (^lambda ...args-and-body)\n             \";\\n\"))\n\n(def ^macro (name ...args-and-body)\n     (var js (^lambda ...args-and-body)\n          name (translate name))\n     (try (set macros name (eval js))\n          (error (\"error in parsing macro \"\n                  name \":\\n\" (indent js))))\n     undefined)\n\n(def ^concat (...args)\n     (\"(\" (join \" + \" (map args translate)) \")\"))\n\n(def transform-args (arglist)\n     (var last null\n          args [])\n\n     (each (arg) arglist\n           (if (or (= \"&rest\" arg) (= \"...\" arg))\n               (assign last arg)\n               (do\n                (args.push [last arg])\n                (assign last null))))\n\n     (when last (error (\"unexpected argument modifier: \" last)))\n\n     args)\n\n\n(def ^reverse (arr)\n     (var reversed [])\n     (each (item) arr (reversed.unshift item))\n     reversed)\n\n(var reverse ^reverse)\n\n(def build-args-string (args rest)\n     (var args-string \"\")\n\n     (if (defined? rest)\n         (concat args-string\n                 \"var \" (translate (second rest))\n                 \" = Array.prototype.slice.call(arguments, \"\n                 args.length \");\\n\")\n         args-string))\n\n(def ^lambda (arglist ...body)\n     (var args (transform-args arglist)\n          rest (first (select args\n                              (#(arg)\n                                (or (= \"&rest\" (first arg))\n                                    (= \"...\" (first arg))))))\n          doc-string undefined)\n\n     (set body (- body.length 1)\n          [ 'return (get body (- body.length 1)) ])\n\n     (when (and (= (typeof (first body)) 'string)\n                (send (first body) match (regex \"^\\\".*\\\"$\")))\n           (assign doc-string\n                   (\"/* \" (eval (body.shift)) \" */\\n\")))\n\n     (var no-rest-args (if rest (args.slice 0 -1) args)\n          args-string (build-args-string no-rest-args rest))\n\n     (\"(function(\"\n      (join \", \" (map args (#(arg) (translate (second arg)))))\n      \") {\"\n      (indent doc-string args-string\n              (join \"\\n\"\n                    (map body\n                         (#(stmt)\n                           (var tstmt (translate stmt))\n                           (concat tstmt\n                                   (if (= (last tstmt) \";\") \"\" \";\"))))))\n      \"})\"))\n\n(set macros \"#\" ^lambda)\n\n(def ^quote (item)\n     (if (= \"Array\" item.constructor.name)\n         (\"[ \" (join \", \" (map item ^quote)) \" ]\")\n         (if (= 'number (typeof item)) item\n             (\"\\\"\" (literal item) \"\\\"\"))))\n\n(def ^hash (...pairs)\n     (when (odd? pairs.length)\n           (error (\"odd number of key-value pairs in hash: \"\n                   (call inspect pairs))))\n\n     (var quote-keys (and (exists? ^state) (^state 'quote-keys))\n          pair-strings (bulk-map pairs (#(key value)\n                                         (concat (if quote-keys\n                                                     (^quote (translate key))\n                                                     (translate key))\n                                                 \": \"\n                                                 (translate value)))))\n     (if (>= 1 pair-strings.length)\n         (\"{ \" (join \", \" pair-strings) \" }\")\n         (\"{\" (indent (join \",\\n\" pair-strings)) \"}\")))\n\n\n(def literal (string)\n     (inject (chain string\n                    (replace (regex \"\\\\*\" 'g) \"_\")\n                    (replace (regex \"\\\\?$\") \"__QUERY\")\n                    (replace (regex \"!$\") \"__BANG\"))\n             (string.match (regex \"-(.)\" 'g))\n             (#(return-string match)\n               (return-string.replace match\n                                      (send (second match) to-upper-case)))))\n\n\n\n(def translate-list-token (token hint)\n     (if (empty? token)\n         (^empty-list)\n         (do\n          (var first (translate (first token))\n               macro (get macros first))\n          (if (defined? macro)\n              (apply macro (token.slice 1))\n              (if (and (string? first) (= \"\\\"\" (first first)))\n                  (^concat ...token)\n                  (apply (get macros (or hint 'call)) token))))))\n\n(def translate-string-token (token hint)\n     (if (token.match (regex (\"^\" sibilant.tokens.literal \"$\")))\n         (literal token)\n         (if (token.match (regex \"^;\"))\n             (token.replace (regex \"^;+\") \"//\")\n             (if (= \"\\\"\" (first token) (last token))\n                 (chain token (split \"\\n\") (join \"\\\\n\\\" +\\n\\\"\"))\n                 token))))\n\n(def translate (token hint)\n     (var hint hint)\n     (when (and hint (undefined? (get macros hint)))\n           (assign hint undefined))\n\n     (when (defined? token)\n           (when (string? token) (assign token (token.trim)))\n           (try\n            (if (list? token)\n                (translate-list-token token hint)\n                (if (string? token)\n                    (translate-string-token token hint)\n                    token))\n            (error (concat e.stack \"\\n\"\n                           \"Encountered when attempting to process:\\n\"\n                           (indent (call inspect token)))))))\n\n\n(set sibilant 'translate translate)\n\n(def translate-all (contents)\n     (var buffer \"\")\n     (each (token) (tokenize contents)\n           (var line (translate token 'statement))\n           (when line (assign buffer (concat buffer line \"\\n\"))))\n     buffer)\n\n(set sibilant 'translate-all translate-all)\n","(macro join (glue arr)\n       [\"(\" (transpile arr) \").join(\" (transpile glue) \")\"])\n\n(macro set (arr ...kv-pairs)\n       (interleave \"\\n\" (bulk-map kv-pairs\n                                  (#(k v)\n                                    (as-statement [\"(\" (transpile arr) \")\"\n                                                    \"[\" (transpile k) \"] = \" (transpile v) ])))))\n\n(macro get (obj ...keys)\n       [\"(\" (transpile obj) \")\" (map keys (#(key) [\"[\" (transpile key) \"]\"]))])\n\n(macro var (...pairs)\n       (as-statement\n        [\"var \"\n         (interleave \",\\n    \"\n               (bulk-map pairs\n                         (#(name value)\n                           [ (transpile name) \" = \" (transpile value) ])))\n         ]))\n\n(macro alias-macro (current-macro-name desired-macro-name)\n       (var current-macro-name (output-formatter (transpile current-macro-name))\n            desired-macro-name (output-formatter (transpile desired-macro-name)))\n       (set macros desired-macro-name (get macros current-macro-name))\n       null)\n\n(macro send (object method ...args)\n       [(transpile object) \".\" (transpile method)\n               \"(\" (interleave \", \" (map args transpile)) \")\"])\n\n(macro apply (fn arglist)\n       '(send @fn apply this @arglist))\n\n(macro cons (first rest)\n       [\"[ \" (transpile first) \" ].concat(\" (transpile rest) \")\"])\n\n(macro append (list ...additional)\n       '(send @list concat (list ...@additional)))\n\n(macro length (arr)\n       '(get @arr 'length))\n\n(macro ternary (cond if-true if-false)\n       [\"(\" (transpile cond) \") ? \"\n            (transpile if-true) \" : \"\n            (transpile if-false)])\n\n(macro first (arr) '(get @arr 0))\n(macro second (arr) '(get @arr 1))\n(macro third (arr) '(get @arr 2))\n(macro fourth (arr) '(get @arr 3))\n(macro fifth (arr) '(get @arr 4))\n(macro sixth (arr) '(get @arr 5))\n(macro seventh (arr) '(get @arr 6))\n(macro eighth (arr) '(get @arr 7))\n(macro ninth (arr) '(get @arr 8))\n(macro rest (arr)\n       '(send @arr slice 1))\n\n(macro last (arr)\n       '(first (send @arr slice -1)))\n\n\n(macro = (a b) [ (transpile a) \" === \" (transpile b) ])\n(macro +   (...args)\n       [\"(\" (interleave \" + \" (map args transpile)) \")\"])\n(macro -   (...args)\n       [\"(\" (interleave \" - \" (map args transpile)) \")\"])\n(macro *   (...args)\n       [\"(\" (interleave \" * \" (map args transpile)) \")\"])\n(macro /   (...args)\n           [\"(\" (interleave \" / \" (map args transpile)) \")\"])\n(macro or  (...args)\n       [\"(\" (interleave \" || \" (map args transpile)) \")\"])\n\n(macro and (...args)\n       (ternary (= 1 (length args)) (transpile (first args))\n                [\"(\" (interleave \" && \" (map args transpile)) \")\"]))\n\n(macro mod (...args)\n       [\"(\" (interleave \" % \" (map args transpile)) \")\"])\n\n(macro infix-comparator (comparator args)\n       [\"(\" (interleave \" && \"\n                  (map (args.slice 0 -1)\n                       (#(item index)\n                         [ item \" \" comparator \" \" (get args (+ 1 index))])))\n            \")\"])\n\n(macro >  (...args) (macros.infix-comparator  \">\"  (map args transpile)))\n(macro <  (...args) (macros.infix-comparator  \"<\"  (map args transpile)))\n(macro <= (...args) (macros.infix-comparator \"<=\"  (map args transpile)))\n(macro >= (...args) (macros.infix-comparator \">=\"  (map args transpile)))\n(macro != (...args) (macros.infix-comparator \"!==\" (map args transpile)))\n\n(macro pow (base exponent)\n       '(Math.pow @base @exponent))\n\n(macro incr-by (item increment)\n       [ (transpile item) \" += \" (transpile increment)])\n\n(macro incr (item)\n       [\"((\" (transpile item) \")++)\"])\n\n(macro decr (item)\n       [\"((\" (transpile item) \")--)\"])\n\n(macro new (...args)\n       [\"(new \" '(call ...@args) \")\"])\n\n(macro regex (string glim)\n       '(new RegExp @string @(or glim 'undefined)))\n\n(macro timestamp ()\n       [\"\\\"\" (send (new Date) to-string) \"\\\"\"])\n\n(macro comment (...contents)\n       (map contents (#(content)\n                       [\"// \"(recurse-map (transpile content)\n                                    (#(item)\n                                      (ternary item\n                                               (send (output-formatter (transpile item)) replace\n                                                     (regex \"\\n\" 'g) \"\\n// \")\n                                               null)))])))\n\n(macro meta (body)\n       (eval (output-formatter (transpile body))))\n\n(macro zero? (item) '(= @item 0))\n\n(macro empty? (arr)\n       [\"((\" (transpile arr) \").length === 0)\"])\n\n(macro odd? (number)\n       '(= 1 (mod @number 2)))\n\n(macro even? (number)\n       '(= 0 (mod @number 2)))\n\n(macro typeof (thing) [\"typeof \" (transpile thing)])\n\n\n(macro function? (...things)\n       '(and ...@(map things (#(thing) '(= (typeof @thing) 'function)))))\n(macro undefined? (...things)\n       '(and ...@(map things (#(thing) '(= (typeof @thing) 'undefined)))))\n(macro defined? (...things)\n       '(and ...@(map things (#(thing) '(!= (typeof @thing) 'undefined)))))\n(macro number? (...things)\n       '(and ...@(map things (#(thing) '(= (typeof @thing) 'number)))))\n\n(macro if (arg truebody falsebody)\n       [\"(function() {\"\n        (indent [\"if (\" (transpile arg) \") {\"\n                        (indent '(do ...@truebody))\n                        \"} else {\"\n                        (indent '(do ...@falsebody))\n                        \"}\"])\n         \"})()\"])\n\n(macro = (first-thing ...other-things)\n       (var transpiled-first-thing (transpile first-thing))\n       [\"(\" (interleave \" &&\\n \"\n                  (map other-things\n                       (#(thing)\n                         [ transpiled-first-thing\n                                 \" === \"\n                                 (transpile thing) ])))\n            \")\"])\n\n\n(macro string? (thing)\n       [\"typeof(\" (transpile thing) \") === \\\"string\\\"\"])\n\n(macro list? (thing)\n       (var transpiled (transpile thing))\n       [\"((\" transpiled \") && typeof (\" transpiled \") === \\\"object\\\" && (\"\n               transpiled \").constructor.name === \\\"Array\\\")\"])\n\n\n(macro when (arg ...body)\n       [\"(function() {\"\n        (indent [\"if (\" (transpile arg) \") {\"\n                        (indent '(do ...@body))\n                        \"}\"])\n        \"})()\"])\n\n\n(macro not (exp)\n       [\"(!\" (transpile exp) \")\"])\n\n(macro unless (arg ...body)\n       [\"(function() {\"\n        (indent [\"if (\" '(not @arg) \") {\"\n                        (indent '(do ...@body))\n                        \"}\"])\n        \"})()\"])\n\n\n(macro slice (arr start end)\n       '(send @arr slice @start @end))\n\n(macro inspect (...args)\n       (interleave \" + \\\"\\\\n\\\" + \"\n             (map args\n                  (#(arg)\n                    [\"\\\"\" arg \":\\\" + \" (transpile arg)]))))\n\n(macro each (item array ...body)\n       '(send @array for-each\n              (lambda @{ node this args item } ...@body)))\n\n(macro assign (...args)\n       (interleave \"\\n\"\n             (bulk-map args (#(name value)\n                              (as-statement [ (transpile name) \" = \"\n                                                    (transpile value)])))))\n\n\n\n\n(macro macro-list ()\n       '(list @(Object.keys macros)))\n\n(macro macroexpand (name)\n       (var macro (get macros (transpile name)))\n       (if macro\n           (\"// macro: \" name \"\\n\" (macro.to-string))\n           \"undefined\"))\n\n\n(macro throw (...string)\n       [\"throw new Error (\" (interleave \" \" (map string transpile)) \")\"])\n\n(macro as-boolean (expr)\n       [\"(!!(\" (transpile expr) \"))\"])\n\n(macro try (tryblock catchblock)\n       [\"(function() {\"\n        (indent [\"try {\"\n                 (indent '(do @tryblock))\n                 \"} catch (e) {\"\n                 (indent '(do @catchblock))\n                 \"}\"])\n        \"})()\"])\n\n(macro state (...pairs)\n       (set macros.state 'data (or macros.state.data {}))\n\n       (if (= 1 (length pairs))\n           (get macros.state.data (output-formatter (transpile (first pairs))))\n           (do (bulk-map pairs (#(k v) (set macros.state.data (output-formatter (transpile k)) (eval (output-formatter (transpile v))))))\n               null)))\n\n(macro symbol ()\n       (var symbol-count (or (macros.state 'symbol-count) 0)\n            new-symbol-count (+ 1 symbol-count))\n       (macros.state 'symbol-count new-symbol-count)\n       [\"$_symbol\" new-symbol-count \"_$\"])\n\n(macro while (condition ...block)\n       (var symbol (macros.symbol))\n       '(scoped-without-source\n         (var @symbol)\n         @[\"while (\" (transpile condition) \") {\"\n           (indent '(assign @symbol (scoped-without-source ...@block)))\n            \"}\"]\n         @symbol))\n\n(macro until (condition ...block)\n       '(while (not @condition) ...@block))\n\n(macro thunk (...body)\n       '(lambda @{ node this args [] } ...@body))\n(alias-macro thunk #>)\n\n(macro keys (obj)\n       '(Object.keys @obj))\n\n(macro delete (...objects)\n       (interleave \"\\n\" (map objects (#(obj)\n                                 (as-statement [\"delete \" (transpile obj)])))))\n\n(macro delmacro (...macro-names)\n       (each (macro-name) macro-names\n             (delete (get macros (output-formatter (transpile macro-name)))))\n       null)\n(alias-macro delmacro delete-macro)\n\n\n(macro rename-macro (current-macro-name desired-macro-name)\n       (macros.alias-macro current-macro-name desired-macro-name)\n       (macros.delmacro current-macro-name)\n       null)\n\n(macro arguments ()\n       [\"(Array.prototype.slice.apply(arguments))\"])\n\n(macro scoped (...body)\n       '(call (lambda @{node this args []} ...@body)))\n\n(macro scoped-without-source (...body)\n       [\"(function() {\" (indent '(do ...@body)) \"})()\"])\n       \n\n(macro each-key (as obj ...body)\n       '(scoped-without-source\n         @[\"for (var \" (transpile as) \" in \" (transpile obj) \") \"\n            (as-statement '(scoped-without-source ...@body))\n            ]\n         @obj))\n\n(macro match? (regexp string)\n       '(send @string match @regexp))\n\n(macro switch (obj ...cases)\n       [\"(function() {\"\n         (indent [\"switch(\" (transpile obj) \") {\"\n                   (map cases (#(case-def)\n                                (var case-name-node (first case-def.contents)\n                                     case-labels (if (or (node? case-name-node 'expression)\n                                                         (node? case-name-node 'bracket))\n                                                     case-name-node.contents\n                                                     [case-name-node])\n                                     case-string (interleave \"\\n\" (map case-labels (#(c)\n                                                                                     (if (= 'default c.token)\n                                                                                         \"default:\"\n                                                                                         [\"case \" (transpile c) \":\"])))))\n                                [\"\\n\" case-string (indent '(do ...@(rest case-def.contents)))]))\n                   \"}\"])\n         \"})()\"])\n\n(macro if (...args)\n       [\"(function() {\"\n        (indent\n         (interleave \" else \"\n               (bulk-map args\n                         (#(cond val)\n                           (if (!= (typeof val) 'undefined)\n                                 [\"if (\" (transpile cond) \") {\"\n                                   (indent '(do @val))\n                                   \"}\"]\n                                 [\"{\" (indent '(do @cond)) \"}\"])))))\n        \"})()\"])\n\n(macro chain (object ...calls)\n       (if (= 0 calls.length) (transpile object)\n           (= 1 calls.length) '(send @object ...@(get (first calls) 'contents))\n           (do\n            (var lines (map calls (#(call index)\n                                    [\".\" (transpile (first call.contents))\n                                         \"(\" (interleave \", \" (map (rest call.contents) transpile)) \")\"])))\n\n            [ (transpile object)\n              (first lines)\n              \"\\n  \"\n              (recurse-indent\n               (interleave \"\\n\" (rest lines)))])))\n\n(macro chainable (...names)\n       (each (name) names\n             '(macro @name (target ...calls)\n                     '(chain (call @name @target) ...@calls))))\n\n(macro let (args body)\n       [\"let (\"\n         (interleave \", \" (bulk-map args\n                   (#(k v)\n                     [ (transpile k) \" = \" (transpile v) ])))\n         (if (undefined? body) \");\"\n             [\") {\" (indent (transpile body)) \"}\"])])\n\n(macro instance-of? (item type)\n       [\"(\" (transpile item) \" instanceof \" (transpile type) \")\"])\n\n(macro slice (list begin end)\n       [\"Array.prototype.slice.call(\" (transpile list)\n                                      \", \" (or (transpile begin) 0)\n                                      (if (defined? end) (\", \" (transpile end) \")\") \")\")])\n\n(macro includes? (list item)\n       '(!= -1 (send @list index-of @item)))\n\n(macro excludes? (list item)\n       '(= -1 (send @list index-of @item)))\n\n(macro exists? (thing)\n       '(and (defined? @thing) (!= @thing null)))\n\n(macro with-state (k v ...body)\n       (var before (macros.state k))\n       (macros.state k v)\n       (var return-value\n            (interleave \"\\n\" (map body transpile)))\n       (macros.state k before)\n       return-value)\n\n(macro join (glue arr)\n       (if (and (defined? glue) (undefined? arr))\n           (assign arr glue glue undefined))\n       [\"(\" (transpile arr) \").join(\" (if glue (transpile glue) \"\\\"\\\"\") \")\"])\n\n(macro var (...pairs)\n       (var destructured [])\n       (bulk-map pairs (#(lhs rhs)\n                         (switch lhs.type\n                                 ('bracket\n                                  (var symbol (macros.symbol))\n                                  (destructured.push [symbol (transpile rhs)])\n                                  (each (item index) lhs.contents\n                                        (destructured.push [(transpile item) '(get @symbol @index)]))\n                                  (destructured.push [symbol 'undefined]))\n                                 ('brace\n                                  (var symbol (macros.symbol))\n                                  (destructured.push [symbol (transpile rhs)])\n                                  (each (item index) lhs.contents\n                                        (var tr-item (transpile item))\n                                        (destructured.push [tr-item '(get @symbol @[\"\\\"\" tr-item \"\\\"\"])]))\n                                  (destructured.push [symbol 'undefined]))\n\n                                 (default\n                                  (destructured.push [(transpile lhs)\n                                                       (if rhs (transpile rhs) 'undefined)])))))\n\n       (as-statement\n        [\"var \" (interleave \",\\n    \"\n           (map destructured\n                (#(pair)\n                  [(first pair) \" = \" (second pair)]\n                  )))]))\n\n\n(debug false)"]}