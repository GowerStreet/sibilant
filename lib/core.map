{"version":3,"sources":["/Users/jbr/code/sibilant/src/core.sibilant","/Users/jbr/code/sibilant/include/macros.sibilant"],"names":[],"mappings":"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","sourcesContent":["(def sibilant.macros.namespaces.core.return (token)\n     (when sibilant.debug (console.log \"returning \" (prettify token)))\n     (var default-return (as-statement [\"return \" (transpile token)]))\n     (if (and token token.contents token.contents.length)\n         (switch (get (first token.contents) 'token)\n                 (('return 'throw 'do) (transpile token))\n\n                 ('delete\n                  (var delete-macro (get macros 'delete))\n                  (if (< token.contents.length 3) default-return\n                      [ (as-statement (apply delete-macro (token.contents.slice 1 -1)))\n                        \"\\nreturn \"\n                        (as-statement (call delete-macro (last token.contents)))]))\n\n                 ('assign\n                  (if (< token.contents.length 4) default-return\n                      [ (apply sibilant.macros.namespaces.core.assign\n                               (token.contents.slice 1 (- token.contents.length 2)))\n                        \"\\nreturn \"\n                        (apply sibilant.macros.namespaces.core.assign (token.contents.slice -2))]))\n\n                 ('var\n                  [ (transpile token) \"\\nreturn \" (transpile (if (even? token.contents.length)\n                                                                 (last token.contents)\n                                                                 (first (token.contents.slice -2))))])\n\n                 ('set\n                  (if (< token.contents.length 5) default-return\n                      (do\n                       (var obj (second token.contents)\n                            non-return-part (token.contents.slice 2 (- token.contents.length 2))\n                            return-part (token.contents.slice -2))\n                       (non-return-part.unshift obj)\n                       (return-part.unshift obj)\n                       [ (sibilant.macros.namespaces.core.set ...non-return-part)\n                         \"\\nreturn \"\n                         (sibilant.macros.namespaces.core.set ...return-part)])))\n\n                 (default default-return))\n         default-return))\n\n\n(def sibilant.macros.namespaces.core.do (...body)\n     (if (= 1 body.length) (sibilant.macros.namespaces.core.return (first body))\n\n         body.length [ (interleave \"\\n\" (map (body.slice 0 -1) (#> (as-statement #0))))\n                       \"\\n\"\n                       (sibilant.macros.namespaces.core.return (last body)) ]\n         \"\"))\n\n(def sibilant.macros.namespaces.core.empty-list () 'null)\n\n(def sibilant.macros.namespaces.core.def (fn-name args ...body)\n     (if (undefined? fn-name) (error \"invalid function definition. missing name.\")\n         (undefined? args) (error \"invalid function definition. missing arguments or return value.\"))\n\n     (var fn-name-tr (transpile fn-name) this-node this)\n     (sibilant.docs.record (\"function \" (prettify fn-name)) this)\n\n     (as-statement [ (if (match? (regex \"\\\\.\") (output-formatter fn-name-tr)) \"\" \"var \")\n                     fn-name-tr \" = \"\n                     (sibilant.macros.namespaces.core.lambda { name fn-name args args node this-node } ...body )\n                     ] ))\n\n(def sibilant.macros.namespaces.core.macro (name args ...body)\n     (var name-tr (output-formatter (transpile name))\n          options { name name args args node this}\n          js (output-formatter (sibilant.macros.namespaces.core.lambda options ...body)))\n\n     (when sibilant.debug (console.log js))\n\n     (sibilant.docs.record (\"macro \" (first sibilant.macros.search-path) \"/\" (prettify name)) this)\n     \n     (try (set sibilant.macros.namespace name-tr (eval js))\n          (error (\"error in parsing macro \"\n                  (sibilant.pretty-print name) \":\\n\" js)))\n\n     undefined)\n\n(def sibilant.macros.namespaces.core.meta (...body)\n     (var js (output-formatter (sibilant.macros.namespaces.core.scoped ...body)))\n     (when sibilant.debug (console.log js))\n     (output-formatter (eval js)))\n\n\n(def sibilant.macros.namespaces.core.concat (...args)\n     [\"(\" (interleave \" + \" (map args transpile)) \")\"])\n\n(def sibilant.macros.namespaces.core.reverse (arr)\n     (var reversed [])\n     (each (item) arr (reversed.unshift item))\n     reversed)\n\n(var reverse sibilant.macros.namespaces.core.reverse)\n\n(def sibilant.macros.namespaces.core.lambda (args-or-options ...body)\n     (when sibilant.debug\n           (console.log args-or-options))\n     (var args (or (get args-or-options 'args) args-or-options)\n          body (or (get args-or-options 'body) body)\n          args (if (node? args 'expression) args.contents\n                   (and (node? args) (empty? body)) (do (assign body [ args ]) [])\n                   args)\n          name (when args-or-options.name\n                     (chain (output-formatter (transpile args-or-options.name))\n                            (replace (regex \"\\\\W+\" 'g) \"$\")\n                            (concat \"$\")))\n          rest (detect args\n                       (#> (node? #0 'dots))))\n\n     (var this-node this\n          node (detect\n                [ args-or-options.node this-node args-or-options.name args (first body) ]\n                (#(n) (and (node? n) (get n 'file)))))\n     [\"(function\" (if name (\" \" name) \"\") \"(\"\n       (interleave \", \" (map args transpile)) \") {\"\n       (if (or args-or-options.name node)\n           (indent [\"/*\"\n                     (if args-or-options.name (\" \" (sibilant.pretty-print args-or-options.name false)) \"\")\n                     (if node (\" \" node.file \":\" node.line \":\" node.col) \"\")\n                     \" */\"]) \"\")\n       (when (exists? rest)\n             (indent (as-statement [\"var \" (transpile rest)\n                       \" = Array.prototype.slice.call(arguments, \"\n                       (- args.length 1) \")\"])))\n\n       (indent (apply sibilant.macros.namespaces.core.do body))\n       \"})\"])\n\n(set sibilant.macros.namespaces.core \"#\" sibilant.macros.namespaces.core.lambda)\n\n(def sibilant.macros.namespaces.core.quoted-hash (...pairs)\n     (var cached-quote-value sibilant.macros.namespaces.core.hash.quote-keys)\n     (set sibilant.macros.namespaces.core.hash 'quote-keys true)\n     (var value (sibilant.macros.namespaces.core.hash ...pairs))\n     (set sibilant.macros.namespaces.core.hash 'quote-keys cached-quote-value)\n     value)\n\n(def sibilant.macros.namespaces.core.hash (...pairs)\n     (when (odd? pairs.length)\n           (error (\"odd number of key-value pairs in hash: \"\n                   (call inspect pairs))))\n\n     (var quote-keys sibilant.macros.namespaces.core.hash.quote-keys\n          pair-strings (bulk-map pairs (#(key value)\n                                         [ (if (and quote-keys (not (node? key 'string)))\n                                               [\"\\\"\" (transpile key) \"\\\"\"]\n                                               (transpile key))\n                                           \": \"\n                                           (transpile value)])))\n     (if (>= 1 pair-strings.length)\n         [\"{ \" (interleave \", \" pair-strings) \" }\"]\n         [\"{\" (indent (interleave \",\\n\" pair-strings)) \"}\"]))\n\n\n(def sibilant.macros.namespaces.core.quote (content)\n     (if (string? content) (\"\\\"\" (qescape content) \"\\\"\")\n         (number? content) (sibilant.macros.namespaces.core.quote (content.to-string))\n         (node? content 'literal) [\"\\\"\" (transpile content) \"\\\"\"]\n         \n         (node? content 'expression)\n         (if (length (keys (find-unquotes content)))\n             (sibilant.macros.namespaces.core.call 'macros.expand-quote.call 'this (sibilant.macros.namespaces.core.quote content.node-id)\n                    (apply sibilant.macros.namespaces.core.quoted-hash (alternating-keys-and-values (find-unquotes content))))\n             [\"\\\"\" (map-node (transpile content) qescape) \"\\\"\"])\n\n         (node? content 'bracket)\n         (if (length (keys (find-unquotes content)))\n             (sibilant.macros.namespaces.core.call 'macros.expand-quote.call 'this (sibilant.macros.namespaces.core.quote content.node-id)\n                    (apply sibilant.macros.namespaces.core.quoted-hash (alternating-keys-and-values (find-unquotes content))))\n             (sibilant.macros.namespaces.core.list ...(map content.contents sibilant.macros.namespaces.core.quote)))\n\n         (node? content 'brace)\n         (if (length (keys (find-unquotes content)))\n             (sibilant.macros.namespaces.core.call 'macros.expand-quote.call 'this (sibilant.macros.namespaces.core.quote content.node-id)\n                    (apply sibilant.macros.namespaces.core.quoted-hash (alternating-keys-and-values (find-unquotes content))))\n             (sibilant.macros.namespaces.core.hash ...(map content.contents sibilant.macros.namespaces.core.quote)))\n\n         (do\n          (console.log (\"unknown content\" (prettify content)))\n          content)))\n\n(def sibilant.macros.namespaces.core.debug (val)\n     (set sibilant 'debug (eval (output-formatter (transpile val)))) null)\n\n(def sibilant.macros.namespaces.core.expand-quote (node-id expansions)\n     (var expanded-nodes\n          (map-node-for-quote-expansion (get sibilant.node-cache node-id) expansions))\n\n     (transpile expanded-nodes))\n\n\n(def sibilant.macros.namespaces.core.list (...args)\n       (var arg-segments [])\n       (if (empty? args) \"[]\"\n           (do\n            (def simple-list (args)\n                 [\"[ \" (interleave \", \" (map args (#(arg) arg.transpiled))) \" ]\"])\n\n            (args.for-each (#(arg)\n                  (if (node? arg 'dots) (arg-segments.push {transpiled (transpile arg)})\n                   (list? (last arg-segments)) (.push (last arg-segments) { transpiled (transpile arg)})\n                   (arg-segments.push [{transpiled (transpile arg)}]))))\n\n            (assign arg-segments (map arg-segments\n                                      (#(segment)\n                                        (if (list? segment)\n                                            (simple-list segment)\n                                            segment.transpiled))))\n\n            (if (= 1 (length arg-segments))\n                (first arg-segments)\n                [(first arg-segments) \".concat(\" (interleave \", \" (rest arg-segments))\")\"]))))\n\n\n(def sibilant.macros.namespaces.core.call (fn-name ...args)\n     (if (any? args (#> (node? #0 'dots)))\n           (macros.apply fn-name (macros.list ...args))\n           [ (transpile fn-name)\n                   \"(\" (interleave \", \" (map args transpile)) \")\" ]))\n\n(def sibilant.macros.namespaces.core.dots (...contents)\n     (transpile contents))\n\n(def sibilant.macros.namespaces.core.include (...files)\n     (pipe files\n           (.map (#(file)\n                   (sibilant.with-default-search-path\n                    (#> (pipe file\n                              (transpile)\n                              (output-formatter)\n                              (eval)\n                              (sibilant.include))))))\n           (interleave \"\\n\")))\n\n\n(def sibilant.macros.namespaces.core.docs (...options)\n     (var options-string undefined\n          options-hash {})\n\n     (when (odd? options.length)\n           (if (or (node? (first options) 'string) (string? (first options)))\n               (assign options-string (options.shift))\n\n               (or (node? (last options) 'string) (string? (last options)))\n               (assign options-string  (options.pop))))\n\n     (bulk-map options (#(key value)\n                         (set options-hash (pipe key (transpile) (output-formatter)) value)))\n\n     (each (list-attribute) `[ examples references ]\n           (when (and (has-key? options-hash list-attribute)\n                      (node? (get options-hash list-attribute) 'bracket))\n                 (set options-hash list-attribute\n                      (get options-hash list-attribute 'contents))))\n     \n     (when (has-key? options-hash 'example)\n           (when (has-key? options-hash 'examples) (error \"please provide example OR examples, not both\"))\n           (set options-hash 'examples [options-hash.example])\n           (delete options-hash.example))\n\n\n     (if (node? options-string 'string)\n           (set options-hash 'doc-string (pipe options-string\n                                               (transpile)\n                                               (output-formatter)\n                                               (eval)))\n           (string? options-string) (set options-hash 'doc-string options-string))\n\n     (set sibilant.docs 'last-doc options-hash)\n     null)\n","(namespace core)\n\n(docs \"the simplest way to conditionally execute code.\"\n      example (ternary (< 50 100)\n                       \"fifty is less than 100\"\n                       \"fifty is more than 100\"))\n\n(macro ternary (cond if-true if-false)\n       [\"(\" (transpile cond) \") ? \"\n            (transpile if-true) \" : \"\n            (transpile if-false)])\n\n\n\n\n\n\n;;nodoc    \n(macro join (glue arr)\n       [\"(\" (transpile arr) \").join(\" (transpile glue) \")\"])\n\n\n\n\n\n;; nodoc\n(macro set (arr ...kv-pairs)\n       (interleave \"\\n\" (bulk-map kv-pairs\n                                  (#(k v)\n                                    (as-statement [\"(\" (transpile arr) \")\"\n                                                    \"[\" (transpile k) \"] = \" (transpile v) ])))))\n;; nodoc\n(macro var (...pairs)\n       (as-statement\n        [\"var \"\n         (interleave \",\\n    \"\n               (bulk-map pairs\n                         (#(name value)\n                           [ (transpile name) \" = \" (transpile value) ])))\n         ]))\n\n;; nodoc\n(macro get (obj ...keys)\n       [\"(\" (transpile obj) \")\" (map keys (#(key)\n                                            [\"[\" (transpile key) \"]\"]))])\n\n\n\n\n\n(docs \"stores a duplicate copy of `current-macro-name` as\n`new-macro-name` in current namespace.  No output.\")\n\n(macro alias-macro (current-macro-name new-macro-name)\n       (var current-macro-name (output-formatter (transpile current-macro-name))\n            new-macro-name (output-formatter (transpile new-macro-name)))\n       (set sibilant.macros.namespace\n            new-macro-name (get sibilant.macros.namespace current-macro-name))\n       null)\n\n\n\n\n\n(docs \"calls the `method` on `object` as a function with `args` as the arguments\"\n      example (send object method first-argument second-argument third-argument))\n\n(macro send (object method ...args)\n       [(transpile object) \".\" (transpile method)\n               \"(\" (interleave \", \" (map args transpile)) \")\"])\n\n\n\n\n\n(docs \"calls the function `fn` with arguments passed as an array in `arglist`\"\n      example (apply my-function [ first-arg second-arg third-arg ]))\n\n(macro apply (fn arglist)\n       '(.apply @fn this @arglist))\n\n\n\n\n(docs \"builds an array with `first` as the zeroth index and the\nelements provided by array `rest` as the subsequent elements, as\nsiblings with `first`.  deprecated\"\n      example (cons 1 [ 2 3 4 ]))\n\n(macro cons (first rest)\n       [\"[ \" (transpile first) \" ].concat(\" (transpile rest) \")\"])\n\n\n\n\n(docs \"adds `additional` elements onto the right-side (tail) of `list`. deprecated\"\nexample (append [ 1 2 3 ] 4 5 6))\n(macro append (list ...additional)\n       '(.concat @list (list ...@additional)))\n\n\n(docs \"fetches length attribute from `arr`\"\n      example (length [ 1 2 3 ]))\n(macro length (arr)\n       '(get @arr 'length))\n\n(docs \"executes the `body` inside of a self-executing function. The\nlast statement/expression of the body is returned.\"\n      examples [(scoped true) (scoped (var a 1) (+ a 2))])\n\n(macro scoped (...body)\n       '(.call (lambda @{node this args []} ...@body) this))\n\n;;nodoc\n(macro *scoped-without-source (...body)\n       [\"(function() {\" (indent '(do ...@body)) \"}).call(this)\"])\n\n(macro *number-words (...number-words)\n       (.for-each number-words (#(word index)\n                                 `(docs @(\"fetches the \"(output-formatter (transpile word))\" element from `arr`\")\n                                        example (@word my-array))\n                                 `(macro @word (arr) (var index @index) `(get @arr @index)))))\n(*number-words first second third fourth fifth sixth seventh eighth ninth)\n(delete-macro *number-words)\n\n\n(docs \"fetches all but the first item of `arr`\"\n      example (rest [ 1 2 3 ]))\n(macro rest (arr) '(.slice @arr 1))\n\n(docs \"fetches just the last element of `arr` by slicing.\"\n      example (last [ 1 2 3 ]))\n(macro last (arr) '(first (.slice @arr -1)))\n\n;;nodoc\n(macro = (a b) [ (transpile a) \" === \" (transpile b) ])\n\n(docs \"adds `args` using the javascript `+` operator. Since javascript\noverloads this for string concatenation, this macro can be used for\nthis as well.\"\n      examples [ (+ 1 2 3) (+ 'hello 'world) ])\n(macro +   (...args)\n       [\"(\" (interleave \" + \" (map args transpile)) \")\"])\n\n\n(docs \"subtracts each subsequent element of `args`\"\n      examples [ (- 2 1) (- 10 5 1) ])\n(macro -   (...args)\n       [\"(\" (interleave \" - \" (map args transpile)) \")\"])\n\n(docs \"multiplies elements of `args`\"\n      example (* 3 4 5))\n(macro *   (...args)\n       [\"(\" (interleave \" * \" (map args transpile)) \")\"])\n\n(docs \"divides each subsequent element of `args`\"\n      examples [ (/ 1 2)\n                 (/ 1 2 3) ])\n(macro /   (...args)\n           [\"(\" (interleave \" / \" (map args transpile)) \")\"])\n\n\n(docs \"short circuiting operator returns the first element of `args` that evaluates to be truthy\"\n      example (or (= 1 2) (string? []) \"one is not two and an array is not a string\"))\n(macro or  (...args)\n       [\"(\" (interleave \" || \" (map args transpile)) \")\"])\n\n\n(docs \"returns the last element if all elements of `args` are truthy, or the\nfirst non-truthy element if it exists\"\n      example (and (string? \"string\") (number? 10) (= 1 1)))\n(macro and (...args)\n       (ternary (= 1 (length args)) (transpile (first args))\n                [\"(\" (interleave \" && \" (map args transpile)) \")\"]))\n\n(docs \"modulus operator\" example (mod 10 2))\n(macro mod (...args)\n       [\"(\" (interleave \" % \" (map args transpile)) \")\"])\n\n\n\n\n\n\n\n\n(macro *def-infix (macro-name word js-comparator)\n       (var docstring (\"compares `args` from left to right, \"\n                       \"returning true if each element is \"\n                       (.slice word.token 1 -1)\n                       \" than the next\"))\n       \n       `(docs @docstring examples [ (@macro-name a b c) (@macro-name a b) ])\n       \n       `(macro @macro-name (...args)\n               (var js-comparator @(or js-comparator [\"\\\"\" macro-name \"\\\"\"]))\n               `(and ...@(map (args.slice 0 -1)\n                              (#(item index)\n                                [ item \" \" js-comparator \" \"\n                                  (get args (+ 1 index)) ])))))\n\n(*def-infix > \"greater than\")\n(*def-infix <  \"less than\")\n(*def-infix <= \"less than or equal\")\n(*def-infix >= \"greater than or equal\")\n(*def-infix != \"not equal (using threequals)\" \"!==\")\n(*def-infix = \"equal (using threequals)\" \"===\")\n\n(delete-macro *def-infix)\n\n\n\n\n\n\n\n\n(docs \"increments `item` by `increment`\"\n      example (incr-by n 5))\n(macro incr-by (item increment)\n       [ (transpile item) \" += \" (transpile increment)])\n\n\n\n\n(docs \"increments item by 1\", example: (incr i))\n(macro incr (item)\n       [\"((\" (transpile item) \")++)\"])\n\n\n\n\n\n(docs \"decrements item by 1\", example: (decr i))\n(macro decr (item) [\"((\" (transpile item) \")--)\"])\n\n(docs \"uses the javascript new keyword to construct an object using\n      `constructor`, with `args` passed as arguments to the constructor.\"\n      example (new RegExp \"hello\" 'g))\n\n(macro new (constructor ...args)\n       [\"(new \" '(call @constructor ...@args) \")\"])\n\n\n\n(docs \"builds a regex using `pattern` and `flags` as arguments to the RegExp constructor\"\n      examples [ (regex \"[0-9]+\") (regex \"0x[0-9a-f]+\" 'i)])\n(macro regex (pattern flags)\n       '(new RegExp @pattern @(or flags 'undefined)))\n\n\n\n(docs \"inserts compilation timestamp as a string. deprecated.\"\n      example: (timestamp))\n(macro timestamp ()\n       [\"\\\"\" (.to-string (new Date)) \"\\\"\"])\n\n\n(docs \"predicate to test for equality with zero\"\n      example: (zero? n))\n(macro zero? (item) '(= @item 0))\n\n\n(docs \"returns true if the array `arr` has a length of zero\"\n      example: (empty? []))\n(macro empty? (arr)\n       `(= 0 (length @arr)))\n\n\n(docs \"returns true if `number` is not divisible by 2\"\n      example (odd? 5))\n(macro odd? (number)\n       '(= 1 (mod @number 2)))\n\n\n(docs \"returns true if `number` is divisible by 2 with no remainder\"\n      example (even? 10))\n(macro even? (number)\n       '(= 0 (mod @number 2)))\n\n\n(docs \"exposes the javascript typeof operator. most often, predicates\nsuch as `string?`, `function?`, `number?`, etc are preferred.\"\n      example: (typeof 5))\n(macro typeof (thing) [\"typeof \" (transpile thing)])\n\n\n(docs \"returns true if all of the `things` are javascript strings\"\n      examples: [ (string? test-object) (string? 'yes 'yes 'yes) ])\n(macro string? (...things)\n       '(and ...@(map things (#(thing) '(= (typeof @thing) 'string)))))\n\n\n(docs \"returns true if all of the `things` are functions\"\n      examples: [ (function? fn) (function? err cb) ])\n(macro function? (...things)\n       '(and ...@(map things (#(thing) '(= (typeof @thing) 'function)))))\n\n\n(docs \"returns true if all of the `things` are undefined, as tested\nwith `typeof`, not equality with literal undefined. This is the\ninverse of `defined?`\"\n      examples: [ (undefined? argument)\n                  (undefined? 1 2 undefined) ])\n(macro undefined? (...things)\n       '(and ...@(map things (#(thing) '(= (typeof @thing) 'undefined)))))\n\n\n(docs \"returns true if none of the `things` are undefined, as tested\nwith `typeof`. This is the inverse of `defined?`\"\n      examples: [ (defined? variable)\n                  (defined? var1 var2 var3) ])\n(macro defined? (...things)\n       '(and ...@(map things (#(thing) '(!= (typeof @thing) 'undefined)))))\n\n\n(docs \"returns true if all of the `things` are numbers, as tested\nwith `typeof`\"\n      examples: [ (number? 1) (number? 1 2 3) ])\n(macro number? (...things)\n       '(and ...@(map things (#(thing) '(= (typeof @thing) 'number)))))\n\n\n;;nodoc\n(macro if (arg truebody falsebody)\n       [\"(function() {\"\n        (indent [\"if (\" (transpile arg) \") {\"\n                        (indent '(do ...@truebody))\n                        \"} else {\"\n                        (indent '(do ...@falsebody))\n                        \"}\"])\n         \"}).call(this)\"])\n\n\n(docs \"inserts the result of each subsequent call in `calls` as the\nsecond argument to the next macro. This is very much akin to clojure's thread-first arrow or elixir's pipe operator\"\n      examples: [\n                 (pipe \"a b c d\"\n                     (.to-upper-case)\n                     (.replace \"A\" \"X\")\n                     (.split \" \")\n                     (first)\n                     (concat \" marks the spot\"))\n\n                  (pipe \"{\\\"a\\\": {\\\"b\\\": [ 1, 2, 3 ]}}\"\n                        (JSON.parse)\n                        (get 'a)\n                        (JSON.stringify))\n                  ]\n     references: [ \"https://clojuredocs.org/clojure.core/-%3E\"\n                   \"http://elixir-lang.org/docs/v1.0/elixir/Kernel.html#|>/2\" ])\n(macro pipe (...calls)\n       (inject undefined calls\n         (#(value item)\n           (var cloned (clone item))\n           (if (undefined? value)\n               cloned\n               (merge-into cloned\n                           { contents [ (first cloned.contents)\n                                        value\n                                        ...(rest cloned.contents) ] })))))\n\n\n(docs \"inserts `contents` transpiled to javascript as a comment in the\noutput file, removing it from execution.\"\n      example (comment (scoped 1)))\n(macro comment (...contents)\n       (map contents (#(content)\n                       [\"// \"(recurse-map (transpile content)\n                                    (#(item)\n                                      (ternary item\n                                               (pipe item\n                                                     (transpile)\n                                                     (output-formatter)\n                                                     (.replace (regex \"\\n\" 'g) \"\\n// \"))\n                                               null)))])))\n\n\n;; (docs \"checks if `first-thing` is equal to all of the `other-things`.\n;; Most of the time, there is only one other thing. Javascript threequals\n;; is always used.  Please note that if evaluating `first-thing` has\n;; side-effects, they will be called `(length other-things)` times.\"\n;;       examples [ (= 1 2)\n;;                  (= 10 (+ 5 5) (- 15 5)) ])\n\n\n(docs \"returns true if `thing` is an array in javascript. aliased as\n`list?`.\"\n      example: (array? arr))\n\n(macro array? (thing)\n       (var transpiled (transpile thing))\n       [\"((\" transpiled \") && typeof (\" transpiled \") === \\\"object\\\" && (\"\n               transpiled \").constructor.name === \\\"Array\\\")\"])\n(alias-macro array? list?)\n\n\n(docs \"evaluates statements in `body` if `condition` is true. `body`\n      is `scoped` in a self-evaluating function to support having a\n      return value from the if statement.\"\n      example: (when (< 3 i) (console.log i) (get arr i)))\n\n(macro when (condition ...body)\n       [\"(function() {\"\n        (indent [\"if (\" (transpile condition) \") {\"\n                        (indent '(do ...@body))\n                        \"}\"])\n        \"}).call(this)\"])\n\n\n\n(docs \"boolean negation, as determined by javascript truthiness\"\n      example: (not (string? 1))\n      references: [ \"https://developer.mozilla.org/en-US/docs/Glossary/Truthy\"\n                    \"https://developer.mozilla.org/en-US/docs/Glossary/Falsy\" ])\n(macro not (exp)\n       [\"!(\" (transpile exp) \")\"])\n\n\n\n\n\n(docs \"evaluates statements in `body` if `condition` is falsy. `body`\n      is `scoped` in a self-evaluating function to support having a\n      return value from the if statement.\"\n      example: (unless (< 3 i) (console.log i) (get arr i)))\n\n(macro unless (condition ...body)\n       [\"(function() {\"\n        (indent [\"if (\" '(not @condition) \") {\"\n                        (indent '(do ...@body))\n                        \"}\"])\n        \"}).call(this)\"])\n\n(docs \"assigns alternating keys and values in `args`.  This works much\nlike `var`, but without the var keyword.  It is important to\nunderstand variable scope in javascript in order to use this macro safely.\nnote that this macro does not currently support destructuring like `var` does\"\n      examples [ (assign a 1) (assign a 1 b 2) ])\n\n(macro assign (...args)\n       (interleave \"\\n\"\n             (bulk-map args (#(name value)\n                              (as-statement [ (transpile name) \" = \"\n                                                    (transpile value)])))))\n\n\n\n(docs \"outputs debug information about `arg`.  If `label` is\nomitted (only one argument is provided), the name of the variable or\nexpression of that first expression will be logged. Aliased as `pretty-log`\"\n      examples: [ (log-pretty 'my-label value)\n                  (log-pretty (+ 1 2)) ])\n(macro log-pretty (label arg)\n       (var node this)\n       (when (undefined? arg)\n             (assign arg label\n                     label [\"\\\"\" (prettify label false) \"\\\"\"]))\n       `(console.log (concat @[\"\\\"\" node.file \":\" node.line \"\\\"\"] \" \" @label \" = \" (prettify @arg))))\n(alias-macro log-pretty pretty-log)\n\n(docs \"iterates over `array`, evaluating `body` once for each value in\n`array`.  If `item` is a literal name, that will be the variable into\nwhich the `array` element is yielded (current value).  If `item` is an expression, it\ncan contain the current value, the index, and the `array`.\"\n      references [\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach\"]\n      examples [ (each number [ 1 2 3 ] (console.log number))\n                 (each (letter index) `[ a b c d ]\n                       (set letters letter index)\n                       (pipe letter (.to-upper-case) (console.log))) ])\n                \n(macro each (item array ...body)\n       '(.for-each @array\n                   (lambda @{ node this\n                              args (if (node? item 'expression) item [item]) }\n                           ...@body)))\n\n\n\n\n\n\n\n\n;;nodoc\n;;deprecated\n(macro macro-expand (name)\n       (var macro (get macros (output-formatter (transpile name))))\n       (if macro\n           (macro.to-string)\n           \"undefined\"))\n\n\n\n\n(docs \"throws a new javascript error with arguments as the string\"\n      example (throw (new Error \"could not find matching socks\")))\n\n(macro throw (error)\n       [\"throw \" (transpile error)])\n\n\n\n\n\n(docs \"double-negates `expr`, converting it to a boolean\"\n      examples: [ (as-boolean 0) (as-boolean true) ])\n(macro as-boolean (expr)\n       [\"(!!(\" (transpile expr) \"))\"])\n\n\n;;nodoc because this needs attention\n;;todo\n(macro try (tryblock catchblock)\n       [\"(function() {\"\n        (indent [\"try {\"\n                 (indent '(do @tryblock))\n                 \"} catch (e) {\"\n                 (indent '(do @catchblock))\n                 \"}\"])\n         \"}).call(this)\"])\n\n\n\n\n\n;; (docs \"sets or gets sibilant state. If one arg is provided, this macro\n;; gets the value.  If more than two args are provided, sibilant state is\n;; set in pairs.  deprecated. internal.\")\n\n(macro state (...pairs)\n       (if (= 1 (length pairs))\n           (get sibilant.state (output-formatter (transpile (first pairs))))\n           (do (bulk-map pairs (#(k v) (set sibilant.state (output-formatter (transpile k)) (eval (output-formatter (transpile v))))))\n               null)))\n\n\n;;nodoc\n;;internal\n(macro symbol ()\n       (var symbol-count (or (get sibilant.state 'symbol-count) 0)\n            new-symbol-count (+ 1 symbol-count))\n       (^state 'symbol-count new-symbol-count)\n       [\"$_symbol\" new-symbol-count \"_$\"])\n\n\n\n\n\n(docs \"evaluates the `body` as long as `condition` is truthy,\nreturning the value of the last expression in `block` when `condition`\nceases to be truthy. See also `until`\"\n      example: (while (> 5 i) (console.log i) (decr i)))\n(macro while (condition ...body)\n       (var symbol (^symbol))\n       '(*scoped-without-source\n         (var @symbol)\n         @[\"while (\" (transpile condition) \") {\"\n           (indent '(assign @symbol (*scoped-without-source ...@body)))\n            \"}\"]\n         @symbol))\n\n\n\n\n(docs \"evaluates the `body` as long as `condition` is falsy,\nreturning the value of the last expression in `block` when `condition`\nceases to be falsy. See also `while`\"\n      example: (until (< 5 i) (console.log i) (incr i)))\n\n(macro until (condition ...body)\n       '(while (not @condition) ...@body))\n\n\n\n\n(docs \"returns true if the `string` matches `regexp`.  Deprecated in\n      preference to `.match` (`send` dot-invocation).\"\n      example: (match? (regex \"^[a-z]+$\" 'i) 'word))\n(macro match? (regexp string)\n       '(.match @string @regexp))\n\n(docs \"similar to `match?` but builds a regex out of the `pattern` and `flags`.\"\n      example (match-regex? 'word \"^[a-z]+$\" 'i))\n(macro match-regex? (string pattern flags)\n       '(match? (regex @pattern @flags) @string))\n\n\n(docs \"replaces the first occurance of `pattern` (as a regex) with `replacement`\"\n      example: (replace \"hello world\" \"l+o\" \"y there,\"))\n(macro replace (string pattern replacement)\n       '(.replace @string\n              (regex @pattern)\n              @replacement))\n\n(docs \"replaces all occurrances of `pattern` (as a regex) with `replacement`\"\n      example: (replace-all \"503-555-1212\" \"[0-9]\" \"#\"))\n(macro replace-all (string pattern replacement)\n       '(.replace @string (regex @pattern 'g) @replacement))\n\n\n\n\n\n\n(docs \"most often called as its alias, `#>`, thunk creates a function\nwith no named arguments. To refer to arguments anonymously, use #n,\nsuch as #0 for the first argument.\"\n      examples: [ (.map [ 1 2 3 ] (#> (+ 1 #0)))\n                  (window.set-timeout (#> (console.log 'here)) 10) ])\n(macro thunk (...body)\n       '(lambda @{ node this args [] }\n       ...@(map-node body\n                 (#(node)\n                   (if (node? node 'arg-placeholder)\n                       '(argument @(replace node.token \"^#\" \"\"))\n                       node)))))\n(alias-macro thunk #>)\n\n\n\n\n\n(docs \"most often called as its alias, `#->`, pipe-thunk applies a pipe chain to the argument of a function and returns the result\"\n      examples [ (.map `[ a b c ] (#-> (.to-upper-case) (concat \" is a letter\"))) ])\n(macro pipe-thunk (...calls) `(thunk (pipe #0 ...@calls)))\n(alias-macro pipe-thunk #->)\n\n\n\n\n\n\n(docs \"returns the property names of `obj`.\"\n      references: [ \"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/keys\" ]\n      example (keys { a 1 b 2 }))\n(macro keys (obj)\n       '(Object.keys @obj))\n\n\n\n\n\n\n(docs \"uses the javascript delete keyword on any number of `objects`.\n      Use in conjunction with `get` or dotted literal notation (a.b).\"\n      examples [ (delete object.a object.b)\n                 (delete (get object attribute) (get object \"other attribute\")) ])\n(macro delete (...objects)\n       (interleave \"\\n\" (map objects (#(obj)\n                                 (as-statement [\"delete \" (transpile obj)])))))\n\n\n\n\n\n\n\n(docs \"deletes each macro name in `macro-names` from the current namespace. Use carefully\")\n(macro delete-macro (...macro-names)\n       (each macro-name macro-names\n             (delete (get sibilant.macros.namespace (output-formatter (transpile macro-name)))))\n       null)\n(alias-macro delete-macro delmacro)\n\n\n\n\n\n\n(docs \"moves macro from `current-macro-name` to `new-macro-name`. Use carefully\")\n(macro rename-macro (current-macro-name new-macro-name)\n       (^alias-macro current-macro-name new-macro-name)\n       (^delete-macro current-macro-name)\n       null)\n\n\n\n\n\n\n\n\n(docs \"transforms function arguments into an array, using the Array prototype's slice\"\n      example (arguments))\n(macro arguments ()\n       [\"(Array.prototype.slice.apply(arguments))\"])\n\n\n\n\n\n\n\n(docs \"`get`s the argument at `index` in the current function context\"\n      example (argument 3))\n(macro argument (index)\n       '(get arguments @index))\n\n\n\n\n(docs \"iterates over each attribute in `obj`\"\n      example (each-key key { a 1 b 2 } (console.log key)))\n(macro each-key (as obj ...body)\n       `(pipe @obj (keys)\n              (.for-each (lambda @{ args: (if (node? as 'expression) as [as])\n                                    node: this }\n                                 ...@body))))\n\n\n\n\n\n\n\n(docs \"uses the javascript switch construction to test equality.  documentation todo: needs better description\"\n      examples: [\n                 (switch char\n                         ('a \"it was an a\")\n                         ('b (console.log \"found a b!\")\n                             \"it was a b\")\n                         ([1 2 3 4 5] \"it was an integer from one to five\")\n                         (default \"not sure\"))\n                 ])\n\n(macro switch (obj ...cases)\n       [\"(function() {\"\n         (indent [\"switch(\" (transpile obj) \") {\"\n                   (map cases (#(case-def)\n                                (var case-name-node (first case-def.contents)\n                                     case-labels (if (node? case-name-node 'expression 'bracket)\n                                                     case-name-node.contents\n                                                     [case-name-node])\n                                     case-string (interleave \"\\n\"\n                                                             (map case-labels (#(c)\n                                                                                (if (= 'default c.token)\n                                                                                    \"default:\"\n                                                                                    [\"case \" (transpile c) \":\"])))))\n                                [\"\\n\" case-string (indent '(do ...@(rest case-def.contents)))]))\n                   \"}\"])\n         \"}).call(this)\"])\n\n\n\n\n\n\n\n\n\n\n\n(docs \"tests any number of `alternating-conditions-and-branches`.  If\n      an odd number of branches are supplied, the final branch is a\n      default else clause.  To evaluate more than one expression as a\n      branch, use the `do` macro, as shown in the examples:\"\n      examples [ (if true (console.log 'here))\n                 (if (= 1 arguments.length) (console.log \"one argument\")\n                     (= 'blue favorite-color) (console.log \"blue\")\n                     (assign examples 'difficult))\n                 (if (foo?) (do (a b)\n                                (c))\n                     (bar?) (do (baz)\n                                (wibble))\n                     (do (d e)\n                         (console.log 'default))) ])\n\n\n\n(macro if (...alternating-conditions-and-branches)\n       [\"(function() {\"\n        (indent\n         (interleave \" else \"\n               (bulk-map alternating-conditions-and-branches\n                         (#(cond val)\n                           (if (!= (typeof val) 'undefined)\n                                 [\"if (\" (transpile cond) \") {\"\n                                   (indent '(do @val))\n                                   \"}\"]\n                                 [\"{\" (indent '(do @cond)) \"}\"])))))\n        \"}).call(this)\"])\n\n\n\n\n\n\n\n\n\n\n\n\n(docs \"similar to `pipe`, this macro allows function calls to be applied\nin sequence, as is common in fluent interfaces. deprecated in preference to `pipe`\"\n      example (chain a (b c d) (e) (f g)))\n      \n\n(macro chain (object ...calls)\n       (if (= 0 calls.length) (transpile object)\n           (= 1 calls.length) '(send @object ...@(get (first calls) 'contents))\n           (do\n            (var lines (map calls (#(call index)\n                                    [\".\" (transpile (first call.contents))\n                                         \"(\" (interleave \", \" (map (rest call.contents) transpile)) \")\"])))\n\n            [ (transpile object)\n              (first lines)\n              \"\\n  \"\n              (recurse-indent\n               (interleave \"\\n\" (rest lines)))])))\n\n\n\n\n\n\n\n;;nodoc, deprecated\n(macro chainable (...names)\n       (each (name) names\n             '(macro @name (target ...calls)\n                     '(chain (call @name @target) ...@calls))))\n\n\n\n\n(docs \"uses the javascript `instanceof` operator to check if `item` is of `type`.\"\n      example (instance-of? (new Date) Date))\n(macro instance-of? (item type)\n       [\"(\" (transpile item) \" instanceof \" (transpile type) \")\"])\n\n\n\n\n\n\n(docs \"returns true if `haystack` includes `needle`.  `haystack` can be a string or array/list.\"\n      examples [ (includes? 'hello 'h) (includes? `[ Veni vidi vici] 'vidi) ])\n(macro includes? (haystack needle)\n       '(pipe @haystack (.index-of @needle) (!= -1)))\n\n\n\n\n\n\n\n(docs \"returns true if `haystack` does NOT include `needle`.\n`haystack` can be a string or array/list\"\n      examples [ (excludes? 'hello 10) (excludes? `[ Veni vidi vici] 'attenti) ])\n(macro excludes? (haystack needle)\n       `(pipe @haystack (.index-of @needle) (= -1)))\n\n\n\n\n\n\n(docs \"similar to the javascript truthiness predicate `as-boolean`, returns true unless the `thing` is undefined or null\"\n      example (exists? window))\n(macro exists? (thing)\n       `(and (defined? @thing) (!= @thing null)))\n\n\n\n\n\n(macro with-state (k v ...body)\n       (var before (^state k))\n       (^state k v)\n       (var return-value\n            (interleave \"\\n\" (map body transpile)))\n       (^state k before)\n       return-value)\n\n\n\n\n\n\n(docs \"combines elements of array `arr` into a string, inserting\n`glue` string between each element.  if `glue` is omitted (only one\nargument provided), the elements of `arr` are joined with an empty\nstring\n\ntodo: incorrect argument order\"\n\n      examples [ (join \", \" `[ a few words ])\n                 (join `[ several more words ]) ])\n\n(macro join (glue arr)\n       (if (and (defined? glue) (undefined? arr))\n           (assign arr glue glue undefined))\n       `(.join @arr @(or glue \"\\\"\\\"\")))\n\n\n(docs \"registers variables in `pairs` inside of the current scope using the javascript var keyword.\ndestructuring from arrays and objects is also supported, as shown in the examples\"\n      examples: [ (var a 1 b 2)\n                  (var a 1)\n                  (var a)\n                  (var {a} {a 1 b 2} c 3)\n                  (var a 1 [b c] [2 3]) ])\n\n(macro var (...pairs)\n       (var destructured [])\n       (bulk-map pairs (#(lhs rhs)\n                         (switch lhs.type\n                                 ('bracket\n                                  (var symbol (^symbol))\n                                  (destructured.push [symbol (transpile rhs)])\n                                  (each (item index) lhs.contents\n                                        (destructured.push [(transpile item) '(get @symbol @index)]))\n                                  (destructured.push [symbol 'undefined]))\n                                 ('brace\n                                  (var symbol (^symbol))\n                                  (destructured.push [symbol (transpile rhs)])\n                                  (each (item index) lhs.contents\n                                        (var tr-item (transpile item))\n                                        (destructured.push [tr-item '(get @symbol @[\"\\\"\" tr-item \"\\\"\"])]))\n                                  (destructured.push [symbol 'undefined]))\n\n                                 (default\n                                  (destructured.push [(transpile lhs)\n                                                       (if rhs (transpile rhs) 'undefined)])))))\n\n       (as-statement\n        [\"var \" (interleave \",\\n    \"\n           (map destructured\n                (#(pair)\n                  [(first pair) \" = \" (second pair)]\n                  )))]))\n\n(docs \"sets default values for variables in current scope. `pairs` are\nalternating variable names and default values\"\n      example (default a 10 b 20))\n(macro default (...pairs)\n       (interleave \"\\n\" (bulk-map pairs (#(name value)\n                                  '(assign @name (ternary (defined? @name) @name @value))))))\n\n\n(macro import-namespace (namespace)\n       (var namespace-as-string (output-formatter (transpile namespace)))\n       (unless (sibilant.macros.namespaces.has-own-property namespace-as-string)\n               (set sibilant.macros.namespaces namespace-as-string {}))\n       (sibilant.macros.search-path.unshift namespace-as-string)\n       undefined)\n\n\n(macro namespace (namespace)\n       `(import-namespace @namespace)\n       (set sibilant.macros 'namespace (get sibilant.macros.namespaces (output-formatter (transpile namespace))))\n       undefined)\n\n\n\n\n\n\n(docs \"checks if `object` has property `key`.  returns true or false.\"\n      example (has-key? object 'a))\n\n(macro has-key? (object key)\n       `(.has-own-property @object @key))\n\n\n\n\n\n\n\n(docs \"retreives object properties, potentially deeply. If more than one `keys` are provided,\n`get` fetches deeply into nested objects or arrays.\nWhen javascript dot notation can be used (`a.b = 3`), it is.\nOtherwise, bracket notation is used.\"\n      examples [ (get an-object 'static-attribute-name)\n                 (get object dynamic-attribute-name)\n                 (get object \"these attributes\" \"can't be dotted\")\n                 (get array 0)\n                 (get object 'a 'b c)\n                 (get array 0 1 2) ])\n\n\n(macro get (obj ...keys)\n       [(transpile obj)\n         (map keys (#(key)\n                     (var transpiled (transpile key)\n                          output (output-formatter transpiled))\n\n                     (if (match-regex? output \"^\\\"[a-zA-Z0-9]+\\\"$\")\n                         [\".\" (replace-all output \"\\\"\" \"\") ]\n                         [\"[\" transpiled \"]\"])))])\n\n\n\n\n\n\n\n\n\n\n(docs \"assigns object properties to `arr` in pairs, alternating between keys and values.\nWhen javascript dot notation can be used (`a.b = 3`), it is.  Otherwise, bracket notation is used\"\n      examples [ (set an-object 'static-attribute-name 'value)\n                 (set object dynamic-attribute-name \"key name determined at runtime\")\n                 (set array 0 \"first element of array\")\n                 (set object \"can't be dotted\" 'value)\n                 (set object 'first-attribute 'first-value\n                      'second-attribute 'second-value) ])\n\n(macro set (arr ...kv-pairs)\n       (interleave \"\\n\" (bulk-map kv-pairs (#(k v) `(assign (get @arr @k) @v)))))\n\n\n"]}