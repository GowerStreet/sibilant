{"version":3,"sources":["/Users/jbr/code/sibilant/src/core.sibilant"],"names":[],"mappings":"AAAA,CAAK,QAAL,EAAe,QAAf,IACK;AAAA,EAAG,OAAH,EAAsB,sCAAtB;AAAA,EACG,SADH,EACsB,OADtB;AAAA,EAEG,QAFH,EAEsB,mCAFtB;AAAA,EAGG,QAHH,EAGsB,mBAHtB;AAAA,EAIG,SAJH,EAIsB,2CAJtB;AAAA,EAKG,SALH,EAKsB,SALtB;AAAA,EAMG,MANH,EAMsB,QANtB;AAAA,EAOG,WAPH,EAOsB,sBAPtB;AAAA,EAQG,WARH,EAQsB,OARtB;AAAA,EASG,kBATH,EASsB,SATtB;AAAA,EAUG,YAVH,EAUsB,OAVtB;AAAA,EAWG,mBAXH,EAWsB,iBAXtB;AAAA,CADL,C;AAcA,CAAK,eAAL,EAAsB,gBAAtB,IACK,CAAQ,uBAAR,GAAgC,uBAAhC,CADL,C;AAGA,CAAK,QAAL,EAAe,iBAAf,IACM,O,MAAA,CAAQ,OAAR,EAAgB,MAAhB,IADN,C;AAIA,CAAK,QAAL,EACM,gBADN,IACuB,GAAD,CAAK,wBAAL,EAA+B,UAAG,CAAH;AAAA;AAAA;AAAA,SAAM,CAAK,eAAL,EAAqB,CAArB,CAAN;AAAA,EAA/B,CADtB;AAAA,CAAK,QAAL,EAEM,aAFN,IAEmB,K,MAAA,CAAO,CAAU,uBAAV,OAAM,GAAN,CAAP,EAA4C,GAA5C,EAFnB,C;AAIA,IAAK,QAAL,uBAAe,MAAf;AAAA;AAAA;AAAA,EACK,IAAK,MAAL,GAAY,EAAZ;AAAA,MACK,UADL,GACiB,EAAC,MAAD,EADjB;AAAA,MAEK,QAFL,GAEc,EAFd,CADL;AAAA,EAKK,IAAK,WAAL,0BAAmB,KAAnB;AAAA;AAAA;AAAA,WACW,CAAK,UAAL,EAAiB,CAAjB,CAAN,CAA0B,IAA1B,CAA+B,KAA/B,CADL;AAAA,KALL;AAAA,EAQK,IAAK,eAAL;AAAA;AAAA;AAAA,IACK,IAAK,MAAL,GAAa,EAAb,CADL;AAAA,IAEM,WAAD,CAAc,MAAd,CAFL;AAAA,WAGM,kBAAD,CAAqB,MAArB,CAHL;AAAA,KARL;AAAA,EAaK,IAAK,eAAL;AAAA;AAAA;AAAA,IACM,cAAD,EADL;AAAA,IAEM,gBAAD,EAFL;AAAA,WAGK;AAAA,UAAM,C,iBAAA,K,CAAA,CAAN;AAAA,QACM,iBAAO,CAAC,sBAAD,GACO,OAAN,CAAc,UAAd,CADD,CAAP,CADN;AAAA;AAAA,QAHL;AAAA,KAbL;AAAA,EAoBK,IAAK,WAAL,0BAAmB,KAAnB;AAAA;AAAA;AAAA,IACK,IAAK,OAAL,GAAa,CAAO,KAAP,E,CAAA,CAAb;AAAA,QACK,KADL,GACW,KADX,CADL;AAAA,IAIK;AAAA,aAAQ,OAAR;AAAA,WACS,GADT;AAAA,QAEiB,KAAR,GAAe,WAAD,CAAa,CAAb,CAAd,CAFT;AAAA,QAGU,eAAD,EAHT;AAAA,eAIU,WAAD,CAAe,OAAf,CAJT;AAAA;AAAA,WAKS,GALT;AAAA,QAKqB,KALrB,GAK2B,CAAC,SAAD,GAAW,WAAD,CAAa,CAAb,CAAV,CAL3B;AAAA,eAKsD,OALtD,GAK8D,KAL9D;AAAA;AAAA;AAAA,eAMyB,OAAR,GAAgB,KAAhB,CANjB;AAAA;AAAA,QAJL;AAAA,IAYM,gBAAD,CAAkB,IAAY,OAAZ,EAAlB,CAZL;AAAA,IAcK;AAAA,aAAQ,KAAR;AAAA,WACS,GADT;AAAA,eACc,eAAD,EADb;AAAA;AAAA,WAEU,GAFV;AAAA,WAEc,GAFd;AAAA,WAEkB,GAFlB;AAAA,eAEwB,eAAD,EAFvB;AAAA;AAAA,WAIS,GAJT;AAAA,QAIc,eAAD,EAJb;AAAA,eAIiC,WAAD,CAAe,MAAf,CAJhC;AAAA;AAAA,WAKS,GALT;AAAA,QAKc,eAAD,EALb;AAAA,eAKiC,WAAD,CAAe,MAAf,CALhC;AAAA;AAAA;AAAA,eAQS;AAAA,cAAK,WAAD,CAAa,K,MAAA,CAAO,CAAC,GAAD,GAAK,sBAAL,GAA4B,GAA5B,CAAP,E,SAAA,EAAb,CAAJ;AAAA,mBACK,WAAD,CAAe,UAAD,CAAc,aAAD,CAAe,K,MAAA,CAAO,GAAP,EAAY,GAAZ,EAAf,EAA8B,EAA9B,CAAb,CAAd,CADJ;AAAA;AAAA,mBAEK,WAAD,CAAc,KAAd,CAFJ;AAAA;AAAA,YART;AAAA;AAAA,QAdL;AAAA,WA0BK;AAAA,UAAM,CAAK,CAAI,KAAJ,KAAU,GAAV,CAAL,IACM,cAAD,EADL,CAAN;AAAA,eAEO,eAAD,EAFN;AAAA;AAAA,QA1BL;AAAA,KApBL;AAAA,EAmDY,MAAP,CACQ,KADR,CACc,oBADd;AAAA,KAEQ,OAFR,CAEiB,WAFjB,CAnDL;AAAA,EAuDK;AAAA,QAAM,CAAG,iBAAH,GAAsB,CAAtB,CAAN;AAAA,aACO,KAAD,CAAO,wCAAP,EACa,OAAN,CAAc,CAAO,UAAP,E,CAAA,CAAd,CADP,CADN;AAAA;AAAA,MAvDL;AAAA,SA0DK,MA1DL;AAAA,G;AA4DA,CAAK,QAAL,EAAe,UAAf,IAAwB,QAAxB,C;AAEA,IAAK,MAAL,qBAAgB,IAAhB;AAAA;AAAA;AAAA,MAAgB,IAAhB;AAAA;AAAA,SACK,CACS,OAAD,CAAS,IAAT,CAAP,CACQ,IADR,CACa,IADb;AAAA,KAEQ,OAFR,CAEgB,K,MAAA,CAAO,GAAP,E,SAAA,EAFhB,EAE4B,IAF5B;AAAA,KAGQ,OAHR,CAGgB,K,MAAA,CAAO,KAAP,EAAc,GAAd,EAHhB,EAGiC,MAHjC,CADD,GAKC,IALD,CADL;AAAA,G;AAQA,IAAK,aAAL,4BAAqB,aAArB;AAAA;AAAA;AAAA,SACM,MAAD,CAAQ,IAAR,EAAW,aAAX,EACQ,UAAG,MAAH,EAAU,IAAV;AAAA;AAAA;AAAA,IACE,CAAK,MAAL,EAAY,CAAO,IAAP,E,CAAA,CAAZ,IAAyB,CAAK,MAAL,EAAY,CAAQ,IAAR,E,CAAA,CAAZ,CAAzB,CADF;AAAA,WAEE,MAFF;AAAA,IADR,CADL;AAAA,G;AAMA,IAAK,MAAL,GAAY,IAAZ,C;AACA,CAAK,QAAL,EAAe,QAAf,IAAsB,MAAtB,C;AAEA,CAAK,MAAL,EAAa,QAAb,IACK,UAAG,KAAH;AAAA;AAAA;AAAA,EACE,IAAK,aAAL,GAAoB,CAAC,SAAD,GAAY,SAAD,CAAW,KAAX,CAAX,CAApB,CADF;AAAA,SAGE;AAAA,QAAI,EAAO,KAAP,aAAO,KAAP,mBAAO,KAAP,+BAAJ;AAAA,aACI;AAAA,eAAQ,CAAO,KAAP,E,CAAA,CAAR;AAAA,aACW,MADX;AAAA,aACkB,KADlB;AAAA,aACwB,EADxB;AAAA,iBAC6B,SAAD,CAAW,KAAX,CAD5B;AAAA;AAAA,aAEU,QAFV;AAAA,UAGS,IAAK,WAAL,GAAkB,CAAK,MAAL,EAAa,QAAb,CAAlB,CAHT;AAAA,iBAIS;AAAA,gBAAI,CAAG,YAAH,GAAgB,CAAhB,CAAJ;AAAA,qBAAuB,aAAvB;AAAA;AAAA,qBACI,CAAe,WAAP,C,KAAA,C,IAAA,EAAqB,WAAD,CAAa,CAAb,EAAe,EAAf,CAApB,CAAR,GACQ,WADR,GAEc,WAAN,CAAmB,CAAM,KAAN,C,KAAA,C,EAAA,G,CAAA,CAAnB,CAFR,CADJ;AAAA;AAAA,cAJT;AAAA;AAAA,aAQW,IARX;AAAA,aAQgB,MARhB;AAAA,iBASU;AAAA,gBAAI,CAAG,YAAH,GAAgB,CAAhB,CAAJ;AAAA,qBAAuB,aAAvB;AAAA;AAAA,qBACI,CAAgB,WAAR,C,KAAA,C,IAAA,EACQ,WAAD,CAAa,CAAb,EAAe,CAAG,YAAH,GAAgB,CAAhB,CAAf,CADP,CAAR,GAEQ,WAFR,GAGgB,WAAR,C,KAAA,C,IAAA,EAAc,WAAD,CAAa,EAAb,CAAb,CAHR,CADJ;AAAA;AAAA,cATV;AAAA;AAAA,aAcU,KAdV;AAAA,iBAeS;AAAA,gBAAI,CAAG,YAAH,GAAgB,CAAhB,CAAJ;AAAA,qBAAuB,aAAvB;AAAA;AAAA,cAEK,IAAK,GAAL,GAAS,CAAQ,KAAR,E,CAAA,CAAT;AAAA,kBACK,aADL,GACsB,WAAD,CAAa,CAAb,EAAe,CAAG,YAAH,GAAgB,CAAhB,CAAf,CADrB;AAAA,kBAEK,UAFL,GAEkB,WAAD,CAAa,EAAb,CAFjB,CADD;AAAA,cAIE,qBAAD,CAAyB,GAAzB,CAJD;AAAA,cAKE,kBAAD,CAAqB,GAArB,CALD;AAAA,qBAMC,C,UAAQ,C,KAAA,C,IAAA,E,aAAA,CAAR,GACQ,WADR,G,UAEQ,C,KAAA,C,IAAA,E,UAAA,CAFR,CAND,CADJ;AAAA;AAAA,cAfT;AAAA;AAAA;AAAA,iBAyBiB,aAzBjB;AAAA;AAAA,UADJ;AAAA;AAAA,aA2BI,aA3BJ;AAAA;AAAA,MAHF;AAAA,EADL,C;AAiCA,IAAK,WAAL,0BAAmB,MAAnB;AAAA;AAAA;AAAA,SACY,MAAP,CAAe,QAAf;AAAA,KAA2B,OAA3B,CAAmC,K,MAAA,CAAO,SAAP,E,SAAA,EAAnC,EAAqD,GAArD,CADL;AAAA,G;AAGM,gBAAN,+BAAoB,IAApB;AAAA;AAAA;AAAA,MAAoB,IAApB;AAAA;AAAA,SACK,C,WAAQ,C,KAAA,C,IAAA,E,IAAA,CAAR,GAAwB,KAAxB,CADL;AAAA,G;AAGM,SAAN,wBAAa,IAAb;AAAA;AAAA;AAAA,MAAa,IAAb;AAAA;AAAA,EACK,IAAK,SAAL,GAAiB,QAAD,CAAU,CAAV,EAAY,CAAG,WAAH,GAAe,CAAf,CAAZ,CAAhB,CADL;AAAA,EAGK,CAAK,IAAL,EAAU,SAAV,IAAqB,EAAE,QAAF,EAAS,CAAK,IAAL,EAAU,SAAV,CAAT,EAArB,CAHL;AAAA,SAKK,CACO,GAAD,CAAK,IAAL,EAAU,UAAG,GAAH;AAAA;AAAA;AAAA,WAAQ,CAAS,WAAD,CAAe,SAAD,CAAW,GAAX,CAAd,CAAR,CAAR;AAAA,IAAV,CADN,OAAM,IAAN,CALL;AAAA,G;AAQM,gBAAN;AAAA;AAAA;AAAA,SAAqB,MAArB;AAAA,G;AAEM,WAAN,0BAAY,MAAZ,EAAuB,IAAvB;AAAA;AAAA;AAAA,MAAuB,IAAvB;AAAA;AAAA,SACK,CAAS,SAAD,CAAW,MAAX,CAAR,GACQ,GADR,GACY,CAAY,GAAD,CAAK,IAAL,EAAU,SAAV,CAAX,OAAM,IAAN,CADZ,GAC6C,GAD7C,CADL;AAAA,G;AAIM,UAAN,yBAAW,MAAX,EAAsB,WAAtB;AAAA;AAAA;AAAA,MAAsB,WAAtB;AAAA;AAAA,EACK,IAAK,QAAL,GAAiB,SAAD,CAAW,MAAX,CAAhB;AAAA,MACK,KADL,GACW;AAAA,QAA0B,QAAtB,C,KAAA,CAAQ,K,MAAA,CAAO,KAAP,E,SAAA,EAAR,CAAJ;AAAA,aAAsC,EAAtC;AAAA;AAAA,aAAyC,MAAzC;AAAA;AAAA,MADX,CADL;AAAA,SAGK,CAAQ,KAAR,GAAc,QAAd,GAAyB,KAAzB,G,aACQ,C,KAAA,C,IAAA,E,WAAA,CADR,GAEQ,KAFR,CAHL;AAAA,G;AAOM,YAAN,2BAAa,IAAb,EAAqB,WAArB;AAAA;AAAA;AAAA,MAAqB,WAArB;AAAA;AAAA,EACK,IAAK,EAAL,G,aAAQ,C,KAAA,C,IAAA,E,WAAA,CAAR;AAAA,MACK,IADL,GACW,SAAD,CAAW,IAAX,CADV,CADL;AAAA,EAGK;AAAA;AAAA,aAAK,CAAK,MAAL,EAAY,IAAZ,IAAkB,IAAD,CAAM,EAAN,CAAjB,CAAL;AAAA;AAAA,aACM,KAAD,CAAO,CAAC,yBAAD,GACC,IADD,GACM,KADN,GACa,MAAD,CAAQ,EAAR,CADZ,CAAP,CADL;AAAA;AAAA,MAHL;AAAA,SAMK,SANL;AAAA,G;AAQM,aAAN,4BAAiB,IAAjB;AAAA;AAAA;AAAA,MAAiB,IAAjB;AAAA;AAAA,SACK,CAAC,GAAD,GAAK,CAAa,GAAD,CAAK,IAAL,EAAU,SAAV,CAAZ,OAAM,KAAN,CAAL,GAAuC,GAAvC,CADL;AAAA,G;AAGA,IAAK,aAAL,4BAAqB,OAArB;AAAA;AAAA;AAAA,EACK,IAAK,IAAL,GAAU,IAAV;AAAA,MACK,IADL,GACU,EADV,CADL;AAAA,EAIiB,OAAZ,C,OAAA,WAAO,GAAP;AAAA;AAAA;AAAA,WACM;AAAA,UAAI,CAAI,CAAG,OAAH,KAAW,GAAX,CAAJ,IAAoB,CAAG,KAAH,KAAS,GAAT,CAApB,CAAJ;AAAA,eACY,IAAR,GAAa,GAAb,CADJ;AAAA;AAAA,QAGM,SAAD,CAAW,EAAC,IAAD,EAAM,GAAN,EAAX,CADD;AAAA,eAES,IAAR,GAAa,IAAb,CAJL;AAAA;AAAA,QADN;AAAA,KAJL;AAAA,EAWK;AAAA,QAAM,IAAN;AAAA,aAAY,KAAD,CAAO,CAAC,gCAAD,GAAkC,IAAlC,CAAP,CAAX;AAAA;AAAA,MAXL;AAAA,SAaK,IAbL;AAAA,G;AAgBM,cAAN,6BAAe,GAAf;AAAA;AAAA;AAAA,EACK,IAAK,QAAL,GAAc,EAAd,CADL;AAAA,EAEkB,GAAb,C,OAAA,WAAO,IAAP;AAAA;AAAA;AAAA,WAAkB,gBAAD,CAAkB,IAAlB,CAAjB;AAAA,KAFL;AAAA,SAGK,QAHL;AAAA,G;AAKA,IAAK,OAAL,GAAc,cAAd,C;AAEA,IAAK,eAAL,8BAAwB,IAAxB,EAA6B,IAA7B;AAAA;AAAA;AAAA,EACK,IAAK,UAAL,GAAiB,EAAjB,CADL;AAAA,SAGK;AAAA,QAAI,QAAU,IAAV,K,WAAA,CAAJ;AAAA,aACI,CAAQ,UAAR,GACQ,MADR,GACgB,SAAD,CAAW,CAAQ,IAAR,E,CAAA,CAAX,CADf,GAEQ,2CAFR,GAGQ,WAHR,GAGoB,MAHpB,CADJ;AAAA;AAAA,aAKI,UALJ;AAAA;AAAA,MAHL;AAAA,G;AAUM,aAAN,4BAAc,OAAd,EAAyB,IAAzB;AAAA;AAAA;AAAA,MAAyB,IAAzB;AAAA;AAAA,EACK,IAAK,IAAL,GAAW,aAAD,CAAgB,OAAhB,CAAV;AAAA,MACK,IADL,GACU,CAAQ,MAAD,CAAQ,IAAR,EACQ,UAAG,GAAH;AAAA;AAAA;AAAA,WACE,CAAI,CAAG,OAAH,KAAW,CAAO,GAAP,E,CAAA,CAAX,CAAJ,IACI,CAAG,KAAH,KAAS,CAAO,GAAP,E,CAAA,CAAT,CADJ,CADF;AAAA,IADR,CAAP,E,CAAA,CADV;AAAA,MAKK,SALL,GAKgB,SALhB,CADL;AAAA,EAQK,CAAK,IAAL,EAAU,CAAG,WAAH,GAAe,CAAf,CAAV,IACK,EAAG,QAAH,EAAU,CAAK,IAAL,EAAU,CAAG,WAAH,GAAe,CAAf,CAAV,CAAV,EADL,CARL;AAAA,EAWK;AAAA,QAAM,CAAK,CAAG,OAAQ,CAAO,IAAP,E,CAAA,CAAX,KAA0B,QAA1B,CAAL,IACW,CAAO,IAAP,E,CAAA,CAAN,CAAmB,KAAnB,CAAyB,K,MAAA,CAAO,UAAP,E,SAAA,EAAzB,CADL,CAAN;AAAA,aAEc,SAAR,GACQ,CAAC,KAAD,GAAQ,IAAD,CAAO,UAAD,EAAN,CAAP,GAA2B,OAA3B,CADR,CAFN;AAAA;AAAA,MAXL;AAAA,EAgBK,IAAK,UAAL,GAAkB;AAAA,QAAI,IAAJ;AAAA,aAAU,UAAD,CAAY,CAAZ,EAAc,EAAd,CAAT;AAAA;AAAA,aAA2B,IAA3B;AAAA;AAAA,MAAlB;AAAA,MACK,UADL,GACkB,eAAD,CAAmB,UAAnB,EAAgC,IAAhC,CADjB,CAhBL;AAAA,SAmBK,CAAC,YAAD,GACC,CAAY,GAAD,CAAK,IAAL,EAAU,UAAG,GAAH;AAAA;AAAA;AAAA,WAAS,SAAD,CAAW,CAAQ,GAAR,E,CAAA,CAAX,CAAR;AAAA,IAAV,CAAX,OAAM,IAAN,CADD,GAEC,KAFD,GAGE,MAAD,CAAQ,SAAR,EAAmB,UAAnB,EACQ,CACO,GAAD,CAAK,IAAL,EACK,UAAG,IAAH;AAAA;AAAA;AAAA,IACE,IAAK,KAAL,GAAY,SAAD,CAAW,IAAX,CAAX,CADF;AAAA,WAEE,CAAQ,KAAR,GACQ;AAAA,UAAI,CAAG,CAAM,KAAN,C,KAAA,C,EAAA,G,CAAA,CAAH,KAAgB,GAAhB,CAAJ;AAAA,eAAyB,EAAzB;AAAA;AAAA,eAA4B,GAA5B;AAAA;AAAA,QADR,CAFF;AAAA,IADL,CADN,OAAM,IAAN,CADR,CAHD,GAUC,IAVD,CAnBL;AAAA,G;AA+BA,CAAK,MAAL,EAAY,GAAZ,IAAiB,aAAjB,C;AAEM,YAAN,2BAAa,IAAb;AAAA;AAAA;AAAA,SACK;AAAA,QAAI,CAAG,OAAH,KAAW,qBAAX,CAAJ;AAAA,aACI,CAAC,IAAD,GAAM,CAAY,GAAD,CAAK,IAAL,EAAW,YAAX,CAAX,OAAM,IAAN,CAAN,GAAoC,IAApC,CADJ;AAAA;AAAA,aAEI;AAAA,YAAI,CAAI,QAAJ,KAAW,OAAQ,IAAnB,CAAJ;AAAA,iBAA8B,IAA9B;AAAA;AAAA,iBACI,CAAC,IAAD,GAAO,OAAD,CAAS,IAAT,CAAN,GAAqB,IAArB,CADJ;AAAA;AAAA,UAFJ;AAAA;AAAA,MADL;AAAA,G;AAMM,WAAN,0BAAe,KAAf;AAAA;AAAA;AAAA,MAAe,KAAf;AAAA;AAAA,EACK;AAAA,QAAM,C,CAAA,M,YAAA,G,CAAA,EAAN;AAAA,aACO,KAAD,CAAO,CAAC,yCAAD,GACO,OAAN,CAAc,KAAd,CADD,CAAP,CADN;AAAA;AAAA,MADL;AAAA,EAKK,IAAK,SAAL,GAAgB,CAAK,SAAU,YAAV,K,WAAA,MAAU,YAAV,K,IAAA,EAAL,IAAwB,YAAF,CAAS,WAAT,CAAtB,CAAhB;AAAA,MACK,WADL,GACmB,OAAD,CAAU,KAAV,EAAgB,UAAG,GAAH,EAAO,KAAP;AAAA;AAAA;AAAA,WACE,CAAQ;AAAA,UAAI,SAAJ;AAAA,eACM,YAAF,CAAS,SAAD,CAAW,GAAX,CAAR,CADJ;AAAA;AAAA,eAEK,SAAD,CAAW,GAAX,CAFJ;AAAA;AAAA,QAAR,GAGQ,IAHR,GAIS,SAAD,CAAW,KAAX,CAJR,CADF;AAAA,IAAhB,CADlB,CALL;AAAA,SAYK;AAAA,QAAI,CAAI,CAAJ,IAAM,kBAAN,CAAJ;AAAA,aACI,CAAC,IAAD,GAAM,CAAW,WAAX,OAAM,IAAN,CAAN,GAA+B,IAA/B,CADJ;AAAA;AAAA,aAEI,CAAC,GAAD,GAAM,MAAD,CAAQ,CAAY,WAAZ,OAAM,KAAN,CAAR,CAAL,GAAwC,GAAxC,CAFJ;AAAA;AAAA,MAZL;AAAA,G;AAiBA,IAAK,OAAL,sBAAc,MAAd;AAAA;AAAA;AAAA,SACM,MAAD,CAAe,MAAP,CACQ,OADR,CACgB,K,MAAA,CAAO,KAAP,EAAc,GAAd,EADhB,EACiC,GADjC;AAAA,KAEQ,OAFR,CAEgB,K,MAAA,CAAO,MAAP,E,SAAA,EAFhB,EAE+B,SAF/B;AAAA,KAGQ,OAHR,CAGgB,K,MAAA,CAAO,IAAP,E,SAAA,EAHhB,EAG6B,QAH7B,CAAR,EAIS,YAAD,CAAc,K,MAAA,CAAO,MAAP,EAAe,GAAf,EAAd,CAJR,EAKQ,UAAG,YAAH,EAAiB,KAAjB;AAAA;AAAA;AAAA,WACG,oBAAD,CAAuB,KAAvB,EAC6B,CAAQ,KAAR,E,CAAA,CAAN,CAAqB,WAArB,EADvB,CADF;AAAA,IALR,CADL;AAAA,G;AAYA,IAAK,kBAAL,iCAA2B,KAA3B,EAAiC,IAAjC;AAAA;AAAA;AAAA,SACK;AAAA,QAAI,EAAQ,KAAR,eAAJ;AAAA,aACM,gBAAF,EADJ;AAAA;AAAA,MAGK,IAAK,KAAL,GAAY,SAAD,CAAW,CAAO,KAAP,E,CAAA,CAAX,CAAX;AAAA,UACK,KADL,GACW,CAAK,MAAL,EAAY,KAAZ,CADX,CADD;AAAA,aAGC;AAAA,YAAI,QAAU,KAAV,K,WAAA,CAAJ;AAAA,iBACW,KAAP,C,KAAA,C,IAAA,EAAc,WAAD,CAAa,CAAb,CAAb,CADJ;AAAA;AAAA,iBAEI;AAAA,gBAAI,CAAK,OAAS,KAAT,cAAL,IAAqB,CAAG,IAAH,KAAQ,CAAO,KAAP,E,CAAA,CAAR,CAArB,CAAJ;AAAA,qB,aACI,C,KAAA,C,IAAA,E,KAAA,CADJ;AAAA;AAAA,qBAEW,CAAK,MAAL,EAAY,CAAI,IAAJ,IAAU,MAAV,CAAZ,CAAP,C,KAAA,C,IAAA,EAAoC,KAApC,CAFJ;AAAA;AAAA,cAFJ;AAAA;AAAA,UAHD,CAFJ;AAAA;AAAA,MADL;AAAA,G;AAYA,IAAK,oBAAL,mCAA6B,KAA7B,EAAmC,IAAnC;AAAA;AAAA;AAAA,SACK;AAAA,QAAK,WAAD,CAAa,K,MAAA,CAAO,CAAC,GAAD,GAAK,uBAAL,GAA6B,GAA7B,CAAP,E,SAAA,EAAb,CAAJ;AAAA,aACK,OAAD,CAAS,KAAT,CADJ;AAAA;AAAA,aAEI;AAAA,YAAK,WAAD,CAAa,K,MAAA,CAAO,IAAP,E,SAAA,EAAb,CAAJ;AAAA,iBACK,aAAD,CAAe,K,MAAA,CAAO,KAAP,E,SAAA,EAAf,EAA6B,IAA7B,CADJ;AAAA;AAAA,iBAEI;AAAA,gBAAI,CAAG,IAAH,KAAQ,CAAO,KAAP,E,CAAA,CAAR;AAAA,aAAG,IAAH,KAAsB,CAAM,KAAN,C,KAAA,C,EAAA,G,CAAA,CAAtB,CAAJ;AAAA,qBACW,KAAP,CAAc,KAAd,CAAoB,IAApB;AAAA,iBAA2B,IAA3B,CAAgC,aAAhC,CADJ;AAAA;AAAA,qBAEI,KAFJ;AAAA;AAAA,cAFJ;AAAA;AAAA,UAFJ;AAAA;AAAA,MADL;AAAA,G;AASA,IAAK,SAAL,wBAAgB,KAAhB,EAAsB,IAAtB;AAAA;AAAA;AAAA,EACK,IAAK,IAAL,GAAU,IAAV,CADL;AAAA,EAEK;AAAA,QAAM,CAAK,IAAL,IAAU,QAAY,CAAK,MAAL,EAAY,IAAZ,CAAZ,K,WAAA,CAAV,CAAN;AAAA,aACc,IAAR,GAAa,SAAb,CADN;AAAA;AAAA,MAFL;AAAA,SAKK;AAAA,QAAM,QAAU,KAAV,K,WAAA,CAAN;AAAA,MACM;AAAA,YAAM,OAAS,KAAT,cAAN;AAAA,iBAA8B,KAAR,GAAe,UAAD,EAAd,CAAtB;AAAA;AAAA,UADN;AAAA,aAEM;AAAA;AAAA,iBACC;AAAA,gBAAI,EAAO,KAAP,aAAO,KAAP,mBAAO,KAAP,+BAAJ;AAAA,qBACK,kBAAD,CAAsB,KAAtB,EAA4B,IAA5B,CADJ;AAAA;AAAA,qBAEI;AAAA,oBAAI,OAAS,KAAT,cAAJ;AAAA,yBACK,oBAAD,CAAwB,KAAxB,EAA8B,IAA9B,CADJ;AAAA;AAAA,yBAEI,KAFJ;AAAA;AAAA,kBAFJ;AAAA;AAAA,cADD;AAAA;AAAA,iBAME,KAAD,CAAO,CAAQ,OAAR,GAAgB,IAAhB,GACQ,2CADR,GAES,MAAD,CAAc,OAAN,CAAc,KAAd,CAAR,CAFR,CAAP,CAND;AAAA;AAAA,UAFN;AAAA;AAAA,MALL;AAAA,G;AAkBA,CAAK,QAAL,EAAe,WAAf,IAAyB,SAAzB,C;AAEA,IAAK,YAAL,2BAAoB,QAApB;AAAA;AAAA;AAAA,EACK,IAAK,MAAL,GAAY,EAAZ,CADL;AAAA,EAEoB,QAAD,CAAU,QAAV,CAAd,C,OAAA,WAAO,KAAP;AAAA;AAAA;AAAA,IACM,IAAK,IAAL,GAAW,SAAD,CAAW,KAAX,EAAkB,WAAlB,CAAV,CADN;AAAA,WAEM;AAAA,UAAM,IAAN;AAAA,eAAmB,MAAR,GAAe,CAAQ,MAAR,GAAe,IAAf,GAAoB,IAApB,CAAf,CAAX;AAAA;AAAA,QAFN;AAAA,KAFL;AAAA,SAKK,MALL;AAAA,G;AAOA,CAAK,QAAL,EAAe,cAAf,IAA6B,YAA7B","sourcesContent":["(set sibilant 'tokens\n     { 'regex              \"(\\\\/(\\\\\\\\\\\\\\/|[^\\\\/\\\\n])+\\\\/[glim]*)\"\n       'comment            \"(;.*)\"\n       'string             \"(\\\"(([^\\\"]|(\\\\\\\\\\\"))*[^\\\\\\\\])?\\\")\"\n       'number             \"(-?[0-9][0-9.,]*)\"\n       'literal            \"(-?[*.$a-zA-Z^_][*.a-zA-Z0-9-_]*(\\\\?|!)?)\"\n       'special            \"([&']?)\"\n       'dots               \"(\\\\.+)\"\n       'other-char         \"([#><=!\\\\+\\\\/\\\\*-]+)\"\n       'open-paren         \"(\\\\()\"\n       'special-open-paren \"('?\\\\()\"\n       'close-paren        \"(\\\\))\"\n       'alternative-parens \"\\\\{|\\\\[|\\\\}|\\\\]\" })\n\n(set sibilant.tokens 'special-literal\n     (concat sibilant.tokens.special sibilant.tokens.literal))\n\n(set sibilant 'token-precedence\n     '( regex comment string number dots special-literal other-char\n              special-open-paren close-paren alternative-parens))\n\n(set sibilant\n     'ordered-regexes (map sibilant.token-precedence (#(x) (get sibilant.tokens x)))\n     'master-regex (regex (join \"|\" sibilant.ordered-regexes) 'g))\n\n(def tokenize (string)\n     (var tokens []\n          parse-stack [tokens]\n          specials [])\n\n     (def accept-token (token)\n          (send (get parse-stack 0) push token))\n\n     (def increase-nesting ()\n          (var new-arr [])\n          (accept-token new-arr)\n          (parse-stack.unshift new-arr))\n\n     (def decrease-nesting ()\n          (specials.shift)\n          (parse-stack.shift)\n          (when (zero? parse-stack.length)\n                (throw (\"unbalanced parens:\\n\"\n                        (call inspect parse-stack)))))\n\n     (def handle-token (token)\n          (var special (first token)\n               token token)\n\n          (switch special\n                  (\"'\"\n                   (assign token (token.slice 1))\n                   (increase-nesting)\n                   (accept-token 'quote))\n                  (\"^\" (assign token (\"macros.\"(token.slice 1)) special false))\n                  (default (assign special false)))\n\n          (specials.unshift (as-boolean special))\n\n          (switch token\n                  (\"(\" (increase-nesting))\n                  ((\"]\" \"}\" \")\") (decrease-nesting))\n\n                  (\"{\" (increase-nesting) (accept-token 'hash))\n                  (\"[\" (increase-nesting) (accept-token 'list))\n\n                  (default\n                   (if (token.match (regex (\"^\" sibilant.tokens.number \"$\")))\n                       (accept-token (parse-float (token.replace (regex \",\" 'g) \"\")))\n                       (accept-token token))))\n\n          (when (and (!= token \"(\")\n                     (specials.shift))\n                (decrease-nesting)))\n\n\n     (chain string\n            (match sibilant.master-regex)\n            (for-each handle-token))\n\n     (when (> parse-stack.length 1)\n           (error \"unexpected EOF, probably missing a )\\n\"\n                  (call inspect (first parse-stack))))\n     tokens)\n\n(set sibilant 'tokenize tokenize)\n\n(def indent (...args)\n     (concat\n      (chain (compact args)\n             (join \"\\n\")\n             (replace (regex \"^\") \"\\n\")\n             (replace (regex \"\\\\n\" 'g) \"\\n  \"))\n      \"\\n\"))\n\n(def construct-hash (array-of-arrays)\n     (inject {} array-of-arrays\n             (#(object item)\n               (set object (first item) (get object (second item)))\n               object)))\n\n(var macros {})\n(set sibilant 'macros macros)\n\n(set macros 'return\n     (#(token)\n       (var default-return (\"return \" (translate token)))\n\n       (if (list? token)\n           (switch (first token)\n                   ('(return throw do) (translate token))\n                   ('delete\n                    (var delete-macro (get macros 'delete))\n                    (if (< token.length 3) default-return\n                        (concat (apply delete-macro (token.slice 1 -1))\n                                \"\\nreturn \"\n                                (call delete-macro (last token)))))\n                   ('(setf assign)\n                     (if (< token.length 4) default-return\n                         (concat (apply ^setf\n                                        (token.slice 1 (- token.length 2)))\n                                 \"\\nreturn \"\n                                 (apply ^setf (token.slice -2)))))\n                   ('set\n                    (if (< token.length 5) default-return\n                        (do\n                         (var obj (second token)\n                              non-return-part (token.slice 2 (- token.length 2))\n                              return-part (token.slice -2))\n                         (non-return-part.unshift obj)\n                         (return-part.unshift obj)\n                         (concat (^set ...non-return-part)\n                                 \"\\nreturn \"\n                                 (^set ...return-part)))))\n                   (default default-return))\n           default-return)))\n\n(def as-statement (string)\n     (chain string (to-string) (replace (regex \";*\\\\s*$\") \";\")))\n\n(def ^statement (...args)\n     (concat (^call ...args) \";\\n\"))\n\n(def ^do (...body)\n     (var last-index (Math.max 0 (- body.length 1)))\n\n     (set body last-index ['return (get body last-index)])\n\n     (join \"\\n\"\n           (map body (#(arg) (concat (as-statement (translate arg)))))))\n\n(def ^empty-list () 'null)\n\n(def ^call (fn-name ...args)\n     (concat (translate fn-name)\n             \"(\" (join \", \" (map args translate)) \")\"))\n\n(def ^def (fn-name ...args-and-body)\n     (var fn-name-tr (translate fn-name)\n          start (if (match? (regex \"\\\\.\") fn-name-tr) \"\" \"var \"))\n     (concat start fn-name-tr \" = \"\n             (^lambda ...args-and-body)\n             \";\\n\"))\n\n(def ^macro (name ...args-and-body)\n     (var js (^lambda ...args-and-body)\n          name (translate name))\n     (try (set macros name (eval js))\n          (error (\"error in parsing macro \"\n                  name \":\\n\" (indent js))))\n     undefined)\n\n(def ^concat (...args)\n     (\"(\" (join \" + \" (map args translate)) \")\"))\n\n(def transform-args (arglist)\n     (var last null\n          args [])\n\n     (each (arg) arglist\n           (if (or (= \"&rest\" arg) (= \"...\" arg))\n               (assign last arg)\n               (do\n                (args.push [last arg])\n                (assign last null))))\n\n     (when last (error (\"unexpected argument modifier: \" last)))\n\n     args)\n\n\n(def ^reverse (arr)\n     (var reversed [])\n     (each (item) arr (reversed.unshift item))\n     reversed)\n\n(var reverse ^reverse)\n\n(def build-args-string (args rest)\n     (var args-string \"\")\n\n     (if (defined? rest)\n         (concat args-string\n                 \"var \" (translate (second rest))\n                 \" = Array.prototype.slice.call(arguments, \"\n                 args.length \");\\n\")\n         args-string))\n\n(def ^lambda (arglist ...body)\n     (var args (transform-args arglist)\n          rest (first (select args\n                              (#(arg)\n                                (or (= \"&rest\" (first arg))\n                                    (= \"...\" (first arg))))))\n          doc-string undefined)\n\n     (set body (- body.length 1)\n          [ 'return (get body (- body.length 1)) ])\n\n     (when (and (= (typeof (first body)) 'string)\n                (send (first body) match (regex \"^\\\".*\\\"$\")))\n           (assign doc-string\n                   (\"/* \" (eval (body.shift)) \" */\\n\")))\n\n     (var no-rest-args (if rest (args.slice 0 -1) args)\n          args-string (build-args-string no-rest-args rest))\n\n     (\"(function(\"\n      (join \", \" (map args (#(arg) (translate (second arg)))))\n      \") {\"\n      (indent doc-string args-string\n              (join \"\\n\"\n                    (map body\n                         (#(stmt)\n                           (var tstmt (translate stmt))\n                           (concat tstmt\n                                   (if (= (last tstmt) \";\") \"\" \";\"))))))\n      \"})\"))\n\n(set macros \"#\" ^lambda)\n\n(def ^quote (item)\n     (if (= \"Array\" item.constructor.name)\n         (\"[ \" (join \", \" (map item ^quote)) \" ]\")\n         (if (= 'number (typeof item)) item\n             (\"\\\"\" (literal item) \"\\\"\"))))\n\n(def ^hash (...pairs)\n     (when (odd? pairs.length)\n           (error (\"odd number of key-value pairs in hash: \"\n                   (call inspect pairs))))\n\n     (var quote-keys (and (exists? ^state) (^state 'quote-keys))\n          pair-strings (bulk-map pairs (#(key value)\n                                         (concat (if quote-keys\n                                                     (^quote (translate key))\n                                                     (translate key))\n                                                 \": \"\n                                                 (translate value)))))\n     (if (>= 1 pair-strings.length)\n         (\"{ \" (join \", \" pair-strings) \" }\")\n         (\"{\" (indent (join \",\\n\" pair-strings)) \"}\")))\n\n\n(def literal (string)\n     (inject (chain string\n                    (replace (regex \"\\\\*\" 'g) \"_\")\n                    (replace (regex \"\\\\?$\") \"__QUERY\")\n                    (replace (regex \"!$\") \"__BANG\"))\n             (string.match (regex \"-(.)\" 'g))\n             (#(return-string match)\n               (return-string.replace match\n                                      (send (second match) to-upper-case)))))\n\n\n\n(def translate-list-token (token hint)\n     (if (empty? token)\n         (^empty-list)\n         (do\n          (var first (translate (first token))\n               macro (get macros first))\n          (if (defined? macro)\n              (apply macro (token.slice 1))\n              (if (and (string? first) (= \"\\\"\" (first first)))\n                  (^concat ...token)\n                  (apply (get macros (or hint 'call)) token))))))\n\n(def translate-string-token (token hint)\n     (if (token.match (regex (\"^\" sibilant.tokens.literal \"$\")))\n         (literal token)\n         (if (token.match (regex \"^;\"))\n             (token.replace (regex \"^;+\") \"//\")\n             (if (= \"\\\"\" (first token) (last token))\n                 (chain token (split \"\\n\") (join \"\\\\n\\\" +\\n\\\"\"))\n                 token))))\n\n(def translate (token hint)\n     (var hint hint)\n     (when (and hint (undefined? (get macros hint)))\n           (assign hint undefined))\n\n     (when (defined? token)\n           (when (string? token) (assign token (token.trim)))\n           (try\n            (if (list? token)\n                (translate-list-token token hint)\n                (if (string? token)\n                    (translate-string-token token hint)\n                    token))\n            (error (concat e.stack \"\\n\"\n                           \"Encountered when attempting to process:\\n\"\n                           (indent (call inspect token)))))))\n\n\n(set sibilant 'translate translate)\n\n(def translate-all (contents)\n     (var buffer \"\")\n     (each (token) (tokenize contents)\n           (var line (translate token 'statement))\n           (when line (assign buffer (concat buffer line \"\\n\"))))\n     buffer)\n\n(set sibilant 'translate-all translate-all)\n"]}