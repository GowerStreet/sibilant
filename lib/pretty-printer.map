{"version":3,"sources":["/Users/jbr/code/sibilant/src/colors.sibilant","/Users/jbr/code/sibilant/include/macros.sibilant","/Users/jbr/code/sibilant/src/pretty-printer.sibilant"],"names":[],"mappings":"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","sourcesContent":["(def log! (...args)\n     (send (inspect! ..args ) for-each (#(o) (console.log o))))\n\n(def inspect! (...args)\n     (args.map (#(arg) (util.inspect arg { colors false depth 3}))))\n\n(def color (code items depth)\n     (concat code (join \"\" items) \"\\033[0m\"))\n\n(def black (...args) (color \"\\033[0;30m\" args))\n(def red (...args) (color \"\\033[0;31m\" args))\n(def green (...args) (color \"\\033[0;32m\" args))\n(def brown (...args) (color \"\\033[0;33m\" args))\n(def blue (...args) (color \"\\033[0;34m\" args))\n(def purple (...args) (color \"\\033[0;35m\" args))\n(def cyan (...args) (color \"\\033[0;36m\" args))\n(def gray (...args) (color \"\\033[0;37m\" args))\n(def bold-gray (...args) (color \"\\033[1;30m\" args))\n(def bold-red (...args) (color \"\\033[1;31m\" args))\n(def bold-green (...args) (color \"\\033[1;32m\" args))\n(def yellow (...args) (color \"\\033[1;33m\" args))\n(def bold-blue (...args) (color \"\\033[1;34m\" args))\n(def bold-purple (...args) (color \"\\033[1;35m\" args))\n(def bold-cyan (...args) (color \"\\033[1;36m\" args))\n(def white (...args) (color \"\\033[1;37m\" args))\n","(macro join (glue arr)\n       [\"(\" (transpile arr) \").join(\" (transpile glue) \")\"])\n\n(macro set (arr ...kv-pairs)\n       (interleave \"\\n\" (bulk-map kv-pairs\n                                  (#(k v)\n                                    (as-statement [\"(\" (transpile arr) \")\"\n                                                    \"[\" (transpile k) \"] = \" (transpile v) ])))))\n\n(macro get (obj ...keys)\n       [\"(\" (transpile obj) \")\" (map keys (#(key) [\"[\" (transpile key) \"]\"]))])\n\n(macro var (...pairs)\n       (as-statement\n        [\"var \"\n         (interleave \",\\n    \"\n               (bulk-map pairs\n                         (#(name value)\n                           [ (transpile name) \" = \" (transpile value) ])))\n         ]))\n\n(macro alias-macro (current-macro-name desired-macro-name)\n       (var current-macro-name (output-formatter (transpile current-macro-name))\n            desired-macro-name (output-formatter (transpile desired-macro-name)))\n       (set macros desired-macro-name (get macros current-macro-name))\n       null)\n\n(macro send (object method ...args)\n       [(transpile object) \".\" (transpile method)\n               \"(\" (interleave \", \" (map args transpile)) \")\"])\n\n(macro apply (fn arglist)\n       '(send @fn apply this @arglist))\n\n(macro cons (first rest)\n       [\"[ \" (transpile first) \" ].concat(\" (transpile rest) \")\"])\n\n(macro append (list ...additional)\n       '(send @list concat (list ...@additional)))\n\n(macro length (arr)\n       '(get @arr 'length))\n\n(macro ternary (cond if-true if-false)\n       [\"(\" (transpile cond) \") ? \"\n            (transpile if-true) \" : \"\n            (transpile if-false)])\n\n(macro first (arr) '(get @arr 0))\n(macro second (arr) '(get @arr 1))\n(macro third (arr) '(get @arr 2))\n(macro fourth (arr) '(get @arr 3))\n(macro fifth (arr) '(get @arr 4))\n(macro sixth (arr) '(get @arr 5))\n(macro seventh (arr) '(get @arr 6))\n(macro eighth (arr) '(get @arr 7))\n(macro ninth (arr) '(get @arr 8))\n(macro rest (arr)\n       '(send @arr slice 1))\n\n(macro last (arr)\n       '(first (send @arr slice -1)))\n\n\n(macro = (a b) [ (transpile a) \" === \" (transpile b) ])\n(macro +   (...args)\n       [\"(\" (interleave \" + \" (map args transpile)) \")\"])\n(macro -   (...args)\n       [\"(\" (interleave \" - \" (map args transpile)) \")\"])\n(macro *   (...args)\n       [\"(\" (interleave \" * \" (map args transpile)) \")\"])\n(macro /   (...args)\n           [\"(\" (interleave \" / \" (map args transpile)) \")\"])\n(macro or  (...args)\n       [\"(\" (interleave \" || \" (map args transpile)) \")\"])\n\n(macro and (...args)\n       (ternary (= 1 (length args)) (transpile (first args))\n                [\"(\" (interleave \" && \" (map args transpile)) \")\"]))\n\n(macro mod (...args)\n       [\"(\" (interleave \" % \" (map args transpile)) \")\"])\n\n(macro infix-comparator (comparator args)\n       [\"(\" (interleave \" && \"\n                  (map (args.slice 0 -1)\n                       (#(item index)\n                         [ item \" \" comparator \" \" (get args (+ 1 index))])))\n            \")\"])\n\n(macro >  (...args) (macros.infix-comparator  \">\"  (map args transpile)))\n(macro <  (...args) (macros.infix-comparator  \"<\"  (map args transpile)))\n(macro <= (...args) (macros.infix-comparator \"<=\"  (map args transpile)))\n(macro >= (...args) (macros.infix-comparator \">=\"  (map args transpile)))\n(macro != (...args) (macros.infix-comparator \"!==\" (map args transpile)))\n\n(macro pow (base exponent)\n       '(Math.pow @base @exponent))\n\n(macro incr-by (item increment)\n       [ (transpile item) \" += \" (transpile increment)])\n\n(macro incr (item)\n       [\"((\" (transpile item) \")++)\"])\n\n(macro decr (item)\n       [\"((\" (transpile item) \")--)\"])\n\n(macro new (...args)\n       [\"(new \" '(call ...@args) \")\"])\n\n(macro regex (string glim)\n       '(new RegExp @string @(or glim 'undefined)))\n\n(macro timestamp ()\n       [\"\\\"\" (send (new Date) to-string) \"\\\"\"])\n\n(macro comment (...contents)\n       (map contents (#(content)\n                       [\"// \"(recurse-map (transpile content)\n                                    (#(item)\n                                      (ternary item\n                                               (send (output-formatter (transpile item)) replace\n                                                     (regex \"\\n\" 'g) \"\\n// \")\n                                               null)))])))\n\n(macro meta (body)\n       (eval (output-formatter (transpile body))))\n\n(macro zero? (item) '(= @item 0))\n\n(macro empty? (arr)\n       [\"((\" (transpile arr) \").length === 0)\"])\n\n(macro odd? (number)\n       '(= 1 (mod @number 2)))\n\n(macro even? (number)\n       '(= 0 (mod @number 2)))\n\n(macro typeof (thing) [\"typeof \" (transpile thing)])\n\n\n(macro function? (...things)\n       '(and ...@(map things (#(thing) '(= (typeof @thing) 'function)))))\n(macro undefined? (...things)\n       '(and ...@(map things (#(thing) '(= (typeof @thing) 'undefined)))))\n(macro defined? (...things)\n       '(and ...@(map things (#(thing) '(!= (typeof @thing) 'undefined)))))\n(macro number? (...things)\n       '(and ...@(map things (#(thing) '(= (typeof @thing) 'number)))))\n\n(macro if (arg truebody falsebody)\n       [\"(function() {\"\n        (indent [\"if (\" (transpile arg) \") {\"\n                        (indent '(do ...@truebody))\n                        \"} else {\"\n                        (indent '(do ...@falsebody))\n                        \"}\"])\n         \"})()\"])\n\n(macro = (first-thing ...other-things)\n       (var transpiled-first-thing (transpile first-thing))\n       [\"(\" (interleave \" &&\\n \"\n                  (map other-things\n                       (#(thing)\n                         [ transpiled-first-thing\n                                 \" === \"\n                                 (transpile thing) ])))\n            \")\"])\n\n\n(macro string? (thing)\n       [\"typeof(\" (transpile thing) \") === \\\"string\\\"\"])\n\n(macro list? (thing)\n       (var transpiled (transpile thing))\n       [\"((\" transpiled \") && typeof (\" transpiled \") === \\\"object\\\" && (\"\n               transpiled \").constructor.name === \\\"Array\\\")\"])\n\n\n(macro when (arg ...body)\n       [\"(function() {\"\n        (indent [\"if (\" (transpile arg) \") {\"\n                        (indent '(do ...@body))\n                        \"}\"])\n        \"})()\"])\n\n\n(macro not (exp)\n       [\"(!\" (transpile exp) \")\"])\n\n(macro unless (arg ...body)\n       [\"(function() {\"\n        (indent [\"if (\" '(not @arg) \") {\"\n                        (indent '(do ...@body))\n                        \"}\"])\n        \"})()\"])\n\n\n(macro slice (arr start end)\n       '(send @arr slice @start @end))\n\n(macro inspect (...args)\n       (interleave \" + \\\"\\\\n\\\" + \"\n             (map args\n                  (#(arg)\n                    [\"\\\"\" arg \":\\\" + \" (transpile arg)]))))\n\n(macro each (item array ...body)\n       '(send @array for-each\n              (lambda @{ node this args item } ...@body)))\n\n(macro assign (...args)\n       (interleave \"\\n\"\n             (bulk-map args (#(name value)\n                              (as-statement [ (transpile name) \" = \"\n                                                    (transpile value)])))))\n\n\n\n\n(macro macro-list ()\n       '(list @(Object.keys macros)))\n\n(macro macroexpand (name)\n       (var macro (get macros (transpile name)))\n       (if macro\n           (\"// macro: \" name \"\\n\" (macro.to-string))\n           \"undefined\"))\n\n\n(macro throw (...string)\n       [\"throw new Error (\" (interleave \" \" (map string transpile)) \")\"])\n\n(macro as-boolean (expr)\n       [\"(!!(\" (transpile expr) \"))\"])\n\n(macro try (tryblock catchblock)\n       [\"(function() {\"\n        (indent [\"try {\"\n                 (indent '(do @tryblock))\n                 \"} catch (e) {\"\n                 (indent '(do @catchblock))\n                 \"}\"])\n        \"})()\"])\n\n(macro state (...pairs)\n       (set macros.state 'data (or macros.state.data {}))\n\n       (if (= 1 (length pairs))\n           (get macros.state.data (output-formatter (transpile (first pairs))))\n           (do (bulk-map pairs (#(k v) (set macros.state.data (output-formatter (transpile k)) (eval (output-formatter (transpile v))))))\n               null)))\n\n(macro symbol ()\n       (var symbol-count (or (macros.state 'symbol-count) 0)\n            new-symbol-count (+ 1 symbol-count))\n       (macros.state 'symbol-count new-symbol-count)\n       [\"$_symbol\" new-symbol-count \"_$\"])\n\n(macro while (condition ...block)\n       (var symbol (macros.symbol))\n       '(scoped-without-source\n         (var @symbol)\n         @[\"while (\" (transpile condition) \") {\"\n           (indent '(assign @symbol (scoped-without-source ...@block)))\n            \"}\"]\n         @symbol))\n\n(macro until (condition ...block)\n       '(while (not @condition) ...@block))\n\n(macro thunk (...body)\n       '(lambda @{ node this args [] } ...@body))\n(alias-macro thunk #>)\n\n(macro keys (obj)\n       '(Object.keys @obj))\n\n(macro delete (...objects)\n       (interleave \"\\n\" (map objects (#(obj)\n                                 (as-statement [\"delete \" (transpile obj)])))))\n\n(macro delmacro (...macro-names)\n       (each (macro-name) macro-names\n             (delete (get macros (output-formatter (transpile macro-name)))))\n       null)\n(alias-macro delmacro delete-macro)\n\n\n(macro rename-macro (current-macro-name desired-macro-name)\n       (macros.alias-macro current-macro-name desired-macro-name)\n       (macros.delmacro current-macro-name)\n       null)\n\n(macro arguments ()\n       [\"(Array.prototype.slice.apply(arguments))\"])\n\n(macro scoped (...body)\n       '(call (lambda @{node this args []} ...@body)))\n\n(macro scoped-without-source (...body)\n       [\"(function() {\" (indent '(do ...@body)) \"})()\"])\n       \n\n(macro each-key (as obj ...body)\n       '(scoped-without-source\n         @[\"for (var \" (transpile as) \" in \" (transpile obj) \") \"\n            (as-statement '(scoped-without-source ...@body))\n            ]\n         @obj))\n\n(macro match? (regexp string)\n       '(send @string match @regexp))\n\n(macro switch (obj ...cases)\n       [\"(function() {\"\n         (indent [\"switch(\" (transpile obj) \") {\"\n                   (map cases (#(case-def)\n                                (var case-name-node (first case-def.contents)\n                                     case-labels (if (or (node? case-name-node 'expression)\n                                                         (node? case-name-node 'bracket))\n                                                     case-name-node.contents\n                                                     [case-name-node])\n                                     case-string (interleave \"\\n\" (map case-labels (#(c)\n                                                                                     (if (= 'default c.token)\n                                                                                         \"default:\"\n                                                                                         [\"case \" (transpile c) \":\"])))))\n                                [\"\\n\" case-string (indent '(do ...@(rest case-def.contents)))]))\n                   \"}\"])\n         \"})()\"])\n\n(macro if (...args)\n       [\"(function() {\"\n        (indent\n         (interleave \" else \"\n               (bulk-map args\n                         (#(cond val)\n                           (if (!= (typeof val) 'undefined)\n                                 [\"if (\" (transpile cond) \") {\"\n                                   (indent '(do @val))\n                                   \"}\"]\n                                 [\"{\" (indent '(do @cond)) \"}\"])))))\n        \"})()\"])\n\n(macro chain (object ...calls)\n       (if (= 0 calls.length) (transpile object)\n           (= 1 calls.length) '(send @object ...@(get (first calls) 'contents))\n           (do\n            (var lines (map calls (#(call index)\n                                    [\".\" (transpile (first call.contents))\n                                         \"(\" (interleave \", \" (map (rest call.contents) transpile)) \")\"])))\n\n            [ (transpile object)\n              (first lines)\n              \"\\n  \"\n              (recurse-indent\n               (interleave \"\\n\" (rest lines)))])))\n\n(macro chainable (...names)\n       (each (name) names\n             '(macro @name (target ...calls)\n                     '(chain (call @name @target) ...@calls))))\n\n(macro let (args body)\n       [\"let (\"\n         (interleave \", \" (bulk-map args\n                   (#(k v)\n                     [ (transpile k) \" = \" (transpile v) ])))\n         (if (undefined? body) \");\"\n             [\") {\" (indent (transpile body)) \"}\"])])\n\n(macro instance-of? (item type)\n       [\"(\" (transpile item) \" instanceof \" (transpile type) \")\"])\n\n(macro slice (list begin end)\n       [\"Array.prototype.slice.call(\" (transpile list)\n                                      \", \" (or (transpile begin) 0)\n                                      (if (defined? end) (\", \" (transpile end) \")\") \")\")])\n\n(macro includes? (list item)\n       '(!= -1 (send @list index-of @item)))\n\n(macro excludes? (list item)\n       '(= -1 (send @list index-of @item)))\n\n(macro exists? (thing)\n       '(and (defined? @thing) (!= @thing null)))\n\n(macro with-state (k v ...body)\n       (var before (macros.state k))\n       (macros.state k v)\n       (var return-value\n            (interleave \"\\n\" (map body transpile)))\n       (macros.state k before)\n       return-value)\n\n(macro join (glue arr)\n       (if (and (defined? glue) (undefined? arr))\n           (assign arr glue glue undefined))\n       [\"(\" (transpile arr) \").join(\" (if glue (transpile glue) \"\\\"\\\"\") \")\"])\n\n(macro var (...pairs)\n       (var destructured [])\n       (bulk-map pairs (#(lhs rhs)\n                         (switch lhs.type\n                                 ('bracket\n                                  (var symbol (macros.symbol))\n                                  (destructured.push [symbol (transpile rhs)])\n                                  (each (item index) lhs.contents\n                                        (destructured.push [(transpile item) '(get @symbol @index)]))\n                                  (destructured.push [symbol 'undefined]))\n                                 ('brace\n                                  (var symbol (macros.symbol))\n                                  (destructured.push [symbol (transpile rhs)])\n                                  (each (item index) lhs.contents\n                                        (var tr-item (transpile item))\n                                        (destructured.push [tr-item '(get @symbol @[\"\\\"\" tr-item \"\\\"\"])]))\n                                  (destructured.push [symbol 'undefined]))\n\n                                 (default\n                                  (destructured.push [(transpile lhs)\n                                                       (if rhs (transpile rhs) 'undefined)])))))\n\n       (as-statement\n        [\"var \" (interleave \",\\n    \"\n           (map destructured\n                (#(pair)\n                  [(first pair) \" = \" (second pair)]\n                  )))]))\n\n\n(debug false)","(include \"./colors.sibilant\")\n\n(def sibilant.pretty-print (node color)\n     (when (undefined? color) (assign color true))\n\n     (real-newlines (if (node? node) (do\n                       (var pretty-printer (or (get sibilant.pretty-print node.type)\n                                               sibilant.pretty-print.default))\n                       (pretty-printer node color))\n         (list? node)\n           (concat (if color (black \"[\") \"\")\n                   (join (if color (black \",\") \"\") (map node prettify))\n                   (if color (black \"]\") \"\"))\n\n           color (red (util.inspect node))\n           (real-newlines (util.inspect node)))))\n\n\n(def sibilant.pretty-print.default (node color)\n     (real-newlines (sibilant.pretty-print.colorize node color\n      (concat\n       (if (and node.modifiers node.modifiers.length)\n           (join \"\" (map node.modifiers (#(n) (sibilant.pretty-print n color)))) \"\")\n       node.token\n       (if (and node.contents node.contents.length)\n           (join \" \" (map node.contents (#(n) (sibilant.pretty-print n color)))) \"\")\n       (or (get acceptable-pairs node.token) \"\")))))\n\n(def sibilant.pretty-print.root (node color)\n     (join \"\\n\" (map node.contents (#(n) (sibilant.pretty-print n color)))))\n\n(def sibilant.pretty-print.output (node color)\n     (concat (if color (black \"{\") \"\")\n             (if (list? node.contents)\n                 (join (if color (black \",\") \"\")\n                       (map node.contents (#(c) (sibilant.pretty-print.colorize node color (prettify c)))))\n                 (sibilant.pretty-print.colorize node color node.contents))\n             (if color (black \"}\") \"\")))\n\n(def real-newlines (node)\n     (chain node (split \"\\\\n\") (join \"\\n\")))\n\n\n(def sibilant.pretty-print.colorize (node color string)\n     (if (not color) string\n         (= node.hint 'macro) (yellow string)\n         (= node.type 'output) (purple string)\n         (green string)))\n\n(var prettify sibilant.pretty-print)"]}