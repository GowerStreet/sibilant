{"version":3,"sources":["/Users/jbr/code/sibilant/src/require-and-include.sibilant"],"names":[],"mappings":"AAAA,IAAK,QAAL,uBAAe,KAAf;AAAA;AAAA;AAAA,EACM,mBAAD,EADL;AAAA,SAEM,eAAD,CAAmB,SAAD,CAAY,WAAD,CAAc,KAAD,CAAO,KAAP,CAAb,CAAX,CAAlB,CAFL;AAAA,G;AAIA,IAAK,SAAL,wBAAgB,KAAhB;AAAA;AAAA;AAAA,EACM,mBAAD,EADL;AAAA,SAEM,YAAD,CAAe,SAAD,CAAY,WAAD,CAAc,KAAD,CAAO,KAAP,CAAb,CAAX,CAAd,CAFL;AAAA,G;AAIA,CAAK,QAAL,EAAe,UAAf,IAAwB,QAAxB,C;AAEK,gBAAL;AAAA;AAAA;AAAA,SACK,CAAM,oBAAD,EAAL,EAA8B,SAA9B,CADL;AAAA,G;AAGK,qBAAL,oCAA6B,IAA7B;AAAA;AAAA;AAAA,SACM,YAAD,CAAc,K,MAAA,CAAO,UAAP,E,SAAA,EAAd,EAAiC,IAAjC,CADL;AAAA,G;AAGA,CAAK,QAAL,EAAe,MAAf,IAAqB,eAArB,C;AAEA,IAAK,cAAL,6BAAwB,GAAxB,EAA4B,IAA5B,EAAiC,EAAjC;AAAA;AAAA;AAAA,EACK,IAAK,MAAL,GAAY;AAAA,IAAE,GAAF,EAAM,YAAN;AAAA,IACE,IADF,EACO,aADP;AAAA,GAAZ,CADL;AAAA,EAGK,CAAK,QAAL,EACM,KADN,IACW,GADX;AAAA,GAAK,QAAL,EAEM,MAFN,IAEW,IAFX,CAHL;AAAA,EAOK,IAAK,MAAL,GAAa,EAAD,EAAZ,CAPL;AAAA,EASK,CAAK,QAAL,EACM,KADN,IACW,UADX;AAAA,GAAK,QAAL,EAEM,MAFN,IAEW,WAFX,CATL;AAAA,SAaK,MAbL;AAAA,G;AAeA,CAAK,QAAL,EAAe,aAAf,IAA4B,IAA5B,C;AAEK,qBAAL,oCAA6B,QAA7B;AAAA;AAAA;AAAA,SACM,eAAD,CAAmB,sBAAD,CAAyB,QAAzB,CAAlB,CADL;AAAA,G;AAGK,qBAAL,oCAA6B,QAA7B;AAAA;AAAA;AAAA,EACM,mBAAD,EADL;AAAA,EAEK,IAAK,MAAL,GAAY,8BAAZ,CAFL;AAAA,EAGK,CAAK,oBAAL,EAA2B,WAA3B,IAAsC,IAAtC,CAHL;AAAA,EAIK,IAAK,OAAL,GAAc,qBAAD,CAAwB,QAAxB,CAAb,CAJL;AAAA,EAKK,CAAK,oBAAL,EAA2B,WAA3B,IAAsC,MAAtC,CALL;AAAA,SAMK,OANL;AAAA,G;AAQK,uBAAL,sCAA8B,IAA9B;AAAA;AAAA;AAAA,SACM,gBAAD,CAAmB,IAAD,CAAO,eAAD,CAAmB,SAAD,CAAW,IAAX,CAAlB,CAAN,CAAlB,CADL;AAAA","sourcesContent":["(def sibilize (input)\n     (sibilant.initialize)\n     (output-formatter (transpile (restructure (parse input)))))\n\n(def sourcemap (input)\n     (sibilant.initialize)\n     (sourcemapper (transpile (restructure (parse input)))))\n\n(set sibilant 'sibilize sibilize)\n\n(def sibilant.version ()\n     (get (sibilant.package-info) 'version))\n\n(def sibilant.strip-shebang (data)\n     (data.replace (regex \"^#!.*\\\\n\") \"\\n\"))\n\n(set sibilant 'file 'eval.sibilant)\n\n(def with-dir-and-file (dir file fn)\n     (var before { dir sibilant.dir\n                   file sibilant.file })\n     (set sibilant\n          'dir  dir\n          'file file)\n\n     (var retval (fn))\n\n     (set sibilant\n          'dir  before.dir\n          'file before.file)\n\n     retval)\n\n(set sibilant 'source-cache {})\n\n(def sibilant.sibilize-file (file-name)\n     (output-formatter (sibilant.transpile-file file-name)))\n\n(def sibilant.sibilize-json (file-name)\n     (sibilant.initialize)\n     (var before sibilant.macros.hash.quote-keys)\n     (set sibilant.macros.hash 'quote-keys true)\n     (var content (sibilant.sibilize-file file-name))\n     (set sibilant.macros.hash 'quote-keys before)\n     content)\n\n(def sibilant.macros.include (file)\n     (sibilant.include (eval (output-formatter (transpile file)))))\n\n"]}