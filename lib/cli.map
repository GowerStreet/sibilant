{"version":3,"sources":["/Users/jbr/code/sibilant/src/cli.sibilant"],"names":[],"mappings":"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","sourcesContent":["(var sibilant (require \"../lib/sibilant.js\")\n     path     (require 'path)\n     options  (require \"../lib/options.js\")\n     fs       (require 'fs)\n     mod      (require 'module))\n\n(def run-in-sandbox (js input-path)\n     (when (undefined? input-path)\n           (assign input-path \".\"))\n     (set require.main\n          'module-cache {}\n          'filename (fs.realpath-sync input-path)\n          'paths (mod.*node-module-paths\n                  (path.dirname\n                   (fs.realpath-sync input-path))))\n     (require.main.*compile js require.main.filename))\n\n\n(var cli {\n          v         'version\n           h         'help\n           unhandled 'help\n           f         'file\n           o         'output\n           x         'execute\n           e         'eval\n           i         'input\n           m         'sourcemap\n           after-break false\n           execute   false\n           unlabeled 'file})\n\n(def cli.version ()\n     (console.log (sibilant.version-string)))\n\n(def cli.repl (args) (require \"../lib/repl\"))\n\n(def read-stdin (fn)\n     (var stdin process.stdin\n          data \"\")\n     (stdin.resume)\n     (stdin.set-encoding \"utf8\")\n     (stdin.on 'data (#(chunk) (assign data (concat data chunk))))\n     (stdin.on 'end (#> (fn data))))\n\n(def cli.eval (args options)\n     (set options 'execute true)\n     (cli.input args options))\n\n(def cli.input (args options)\n     (def process (sibilant-code)\n          (var js-code (sibilant.sibilize sibilant-code))\n          (if options.execute\n              (run-in-sandbox js-code)\n              (console.log js-code)))\n     (if (empty? args)\n         (read-stdin process)\n         (process (first args))))\n\n(def cli.help (args options)\n     (fs.read-file (concat **dirname \"/../cli-help\") { encoding 'utf8 }\n                   (#(err data)\n                     (when err (throw err))\n                     (console.log data))))\n\n(var cli-options (options cli)\n     args (or cli-options.after-break []))\n\n(args.unshift (second process.argv) \"FILENAME\")\n\n(set process 'argv args 'ARGV args)\n\n(when (empty? (keys cli-options)) (cli.repl))\n\n(var output-dir\n     (when cli-options.output (first cli-options.output)))\n\n(each (input-file) (or cli-options.file [])\n      (var input-path (path.join (process.cwd) input-file)\n           input-extname (path.extname input-path)\n           translated (if (= \".son\" input-extname)\n                          (sibilant.sibilize-json input-path)\n                          (sibilant.sibilize-file input-path)))\n\n      (if output-dir\n          (do\n           (var output-extname (if (= \".son\" input-extname)\n                                   \".json\" \".js\")\n                input-basename (path.basename input-path input-extname)\n                output-path (concat (path.join output-dir input-basename)\n                                    output-extname))\n           (fs.write-file output-path translated)\n           \n           (when cli-options.sourcemap\n                 ;; yes, it's dumb that this reads the file twice\n                 (var map-path (concat (path.join output-dir input-basename) \".map\"))\n                 (fs.write-file map-path (sibilant.sourcemap-file input-path))))\n          \n          cli-options.execute\n          (run-in-sandbox translated input-path)\n          (console.log translated)))"]}