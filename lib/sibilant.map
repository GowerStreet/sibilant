{"version":3,"sources":["/Users/jbr/code/sibilant/src/sibilant.sibilant","/Users/jbr/code/sibilant/src/node.sibilant","/Users/jbr/code/sibilant/include/macros.sibilant","/Users/jbr/code/sibilant/src/colors.sibilant","/Users/jbr/code/sibilant/src/pretty-printer.sibilant","/Users/jbr/code/sibilant/src/output-formatter.sibilant","/Users/jbr/code/sibilant/src/sourcemap.sibilant","/Users/jbr/code/sibilant/include/functional.sibilant","/Users/jbr/code/sibilant/src/parser.sibilant","/Users/jbr/code/sibilant/src/restructurer.sibilant","/Users/jbr/code/sibilant/src/macros.sibilant","/Users/jbr/code/sibilant/src/helpers.sibilant","/Users/jbr/code/sibilant/src/core.sibilant","/Users/jbr/code/sibilant/src/transpiler.sibilant","/Users/jbr/code/sibilant/src/require-and-include.sibilant"],"names":[],"mappings":"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","sourcesContent":["(send (require \"source-map-support\") install)\n(meta \"//# sourceMappingURL=./sibilant.map\\n\")\n\n(include \"./node\")\n(include \"./pretty-printer\")\n(include \"./output-formatter\")\n(include \"./sourcemap\")\n(include \"../include/functional\")\n(include \"./parser\")\n(include \"./restructurer\")\n(include \"./macros\")\n(include \"./helpers\")\n(include \"./core\")\n(include \"./transpiler\")\n(include \"./require-and-include\")\n\n","(var sibilant exports\n     util     (require 'util)\n     path     (require 'path)\n     fs       (require 'fs)\n     error    (#(str) (throw str))\n     inspect  util.inspect)\n\n(set sibilant 'dir (process.cwd))\n\n\n(def sibilant.transpile-file (file-name)\n     (with-dir-and-file (path.dirname file-name) file-name\n                        (#>\n                         (var source (sibilant.strip-shebang\n                                      (fs.read-file-sync file-name \"utf8\")))\n\n                         (set sibilant.source-cache file-name source)\n                         (sibilant.initialize)\n                         (transpile (restructure (parse source))))))\n\n\n(def sibilant.sourcemap-file (file-name)\n     (with-dir-and-file (path.dirname file-name) file-name\n                        (#> (sourcemap\n                             (sibilant.strip-shebang\n                              (fs.read-file-sync file-name \"utf8\"))))))\n\n\n(set require.extensions \".sibilant\"\n     (#(module filename)\n       (var content (sibilant.sibilize-file filename))\n       (module.*compile content filename)))\n\n(set require.extensions \".son\"\n     (#(module filename)\n       (var content (sibilant.sibilize-json filename))\n       (set module 'exports (JSON.parse content))))\n\n\n(def sibilant.package-info ()\n     (var fs (require 'fs))\n     (JSON.parse (fs.read-file-sync\n                  (concat **dirname \"/../package.json\"))))\n\n(def sibilant.version-string ()\n     (var package (sibilant.package-info)\n          path (require 'path))\n     (concat package.name \" version \" package.version\n             \"\\n(at \" (path.join **dirname \"..\") \")\"))\n\n\n(def sibilant.initialize ()\n     (unless (or sibilant.loaded? sibilant.loading?)\n             (set sibilant 'loading? true)\n             (sibilant.load-macros)\n             (delete sibilant.loading?)\n             (set sibilant 'loaded? true)))\n     \n(def sibilant.load-macros ()\n     (sibilant.include (path.normalize (concat **dirname \"/../include/macros\"))))\n\n\n(def sibilant.include (file)\n     (when (not (file.match (regex \"\\\\.(sibilant|son)$\")))\n           (assign file (concat file \".sibilant\")))\n\n     (when (file.match (regex \"^\\\\.\\\\.?/\"))\n           (assign file (concat sibilant.dir \"/\" file)))\n\n     (var resolved-file\n          (try (require.resolve file)\n               (error (\"Failed to resolve file for inclusion: \" file))))\n\n     (sibilant.transpile-file resolved-file))\n","(namespace core)\n\n(macro ternary (cond if-true if-false)\n       [\"(\" (transpile cond) \") ? \"\n            (transpile if-true) \" : \"\n            (transpile if-false)])\n\n(macro join (glue arr)\n       [\"(\" (transpile arr) \").join(\" (transpile glue) \")\"])\n\n(macro set (arr ...kv-pairs)\n       (interleave \"\\n\" (bulk-map kv-pairs\n                                  (#(k v)\n                                    (as-statement [\"(\" (transpile arr) \")\"\n                                                    \"[\" (transpile k) \"] = \" (transpile v) ])))))\n\n(macro var (...pairs)\n       (as-statement\n        [\"var \"\n         (interleave \",\\n    \"\n               (bulk-map pairs\n                         (#(name value)\n                           [ (transpile name) \" = \" (transpile value) ])))\n         ]))\n\n(macro get (obj ...keys)\n       [\"(\" (transpile obj) \")\" (map keys (#(key)\n                                            [\"[\" (transpile key) \"]\"]))])\n\n(macro alias-macro (current-macro-name desired-macro-name)\n       (var current-macro-name (output-formatter (transpile current-macro-name))\n            desired-macro-name (output-formatter (transpile desired-macro-name)))\n       (set sibilant.macros.namespace\n            desired-macro-name (get sibilant.macros.namespace current-macro-name))\n       null)\n\n(macro send (object method ...args)\n       [(transpile object) \".\" (transpile method)\n               \"(\" (interleave \", \" (map args transpile)) \")\"])\n\n(macro apply (fn arglist)\n       '(send @fn apply this @arglist))\n\n(macro cons (first rest)\n       [\"[ \" (transpile first) \" ].concat(\" (transpile rest) \")\"])\n\n(macro append (list ...additional)\n       '(send @list concat (list ...@additional)))\n\n(macro length (arr)\n       '(get @arr 'length))\n\n(macro first (arr) '(get @arr 0))\n(macro second (arr) '(get @arr 1))\n(macro third (arr) '(get @arr 2))\n(macro fourth (arr) '(get @arr 3))\n(macro fifth (arr) '(get @arr 4))\n(macro sixth (arr) '(get @arr 5))\n(macro seventh (arr) '(get @arr 6))\n(macro eighth (arr) '(get @arr 7))\n(macro ninth (arr) '(get @arr 8))\n(macro rest (arr)\n       '(send @arr slice 1))\n\n(macro last (arr)\n       '(first (send @arr slice -1)))\n\n\n(macro = (a b) [ (transpile a) \" === \" (transpile b) ])\n(macro +   (...args)\n       [\"(\" (interleave \" + \" (map args transpile)) \")\"])\n(macro -   (...args)\n       [\"(\" (interleave \" - \" (map args transpile)) \")\"])\n(macro *   (...args)\n       [\"(\" (interleave \" * \" (map args transpile)) \")\"])\n(macro /   (...args)\n           [\"(\" (interleave \" / \" (map args transpile)) \")\"])\n(macro or  (...args)\n       [\"(\" (interleave \" || \" (map args transpile)) \")\"])\n\n(macro and (...args)\n       (ternary (= 1 (length args)) (transpile (first args))\n                [\"(\" (interleave \" && \" (map args transpile)) \")\"]))\n\n(macro mod (...args)\n       [\"(\" (interleave \" % \" (map args transpile)) \")\"])\n\n(macro infix-comparator (comparator args)\n       [\"(\" (interleave \" && \"\n                  (map (args.slice 0 -1)\n                       (#(item index)\n                         [ item \" \" comparator \" \" (get args (+ 1 index))])))\n            \")\"])\n\n(macro >  (...args) (^infix-comparator  \">\"  (map args transpile)))\n(macro <  (...args) (^infix-comparator  \"<\"  (map args transpile)))\n(macro <= (...args) (^infix-comparator \"<=\"  (map args transpile)))\n(macro >= (...args) (^infix-comparator \">=\"  (map args transpile)))\n(macro != (...args) (^infix-comparator \"!==\" (map args transpile)))\n\n(macro pow (base exponent)\n       '(Math.pow @base @exponent))\n\n(macro incr-by (item increment)\n       [ (transpile item) \" += \" (transpile increment)])\n\n(macro incr (item)\n       [\"((\" (transpile item) \")++)\"])\n\n(macro decr (item)\n       [\"((\" (transpile item) \")--)\"])\n\n(macro new (...args)\n       [\"(new \" '(call ...@args) \")\"])\n\n(macro regex (string glim)\n       '(new RegExp @string @(or glim 'undefined)))\n\n(macro timestamp ()\n       [\"\\\"\" (send (new Date) to-string) \"\\\"\"])\n\n(macro comment (...contents)\n       (map contents (#(content)\n                       [\"// \"(recurse-map (transpile content)\n                                    (#(item)\n                                      (ternary item\n                                               (send (output-formatter (transpile item)) replace\n                                                     (regex \"\\n\" 'g) \"\\n// \")\n                                               null)))])))\n\n(macro zero? (item) '(= @item 0))\n\n(macro empty? (arr)\n       [\"((\" (transpile arr) \").length === 0)\"])\n\n(macro odd? (number)\n       '(= 1 (mod @number 2)))\n\n(macro even? (number)\n       '(= 0 (mod @number 2)))\n\n(macro typeof (thing) [\"typeof \" (transpile thing)])\n\n\n(macro function? (...things)\n       '(and ...@(map things (#(thing) '(= (typeof @thing) 'function)))))\n(macro undefined? (...things)\n       '(and ...@(map things (#(thing) '(= (typeof @thing) 'undefined)))))\n(macro defined? (...things)\n       '(and ...@(map things (#(thing) '(!= (typeof @thing) 'undefined)))))\n(macro number? (...things)\n       '(and ...@(map things (#(thing) '(= (typeof @thing) 'number)))))\n\n(macro if (arg truebody falsebody)\n       [\"(function() {\"\n        (indent [\"if (\" (transpile arg) \") {\"\n                        (indent '(do ...@truebody))\n                        \"} else {\"\n                        (indent '(do ...@falsebody))\n                        \"}\"])\n         \"})()\"])\n\n(macro = (first-thing ...other-things)\n       (var transpiled-first-thing (transpile first-thing))\n       [\"(\" (interleave \" &&\\n \"\n                  (map other-things\n                       (#(thing)\n                         [ transpiled-first-thing\n                                 \" === \"\n                                 (transpile thing) ])))\n            \")\"])\n\n\n(macro string? (thing)\n       [\"typeof(\" (transpile thing) \") === \\\"string\\\"\"])\n\n(macro list? (thing)\n       (var transpiled (transpile thing))\n       [\"((\" transpiled \") && typeof (\" transpiled \") === \\\"object\\\" && (\"\n               transpiled \").constructor.name === \\\"Array\\\")\"])\n\n\n(macro when (arg ...body)\n       [\"(function() {\"\n        (indent [\"if (\" (transpile arg) \") {\"\n                        (indent '(do ...@body))\n                        \"}\"])\n        \"})()\"])\n\n\n(macro not (exp)\n       [\"(!\" (transpile exp) \")\"])\n\n(macro unless (arg ...body)\n       [\"(function() {\"\n        (indent [\"if (\" '(not @arg) \") {\"\n                        (indent '(do ...@body))\n                        \"}\"])\n        \"})()\"])\n\n\n(macro slice (arr start end)\n       '(send @arr slice @start @end))\n\n(macro inspect (...args)\n       (interleave \" + \\\"\\\\n\\\" + \"\n             (map args\n                  (#(arg)\n                    [\"\\\"\" arg \":\\\" + \" (transpile arg)]))))\n\n(macro each (item array ...body)\n       '(send @array for-each\n              (lambda @{ node this args item } ...@body)))\n\n(macro assign (...args)\n       (interleave \"\\n\"\n             (bulk-map args (#(name value)\n                              (as-statement [ (transpile name) \" = \"\n                                                    (transpile value)])))))\n\n\n\n(macro macro-expand (name)\n       (var macro (get macros (output-formatter (transpile name))))\n       (if macro\n           (macro.to-string)\n           \"undefined\"))\n\n(macro throw (...string)\n       [\"throw new Error (\" (interleave \" \" (map string transpile)) \")\"])\n\n(macro as-boolean (expr)\n       [\"(!!(\" (transpile expr) \"))\"])\n\n(macro try (tryblock catchblock)\n       [\"(function() {\"\n        (indent [\"try {\"\n                 (indent '(do @tryblock))\n                 \"} catch (e) {\"\n                 (indent '(do @catchblock))\n                 \"}\"])\n         \"})()\"])\n\n(macro log-pretty (label arg)\n       (var node this)\n       (when (undefined? arg)\n             (assign arg label\n                     label [\"\\\"\" (prettify label false) \"\\\"\"]))\n       `(console.log (concat @[\"\\\"\" node.file \":\" node.line \"\\\"\"] \" \" @label \" = \" (prettify @arg))))\n(alias-macro log-pretty pretty-log)\n\n\n(macro state (...pairs)\n       (if (= 1 (length pairs))\n           (get sibilant.state (output-formatter (transpile (first pairs))))\n           (do (bulk-map pairs (#(k v) (set sibilant.state (output-formatter (transpile k)) (eval (output-formatter (transpile v))))))\n               null)))\n\n(macro symbol ()\n       (var symbol-count (or (get sibilant.state 'symbol-count) 0)\n            new-symbol-count (+ 1 symbol-count))\n       (^state 'symbol-count new-symbol-count)\n       [\"$_symbol\" new-symbol-count \"_$\"])\n\n(macro while (condition ...block)\n       (var symbol (^symbol))\n       '(scoped-without-source\n         (var @symbol)\n         @[\"while (\" (transpile condition) \") {\"\n           (indent '(assign @symbol (scoped-without-source ...@block)))\n            \"}\"]\n         @symbol))\n\n(macro until (condition ...block)\n       '(while (not @condition) ...@block))\n\n(macro match? (regexp string)\n       '(send @string match @regexp))\n\n(macro match-regex? (string regexp-string glim)\n       '(match? (regex @regexp-string @glim) @string))\n\n(macro replace (string regexp-string replacement)\n       '(send @string replace\n              (regex @regexp-string)\n              @replacement))\n\n(macro replace-all (string regexp-string replacement)\n       '(send @string replace (regex @regexp-string 'g) @replacement))\n\n(macro thunk (...body)\n       '(lambda @{ node this args [] }\n       ...@(map-node body\n                 (#(node)\n                   (if (node? node 'arg-placeholder)\n                       '(argument @(replace node.token \"^#\" \"\"))\n                       node)))))\n(alias-macro thunk #>)\n\n(macro keys (obj)\n       '(Object.keys @obj))\n\n(macro delete (...objects)\n       (interleave \"\\n\" (map objects (#(obj)\n                                 (as-statement [\"delete \" (transpile obj)])))))\n\n(macro delmacro (...macro-names)\n       (each (macro-name) macro-names\n             (delete (get sibilant.macros.namespace (output-formatter (transpile macro-name)))))\n       null)\n(alias-macro delmacro delete-macro)\n\n\n(macro rename-macro (current-macro-name desired-macro-name)\n       (^alias-macro current-macro-name desired-macro-name)\n       (^delmacro current-macro-name)\n       null)\n\n(macro arguments ()\n       [\"(Array.prototype.slice.apply(arguments))\"])\n\n(macro argument (n)\n       '(get arguments @n))\n\n(macro scoped (...body)\n       '(call (lambda @{node this args []} ...@body)))\n\n(macro scoped-without-source (...body)\n       [\"(function() {\" (indent '(do ...@body)) \"})()\"])\n       \n\n(macro each-key (as obj ...body)\n       '(scoped-without-source\n         @[\"for (var \" (transpile as) \" in \" (transpile obj) \") \"\n            (as-statement '(scoped-without-source ...@body))\n            ]\n         @obj))\n\n(macro switch (obj ...cases)\n       [\"(function() {\"\n         (indent [\"switch(\" (transpile obj) \") {\"\n                   (map cases (#(case-def)\n                                (var case-name-node (first case-def.contents)\n                                     case-labels (if (or (node? case-name-node 'expression)\n                                                         (node? case-name-node 'bracket))\n                                                     case-name-node.contents\n                                                     [case-name-node])\n                                     case-string (interleave \"\\n\" (map case-labels (#(c)\n                                                                                     (if (= 'default c.token)\n                                                                                         \"default:\"\n                                                                                         [\"case \" (transpile c) \":\"])))))\n                                [\"\\n\" case-string (indent '(do ...@(rest case-def.contents)))]))\n                   \"}\"])\n         \"})()\"])\n\n(macro if (...args)\n       [\"(function() {\"\n        (indent\n         (interleave \" else \"\n               (bulk-map args\n                         (#(cond val)\n                           (if (!= (typeof val) 'undefined)\n                                 [\"if (\" (transpile cond) \") {\"\n                                   (indent '(do @val))\n                                   \"}\"]\n                                 [\"{\" (indent '(do @cond)) \"}\"])))))\n        \"})()\"])\n\n(macro chain (object ...calls)\n       (if (= 0 calls.length) (transpile object)\n           (= 1 calls.length) '(send @object ...@(get (first calls) 'contents))\n           (do\n            (var lines (map calls (#(call index)\n                                    [\".\" (transpile (first call.contents))\n                                         \"(\" (interleave \", \" (map (rest call.contents) transpile)) \")\"])))\n\n            [ (transpile object)\n              (first lines)\n              \"\\n  \"\n              (recurse-indent\n               (interleave \"\\n\" (rest lines)))])))\n\n(macro chainable (...names)\n       (each (name) names\n             '(macro @name (target ...calls)\n                     '(chain (call @name @target) ...@calls))))\n\n(macro let (args body)\n       [\"let (\"\n         (interleave \", \" (bulk-map args\n                   (#(k v)\n                     [ (transpile k) \" = \" (transpile v) ])))\n         (if (undefined? body) \");\"\n             [\") {\" (indent (transpile body)) \"}\"])])\n\n(macro instance-of? (item type)\n       [\"(\" (transpile item) \" instanceof \" (transpile type) \")\"])\n\n(macro slice (list begin end)\n       [\"Array.prototype.slice.call(\" (transpile list)\n                                      \", \" (or (transpile begin) 0)\n                                      (if (defined? end) (\", \" (transpile end) \")\") \")\")])\n\n(macro includes? (list item)\n       '(!= -1 (send @list index-of @item)))\n\n\n(macro excludes? (list item)\n       '(= -1 (send @list index-of @item)))\n\n(macro exists? (thing)\n       '(and (defined? @thing) (!= @thing null)))\n\n(macro with-state (k v ...body)\n       (var before (^state k))\n       (^state k v)\n       (var return-value\n            (interleave \"\\n\" (map body transpile)))\n       (^state k before)\n       return-value)\n\n(macro join (glue arr)\n       (if (and (defined? glue) (undefined? arr))\n           (assign arr glue glue undefined))\n       [\"(\" (transpile arr) \").join(\" (if glue (transpile glue) \"\\\"\\\"\") \")\"])\n\n(macro var (...pairs)\n       (var destructured [])\n       (bulk-map pairs (#(lhs rhs)\n                         (switch lhs.type\n                                 ('bracket\n                                  (var symbol (^symbol))\n                                  (destructured.push [symbol (transpile rhs)])\n                                  (each (item index) lhs.contents\n                                        (destructured.push [(transpile item) '(get @symbol @index)]))\n                                  (destructured.push [symbol 'undefined]))\n                                 ('brace\n                                  (var symbol (^symbol))\n                                  (destructured.push [symbol (transpile rhs)])\n                                  (each (item index) lhs.contents\n                                        (var tr-item (transpile item))\n                                        (destructured.push [tr-item '(get @symbol @[\"\\\"\" tr-item \"\\\"\"])]))\n                                  (destructured.push [symbol 'undefined]))\n\n                                 (default\n                                  (destructured.push [(transpile lhs)\n                                                       (if rhs (transpile rhs) 'undefined)])))))\n\n       (as-statement\n        [\"var \" (interleave \",\\n    \"\n           (map destructured\n                (#(pair)\n                  [(first pair) \" = \" (second pair)]\n                  )))]))\n\n(macro default (...pairs)\n       (interleave \"\\n\" (bulk-map pairs (#(name value)\n                                  '(assign @name (ternary (defined? @name) @name @value))))))\n\n\n(macro import-namespace (namespace)\n       (var namespace-as-string (output-formatter (transpile namespace)))\n       (unless (sibilant.macros.namespaces.has-own-property namespace-as-string)\n               (set sibilant.macros.namespaces namespace-as-string {}))\n       (sibilant.macros.search-path.unshift namespace-as-string)\n       undefined)\n\n(macro namespace (namespace)\n       `(import-namespace @namespace)\n       (set sibilant.macros 'namespace (get sibilant.macros.namespaces (output-formatter (transpile namespace))))\n       undefined)\n\n(macro has-key? (object key)\n       `(send @object has-own-property @key))\n\n(macro get (obj ...keys)\n       [(transpile obj)\n         (map keys (#(key)\n                     (var transpiled (transpile key)\n                          output (output-formatter transpiled))\n\n                     (if (match-regex? output \"^\\\"[a-zA-Z0-9]+\\\"$\")\n                         [\".\" (replace-all output \"\\\"\" \"\") ]\n                         [\"[\" transpiled \"]\"])))])\n\n(macro set (arr ...kv-pairs)\n       (interleave \"\\n\" (bulk-map kv-pairs (#(k v) `(assign (get @arr @k) @v)))))\n","(def log! (...args)\n     (send (inspect! ..args ) for-each (#> (console.log #0))))\n\n(def inspect! (...args)\n     (args.map (#> (util.inspect #0 { colors false depth 3}))))\n\n(def color (code items depth)\n     (concat code (join \"\" items) \"\\033[0m\"))\n\n(def black (...args) (color \"\\033[0;30m\" args))\n(def red (...args) (color \"\\033[0;31m\" args))\n(def green (...args) (color \"\\033[0;32m\" args))\n(def brown (...args) (color \"\\033[0;33m\" args))\n(def blue (...args) (color \"\\033[0;34m\" args))\n(def purple (...args) (color \"\\033[0;35m\" args))\n(def cyan (...args) (color \"\\033[0;36m\" args))\n(def gray (...args) (color \"\\033[0;37m\" args))\n(def bold-gray (...args) (color \"\\033[1;30m\" args))\n(def bold-red (...args) (color \"\\033[1;31m\" args))\n(def bold-green (...args) (color \"\\033[1;32m\" args))\n(def yellow (...args) (color \"\\033[1;33m\" args))\n(def bold-blue (...args) (color \"\\033[1;34m\" args))\n(def bold-purple (...args) (color \"\\033[1;35m\" args))\n(def bold-cyan (...args) (color \"\\033[1;36m\" args))\n(def white (...args) (color \"\\033[1;37m\" args))\n","(include \"./colors.sibilant\")\n\n(def sibilant.pretty-print (node color)\n     (when (undefined? color) (assign color true))\n\n     (real-newlines (if (node? node) (do\n                       (var pretty-printer (or (get sibilant.pretty-print node.type)\n                                               sibilant.pretty-print.default))\n                       (pretty-printer node color))\n         (list? node)\n           (concat (if color (black \"[\") \"\")\n                   (join (if color (black \",\") \"\") (map node prettify))\n                   (if color (black \"]\") \"\"))\n\n           color (red (util.inspect node))\n           (real-newlines (util.inspect node)))))\n\n\n(def sibilant.pretty-print.default (node color)\n     (real-newlines (sibilant.pretty-print.colorize node color\n      (concat\n       (if (and node.modifiers node.modifiers.length)\n           (join \"\" (map node.modifiers (#(n) (sibilant.pretty-print n color)))) \"\")\n       node.token\n       (if (and node.contents node.contents.length)\n           (join \" \" (map node.contents (#(n) (sibilant.pretty-print n color)))) \"\")\n       (or (and node.closed (get acceptable-pairs node.token)) \"\")))))\n\n(def sibilant.pretty-print.root (node color)\n     (join \"\\n\" (map node.contents (#(n) (sibilant.pretty-print n color)))))\n\n(def sibilant.pretty-print.output (node color)\n     (concat (if color (black \"{\") \"\")\n             (if (list? node.contents)\n                 (join (if color (black \",\") \"\")\n                       (map node.contents (#(c) (sibilant.pretty-print.colorize node color (prettify c)))))\n                 (sibilant.pretty-print.colorize node color node.contents))\n             (if color (black \"}\") \"\")))\n\n(def real-newlines (node)\n     (chain node (split \"\\\\n\") (join \"\\n\")))\n\n\n(def sibilant.pretty-print.colorize (node color string)\n     (if (not color) string\n         (= node.hint 'macro) (yellow string)\n         (= node.type 'output) (purple string)\n         (green string)))\n\n(var prettify sibilant.pretty-print)","(def output-formatter (node)\n     (if (list? node) (join \"\" (map node output-formatter))\n         (and (node? node) (= node.type 'output))\n           (output-formatter node.contents)\n         (or (string? node) (number? node)) node\n         (not (exists? node)) \"\"\n         (node? node) (do\n                       (console.log \"WE SHOULD NOT BE HERE\")\n                       (output-formatter (transpile node)))))\n\n(set sibilant 'output-formatter output-formatter)","(var source-node (get (require \"source-map\") 'Source-node))\n\n(def source-map (node)\n     (if\n      (and (node? node) (= node.type 'output))\n       (new source-node\n            node.source.line\n            node.source.col\n            node.source.file\n            (if (list? node.contents)\n                         (map node.contents source-map)\n                         (source-map node.contents)))\n\n       (or (string? node) (number? node)) (node.to-string)))\n\n\n(def sourcemapper (node)\n     (var source-nodes (source-map (transpile node))\n          map (get (source-nodes.to-string-with-source-map) 'map))\n\n     (each (key) (keys sibilant.source-cache)\n           (map.set-source-content key (get sibilant.source-cache key)))\n\n     (map.to-string))","(def bulk-map (arr fn)\n  (var index 0\n          group-size fn.length\n          ret-arr [])\n\n  (while (< index arr.length)\n    (send ret-arr push\n          (apply fn (send arr slice\n                          index (+ index group-size))))\n    (incr-by index group-size))\n  ret-arr)\n\n(def inject (start items fn)\n  (var value start)\n  (when (list? items)\n    (each (item index) items\n      (assign value (fn value item index))))\n  value)\n\n(def map (items fn)\n  (inject [] items\n          (#(collector item index)\n            (send collector push (fn item index))\n            collector)))\n\n(def select (items fn)\n  (inject [] items\n          (#(collector item index)\n            (when (fn item index)\n              (send collector push item))\n            collector)))\n\n(def detect (items fn)\n  (var return-item undefined\n          index 0\n          items (or items []))\n\n  (until (or (= items.length index) return-item)\n         (when (fn (get items index) index)\n           (assign return-item (get items index)))\n         (incr index))\n\n  return-item)\n\n(def all? (items fn)\n     (undefined? (detect items (#(item index) (not (fn item index))))))\n\n(def none? (items fn)\n     (undefined? (detect items fn)))\n\n(def any? (items fn)\n     (defined? (detect items fn)))\n\n(def reject (items fn)\n  (var args [ items fn ])\n  (select items (thunk (not (apply fn arguments)))))\n\n(def compact (arr)\n     (select arr (#(item)\n                   (and\n                    (!= null item)\n                    (!= false item)\n                    (defined? item)))))\n\n(def interleave (glue arr)\n     (if (list? glue) (inject [] arr\n             (#(collector item index)\n               (collector.concat [item (get glue index)])))\n\n         \n     (inject [(first arr)] (rest arr)\n             (#(collector item index) (collector.concat [glue item])))))\n\n\n(def flatten (...items)\n  (inject [] items\n          (#(collector item)\n            (collector.concat\n             (if (list? item)\n               (apply flatten item)\n               item)))))\n\n\n(def recurse-map (item fn)\n     (if (list? item) (map item (#(subitem) (recurse-map subitem fn)))\n         (fn item)))\n\n(def pluck (items attribute)\n     (map items (#(item) (get item attribute))))\n\n(def merge-into (into from)\n     (each (key) (keys from) (set into key (get from key)))\n     into)\n\n(def clone (object)\n     (inject {} (keys object)\n             (#(collector key)\n               (set collector key (get object key))\n               collector)))\n\n(def map-values (object fn)\n     (inject {} (keys object)\n             (#(collector key index)\n               (set collector key (fn (get object key) key))\n               collector)))\n\n(def merge-with (into from)\n     (merge-into (clone into) from))\n","(var parser {})\n(set sibilant 'parser parser)\n(set parser 'tokens\n     { 'regex              \"(\\\\/(\\\\\\\\\\\\\\/|[^\\\\/\\\\n])+\\\\/[glim]*)\"\n       'comment            \"(;.*)\"\n       'string             \"(\\\"(([^\\\"]|(\\\\\\\\\\\"))*[^\\\\\\\\])?\\\")\"\n       'number             \"(-?[0-9][0-9.,]*)\"\n       'literal            \"(-?[*.$a-zA-Z_][/*.a-zA-Z0-9-_]*(\\\\?|!)?)\"\n       'special            \"([&'])\"\n       'at                 \"@\"\n       'tick               \"[`']\"\n       'hat                \"(\\\\^)\"\n       'dots               \"(\\\\.+)\"\n       'arg-placeholder    \"(#[0-9]+)\"\n       'other-char         \"([#><=!\\\\+\\\\/\\\\*-]+)\"\n       'open-expression    \"(\\\\(|\\\\{|\\\\[)\"\n       'close-expression    \"(\\\\)|\\\\}|\\\\])\"\n       'newline \"\\\\n\"\n       'whitespace \"\\\\s\"\n       'ignored \".\" })\n\n(set parser 'token-precedence  [ 'regex\n                                 'comment\n                                 'string\n                                 'number\n                                 'dots\n                                 'tick\n                                 'hat\n                                 'at\n                                 'special\n                                 'literal\n                                 'arg-placeholder\n                                 'other-char\n                                 'open-expression\n                                 'close-expression\n                                 'newline\n                                 'whitespace\n                                 'ignored\n                                 ]\n     'ordered-regexes (parser.token-precedence.map\n                       (#(x)\n                         (var r (regex (\"^\" (get parser.tokens x))))\n                         (set r 'name x)\n                         r)))\n\n(var ordered-regexes parser.ordered-regexes)\n\n(set sibilant 'node-cache (or sibilant.node-cache {}))\n(def node-id (node)\n     (incr node-id.last-id))\n(def cache-node (node)\n     (var id (node-id node))\n     (set sibilant.node-cache id node)\n     (merge-into node {node-id id}))\n\n(set node-id 'last-id 0)\n\n(def parser.parse (string context)\n     (var context (or context\n                      { position 0\n                        stack []\n                        line 1\n                        last-newline 0 col 0})\n          match true\n          regex-name null\n          remaining-input string)\n\n     (while match\n            (detect ordered-regexes\n                    (#(r)\n                      (assign match (r.exec remaining-input)\n                              regex-name r.name)\n                      match))\n\n            (when (exists? match)\n                  (var match-string (first match)\n                       length (length match-string))\n                  \n                  (context.stack.push\n                   (cache-node { contents []\n                                 dir sibilant.dir\n                                 file sibilant.file\n                                 token match-string\n                                 type regex-name\n                                 start context.position\n                                 line context.line\n                                 col context.col\n                                 length length }))\n\n                  (if\n                   (= 'newline regex-name)\n                   (do\n                    (incr context.line)\n                    (set context\n                         'col 0\n                         'last-newline context.position))\n\n                   (and (= 'string regex-name)\n                        (includes? match-string \"\\n\"))\n                   (do\n                    (var string-newline-count (- (length (match-string.split \"\\n\")) 1))\n                    (incr-by context.line string-newline-count)\n                    (set context 'col (- length (match-string.last-index-of \"\\n\"))))\n\n                   (incr-by context.col length))\n\n                  (incr-by context.position length)\n                  (assign remaining-input (if remaining-input.length\n                                              (remaining-input.slice length)\n                                              \"\"))))\n     context.stack)\n\n(var parse parser.parse)\n","(var restructurers {}\n     acceptable-pairs { \"(\" \")\" \"[\" \"]\" \"{\" \"}\" }\n     bracket-types { \"(\" 'expression\n                     \"[\" 'bracket\n                     \"{\" 'brace })\n\n(def restructure (input)\n     (var output { type 'root\n                   contents []\n                   file sibilant.file\n                   col 0\n                   line 1 }\n          context { parse-stack [output]\n                    output output\n                    input input\n                    specials 0 })\n\n     (inject context input\n             (#(context token index)\n               (var restructurer (or (get restructurers token.type) restructurers.default))\n               (restructurer token context index)))\n\n     (unless (= 1 (length context.parse-stack))\n             (throw (\"unclosed node: \" (prettify (first context.parse-stack) false))))\n\n     output)\n\n(set sibilant 'restructure restructure)\n\n(def restructurers.open-expression (token context)\n     (var first (first context.parse-stack))\n     (set token\n          'contents []\n          'type (get bracket-types token.token)\n          'parent first)\n     (accept-specials token context)\n     (send first.contents push token)\n     (context.parse-stack.unshift token)\n     context)\n\n\n(def restructurers.close-expression (node context index)\n     (var first (first context.parse-stack))\n\n     (when (node? first 'root)\n           (throw (\"unexpected \" node.token \" on \"node.file\":\"node.line\":\"node.col)))\n     (when (!= (get acceptable-pairs first.token) node.token)\n           (throw (\"trying to close \" (yellow (sibilant.pretty-print first))\n                                      \"\\n   on \"first.file\":\"first.line\":\"first.col\n                                      \"\\n   with \"(sibilant.pretty-print node)\n                                      \"\\n   on \"node.file\":\"node.line\":\"node.col\n                                      \"\\n\")))\n\n     (set first 'end node.end 'closed true)\n     (context.parse-stack.shift)\n     (close-specials first context)\n     (when (zero? context.parse-stack.length)\n           (throw (\"unbalanced parens:\\n\"\n                   (call inspect parse-stack))))\n     context)\n\n(def open-special (node context)\n     (incr context.specials)\n\n     (var first (first context.parse-stack))\n     (set node\n          'contents []\n          'parent first)\n\n     (first.contents.push node)\n     (context.parse-stack.unshift node)\n     context)\n\n(def accept-specials (node context)\n     (set node 'specials (get context 'specials))\n     (set context 'specials 0)\n     context)\n\n(def close-specials (node context)\n     (when (> node.specials 0)\n           (decr node.specials)\n           (context.parse-stack.shift)\n           (close-specials node context))\n     context)\n\n(def restructurers.hat (node context index) (open-special node context))\n(def restructurers.dots (node context index) (open-special node context))\n(def restructurers.tick (node context index) (open-special node context))\n(def restructurers.at (node context index) (open-special node context))\n\n(def restructurers.whitespace (token context index) context)\n(def restructurers.newline (token context index) context)\n(def restructurers.comment (token context index) context)\n(def restructurers.ignored (token context index) context)\n\n(def restructurers.default (token context index)\n     (accept-specials token context)\n     (send (get (first context.parse-stack) 'contents) push token)\n     (close-specials token context))\n","(var core-namespace {}\n     macro-namespaces { core core-namespace })\n(set sibilant\n     'state {}\n     'macros\n     { 'namespaces macro-namespaces\n       'default-search-path ['core]\n       'search-path ['core]\n       'namespace core-namespace })\n\n(var namespace sibilant.macros.namespace macros sibilant.macros.namespace)\n\n(def has-key? (object key)\n       (send object has-own-property key))\n\n(def sibilant.resolve-macro (macro-name)\n     (if (and (includes? macro-name \"/\") (not (includes? macro-name \"\\n\")))\n         (do (var path-components (macro-name.split \"/\")\n                  macro (and (has-key? sibilant.macros.namespaces (first path-components))\n                             (get sibilant.macros.namespaces (first path-components)\n                                  (join \"/\" (rest path-components)))))\n             (if macro macro\n                 (error (\"called namespaced macro \" macro-name\n                         \" but could not find namespace \" (first path-components)\n                         \". you might need to include the file that defines it first.\" ))))\n         (do\n          (var namespace (detect sibilant.macros.search-path\n                            (#(namespace)\n                              (has-key? (get sibilant.macros.namespaces namespace)\n                                        macro-name))))\n          (when namespace (get sibilant.macros.namespaces namespace macro-name)))))\n\n(def sibilant.with-default-search-path (fn)\n     (var search-path-before sibilant.macros.search-path)\n     (set sibilant.macros 'search-path sibilant.macros.default-search-path)\n     (var return-value (fn))\n     (set sibilant.macros 'search-path search-path-before)\n     return-value)\n     \n          ","(def recurse-indent (...args)\n     (map args\n          (#(arg)\n            (if (node? arg) (do (set arg 'contents (apply recurse-indent (compact (flatten arg.contents)))) arg)\n                (list? arg) (apply recurse-indent arg)\n                (number? arg) (arg.to-string)\n                (string? arg)\n                (chain arg\n                       (replace (regex \"\\\\n\" 'g) \"\\n  \")\n                       (replace (regex \"\\\\n\\\\s+\\\\n\" 'g) \"\\n\\n\"))\n\n                 arg))))\n\n(def indent (...args)\n     [\"\\n  \" (recurse-indent args) \"\\n\"])\n\n\n(def escape-regex (string)\n     (string.replace (regex \"[\\\\-\\\\[\\\\]\\\\/\\\\{\\\\}\\\\(\\\\)\\\\*\\\\+\\\\?\\\\.\\\\\\\\\\^\\\\$\\\\|]\" 'g) \"\\\\$&\"))\n\n(def qescape (content)\n     (if (not (exists? content)) \"\"\n         (string? content) (chain content\n                                  (replace (regex \"\\\"\" 'g) \"\\\\\\\"\")\n                                  (replace (regex \"\\\\n\" 'g) \"\\\\n\\\" +\\n\\\"\"))\n         content))\n\n(def log-pretty (label arg node)\n     (console.log (concat label \" = \" (prettify arg)))\n     arg)\n\n(var pretty-log log-pretty)\n\n(def map-node (node fn)\n     (if (node? node)\n         (do\n          (var mapped-node (fn node))\n          (when (node? mapped-node)\n                (set mapped-node 'contents (map-node mapped-node.contents fn)))\n\n          mapped-node)\n\n         (list? node) (map node (#> (map-node #0 fn)))\n         (fn node)))\n\n(def each-node (node fn)\n     (if (node? node) (when (fn node) (each-node node.contents fn))\n         (list? node) (each (c) node (each-node c fn))\n         (fn node)))\n\n(def statement? (transpiled)\n     (if (node? transpiled) (statement? transpiled.contents)\n         (list? transpiled) (statement? (last transpiled))\n         (string? transpiled) (= \";\" (last transpiled))\n         false))\n\n(def as-statement (node)\n     (var transpiled (transpile node))\n\n     (if (empty-node? transpiled) undefined\n         (statement? transpiled) transpiled\n         [ transpiled \";\" ]))\n\n(def unquote? (node) (node? node 'at))\n\n(def find-unquotes (node)\n     (var unquotes {})\n     (each-node node (#(n)\n                       (when (unquote? n)\n                             (set unquotes n.node-id (transpile n)))\n                       (not (node? n 'tick))))\n     unquotes)\n\n(def splice-dots (node)\n     (when (and node (list? node.contents))\n           (var contents [])\n           (each (content) node.contents\n                 (if (and (node? content 'dots)\n                          (list? content.contents)\n                          (= content.contents.length 1)\n                          (list? (first content.contents)))\n                      (contents.push.apply contents (first content.contents))\n                      (contents.push content)))\n\n           (set node 'contents contents))\n     node)\n\n\n(def alternating-keys-and-values (hash)\n     (flatten (map (keys hash)\n                   (#(key) [key, (get hash key)]))))\n\n\n(def map-node-for-quote-expansion (node expansions)\n     (if (node? node)\n         (do\n          (var mapped-node (if (expansions.has-own-property node.node-id) (get expansions node.node-id) (clone node)))\n          (when (node? mapped-node)\n                (set mapped-node 'contents (map-node-for-quote-expansion mapped-node.contents expansions)))\n\n          (assign mapped-node (splice-dots mapped-node))\n          mapped-node)\n\n         (list? node)\n           (map node (#> (map-node-for-quote-expansion #0 expansions)))\n\n         node))\n\n","(def sibilant.macros.namespaces.core.return (token)\n     (when sibilant.debug (console.log \"returning \" (prettify token)))\n     (var default-return (as-statement [\"return \" (transpile token)]))\n     (if (and token token.contents token.contents.length)\n         (switch (get (first token.contents) 'token)\n                 (('return 'throw 'do) (transpile token))\n                 ('delete\n                  (var delete-macro (get macros 'delete))\n                  (if (< token.contents.length 3) default-return\n                      [ (as-statement (apply delete-macro (token.contents.slice 1 -1)))\n                        \"\\nreturn \"\n                        (as-statement (call delete-macro (last token.contents)))]))\n                 ('assign\n                  (if (< token.contents.length 4) default-return\n                      [ (apply sibilant.macros.namespaces.core.assign\n                               (token.contents.slice 1 (- token.contents.length 2)))\n                        \"\\nreturn \"\n                        (apply sibilant.macros.namespaces.core.assign (token.contents.slice -2))]))\n                 ('var\n                  [ (transpile token) \"\\nreturn \" (transpile (if (even? token.contents.length)\n                                                                 (last token.contents)\n                                                                 (first (token.contents.slice -2))))])\n                 ('set\n                  (if (< token.contents.length 5) default-return\n                      (do\n                       (var obj (second token.contents)\n                            non-return-part (token.contents.slice 2 (- token.contents.length 2))\n                            return-part (token.contents.slice -2))\n                       (non-return-part.unshift obj)\n                       (return-part.unshift obj)\n                       [ (sibilant.macros.namespaces.core.set ...non-return-part)\n                         \"\\nreturn \"\n                         (sibilant.macros.namespaces.core.set ...return-part)])))\n                 (default default-return))\n         default-return))\n\n\n(def sibilant.macros.namespaces.core.do (...body)\n     (if (= 1 body.length) (sibilant.macros.namespaces.core.return (first body))\n         body.length [ (interleave \"\\n\" (map (body.slice 0 -1) (#> (as-statement #0))))\n                       \"\\n\"\n                       (sibilant.macros.namespaces.core.return (last body)) ]\n         \"\"))\n\n(def sibilant.macros.namespaces.core.empty-list () 'null)\n\n(def sibilant.macros.namespaces.core.def (fn-name args ...body)\n     (if (undefined? fn-name) (error \"invalid function definition. missing name.\")\n         (undefined? args) (error \"invalid function definition. missing arguments or return value.\"))\n\n     (var fn-name-tr (transpile fn-name) this-node this)\n\n     (as-statement [ (if (match? (regex \"\\\\.\") (output-formatter fn-name-tr)) \"\" \"var \")\n                     fn-name-tr \" = \"\n                     (sibilant.macros.namespaces.core.lambda { name fn-name args args node this-node } ...body )\n                     ] ))\n\n(def sibilant.macros.namespaces.core.macro (name args ...body)\n     (var name-tr (output-formatter (transpile name))\n          options { name name args args node this}\n          js (output-formatter (sibilant.macros.namespaces.core.lambda options ...body)))\n\n     (when sibilant.debug (console.log js))\n     \n     (try (set sibilant.macros.namespace name-tr (eval js))\n          (error (\"error in parsing macro \"\n                  (sibilant.pretty-print name) \":\\n\" js)))\n\n     undefined)\n\n(def sibilant.macros.namespaces.core.meta (...body)\n     (var js (output-formatter (sibilant.macros.namespaces.core.scoped ...body)))\n     (when sibilant.debug (console.log js))\n     (output-formatter (eval js)))\n\n\n(def sibilant.macros.namespaces.core.concat (...args)\n     [\"(\" (interleave \" + \" (map args transpile)) \")\"])\n\n(def sibilant.macros.namespaces.core.reverse (arr)\n     (var reversed [])\n     (each (item) arr (reversed.unshift item))\n     reversed)\n\n(var reverse sibilant.macros.namespaces.core.reverse)\n\n(def sibilant.macros.namespaces.core.lambda (args-or-options ...body)\n     (when sibilant.debug\n           (console.log args-or-options))\n     (var args (or (get args-or-options 'args) args-or-options)\n          body (or (get args-or-options 'body) body)\n          args (if (node? args 'expression) args.contents\n                   (and (node? args) (empty? body)) (do (assign body [ args ]) [])\n                   args)\n          name (when args-or-options.name\n                     (chain (output-formatter (transpile args-or-options.name))\n                            (replace (regex \"\\\\W+\" 'g) \"$\")\n                            (concat \"$\")))\n          rest (detect args\n                       (#> (node? #0 'dots))))\n\n     (var this-node this\n          node (detect\n                [ args-or-options.node this-node args-or-options.name args (first body) ]\n                (#(n) (and (node? n) (get n 'file)))))\n     [\"(function\" (if name (\" \" name) \"\") \"(\"\n       (interleave \", \" (map args transpile)) \") {\"\n       (if (or args-or-options.name node)\n           (indent [\"/*\"\n                     (if args-or-options.name (\" \" (sibilant.pretty-print args-or-options.name false)) \"\")\n                     (if node (\" \" node.file \":\" node.line \":\" node.col) \"\")\n                     \" */\"]) \"\")\n       (when (exists? rest)\n             (indent (as-statement [\"var \" (transpile rest)\n                       \" = Array.prototype.slice.call(arguments, \"\n                       (- args.length 1) \")\"])))\n\n       (indent (apply sibilant.macros.namespaces.core.do body))\n       \"})\"])\n\n(set sibilant.macros.namespaces.core \"#\" sibilant.macros.namespaces.core.lambda)\n\n(def sibilant.macros.namespaces.core.quoted-hash (...pairs)\n     (var cached-quote-value sibilant.macros.namespaces.core.hash.quote-keys)\n     (set sibilant.macros.namespaces.core.hash 'quote-keys true)\n     (var value (sibilant.macros.namespaces.core.hash ...pairs))\n     (set sibilant.macros.namespaces.core.hash 'quote-keys cached-quote-value)\n     value)\n\n(def sibilant.macros.namespaces.core.hash (...pairs)\n     (when (odd? pairs.length)\n           (error (\"odd number of key-value pairs in hash: \"\n                   (call inspect pairs))))\n\n     (var quote-keys sibilant.macros.namespaces.core.hash.quote-keys\n          pair-strings (bulk-map pairs (#(key value)\n                                         [ (if (and quote-keys (not (node? key 'string)))\n                                               [\"\\\"\" (transpile key) \"\\\"\"]\n                                               (transpile key))\n                                           \": \"\n                                           (transpile value)])))\n     (if (>= 1 pair-strings.length)\n         [\"{ \" (interleave \", \" pair-strings) \" }\"]\n         [\"{\" (indent (interleave \",\\n\" pair-strings)) \"}\"]))\n\n\n(def sibilant.macros.namespaces.core.quote (content)\n     (if (string? content) (\"\\\"\" (qescape content) \"\\\"\")\n         (number? content) (sibilant.macros.namespaces.core.quote (content.to-string))\n         (node? content 'literal) [\"\\\"\" (transpile content) \"\\\"\"]\n         (node? content 'expression)\n         (if (length (keys (find-unquotes content)))\n             (sibilant.macros.namespaces.core.call 'macros.expand-quote.call 'this (sibilant.macros.namespaces.core.quote content.node-id)\n                    (apply sibilant.macros.namespaces.core.quoted-hash (alternating-keys-and-values (find-unquotes content))))\n             [\"\\\"\" (map-node (transpile content) qescape) \"\\\"\"])\n\n         (node? content 'bracket)\n         (if (length (keys (find-unquotes content)))\n             (sibilant.macros.namespaces.core.call 'macros.expand-quote.call 'this (sibilant.macros.namespaces.core.quote content.node-id)\n                    (apply sibilant.macros.namespaces.core.quoted-hash (alternating-keys-and-values (find-unquotes content))))\n             (sibilant.macros.namespaces.core.list ...(map content.contents sibilant.macros.namespaces.core.quote)))\n\n         (node? content 'brace)\n         (if (length (keys (find-unquotes content)))\n             (sibilant.macros.namespaces.core.call 'macros.expand-quote.call 'this (sibilant.macros.namespaces.core.quote content.node-id)\n                    (apply sibilant.macros.namespaces.core.quoted-hash (alternating-keys-and-values (find-unquotes content))))\n             (sibilant.macros.namespaces.core.hash ...(map content.contents sibilant.macros.namespaces.core.quote)))\n\n         (do\n          (console.log (\"unknown content\" (prettify content)))\n          content)))\n\n(def sibilant.macros.namespaces.core.debug (val)\n     (set sibilant 'debug (eval (output-formatter (transpile val)))) null)\n\n(def sibilant.macros.namespaces.core.expand-quote (node-id expansions)\n     (var expanded-nodes\n          (map-node-for-quote-expansion (get sibilant.node-cache node-id) expansions))\n\n     (transpile expanded-nodes))\n\n\n(def sibilant.macros.namespaces.core.list (...args)\n       (var arg-segments [])\n       (if (empty? args) \"[]\"\n           (do\n            (def simple-list (args)\n                 [\"[ \" (interleave \", \" (map args (#(arg) arg.transpiled))) \" ]\"])\n\n            (args.for-each (#(arg)\n                  (if (node? arg 'dots) (arg-segments.push {transpiled (transpile arg)})\n                   (list? (last arg-segments)) (send (last arg-segments) push {transpiled (transpile arg)})\n                   (arg-segments.push [{transpiled (transpile arg)}]))))\n\n            (assign arg-segments (map arg-segments\n                                      (#(segment)\n                                        (if (list? segment)\n                                            (simple-list segment)\n                                            segment.transpiled))))\n\n            (if (= 1 (length arg-segments))\n                (first arg-segments)\n                [(first arg-segments) \".concat(\" (interleave \", \" (rest arg-segments))\")\"]))))\n\n\n(def sibilant.macros.namespaces.core.call (fn-name ...args)\n     (if (any? args (#> (node? #0 'dots)))\n           (macros.apply fn-name (macros.list ...args))\n           [ (transpile fn-name)\n                   \"(\" (interleave \", \" (map args transpile)) \")\" ]))\n\n(def sibilant.macros.namespaces.core.dots (...contents)\n     (transpile contents))\n\n","(def node? (thing type)\n     (and\n      (exists? thing)\n      (= 'object (typeof thing))\n      (string? thing.type)\n      (or (undefined? type) (= thing.type type))\n      (thing.has-own-property 'contents)))\n\n(def empty-node? (item)\n     (if (node? item) (empty-node? item.contents)\n         (list? item) (all? item empty-node?)\n         (string? item) (item.match (regex \"^\\\\s*$\"))\n         (or (= null item)\n             (undefined? item)\n             (= false item))))\n\n(def compact-node (item)\n     (if (node? item) (do\n                       (set item 'contents (compact-node item.contents))\n                       (if (and item.contents item.contents.length) item null))\n         (list? item) (do\n                       (var compacted (compact (map item compact-node)))\n                       (if (and compacted compacted.length) compacted null))\n         (if (or (= item \"\") (= item false)) null item)))\n\n(def recurse-transpile (node)\n     (if (list? node) (map node recurse-transpile)\n         (and (node? node) (!= 'output node.type)) (transpile node)\n         (and (node? node) (= 'output node.type)) (do\n                                                   (set node 'contents (recurse-transpile node.contents))\n                                                   node)\n         node))\n\n(def transpile (node preprocessor)\n     (if\n      (string? node)\n      (assign node { type 'js token node contents []})\n\n      (number? node)\n      (assign node { type 'number token (node.to-string) contents []}))\n     \n     (if (list? node) node\n         (exists? node) (do\n                         (var transpiler (or (get transpile node.type) transpile.default))\n                         (var result (transpiler node))\n                         (var result-node (recurse-transpile (if (node? result) result\n                                              { contents result type 'output })))\n                         (set result-node\n                              'contents (compact (flatten result-node.contents))\n                              'source node)\n\n                         (when sibilant.debug\n                               (console.log (prettify node)\n                                            (red \"->\")\n                                            (prettify result-node)))\n\n                         (set node 'transpiled result-node)\n\n                         \n                         (if (empty-node? result-node) undefined\n                             result-node))))\n\n\n(set sibilant 'transpile transpile)\n\n(var reader-macros {})\n\n(def transpile.hat (node)\n     (var output (transpile (first node.contents)))\n     (set output 'contents [\"sibilant.macros.namespace[\\\"\" (first output.contents) \"\\\"]\"])\n     output)\n\n(def transpile.tick (node)\n     (sibilant.macros.namespaces.core.quote.apply node node.contents))\n\n(def transpile.at (node)\n     (transpile (first node.contents)))\n\n(def transpile.dots (node)\n     (sibilant.macros.namespaces.core.dots.apply node node.contents))\n\n(def transpile.default (node)\n     node.token)\n\n(def transpile.output (node)\n     node)\n\n(def transpile.number (node)\n     (send (parse-float (node.token.replace (regex \",\" 'g) \"\")) to-string))\n\n(def transpile.root (node)\n     (if (= 1 node.contents.length)\n         (transpile (first node.contents))\n         (interleave \"\\n\" (compact (map node.contents as-statement)))))\n\n(def transpile.expression (node preprocessor)\n     (if node.contents.length\n         (do\n          (var head (first node.contents)\n               args node.contents\n               macro (sibilant.resolve-macro 'call))\n\n          (if (and head (= 'string head.type)) (assign macro (sibilant.resolve-macro 'concat))\n              (or (node? head 'literal) (node? head 'other-char))\n              (do\n               (var resolved-macro (sibilant.resolve-macro (output-formatter (transpile head))))\n               (when resolved-macro\n                     (set head 'hint 'macro)\n                     (assign macro resolved-macro\n                             args (rest node.contents)))))\n\n          (macro.apply node args))\n\n         \"null\"))\n\n(def transpile.bracket (node)\n     (apply sibilant.macros.namespaces.core.list node.contents))\n\n(def transpile.brace (node) (apply sibilant.macros.namespaces.core.hash node.contents))\n\n(def transpile.literal (node)\n     (var string node.token)\n     (inject (chain string\n                    (replace (regex \"\\\\*\" 'g) \"_\")\n                    (replace (regex \"\\\\?$\") \"__QUERY\")\n                    (replace (regex \"!$\") \"__BANG\"))\n             (string.match (regex \"-(.)\" 'g))\n             (#(return-string match)\n               (return-string.replace match\n                                      (send (second match) to-upper-case)))))\n\n(def transpile.string (node)\n     (chain node.token (split \"\\n\")\n            (join \"\\\\n\\\" +\\n\\\"\")))\n\n(def transpile.comment (node) null)\n\n","(def sibilize (input)\n     (sibilant.initialize)\n     (output-formatter (transpile (restructure (parse input)))))\n\n(def sourcemap (input)\n     (sibilant.initialize)\n     (sourcemapper (transpile (restructure (parse input)))))\n\n(set sibilant 'sibilize sibilize)\n\n(def sibilant.version ()\n     (get (sibilant.package-info) 'version))\n\n(def sibilant.strip-shebang (data)\n     (data.replace (regex \"^#!.*\\\\n\") \"\\n\"))\n\n(set sibilant 'file 'eval.sibilant)\n\n(def with-dir-and-file (dir file fn)\n     (var before { dir sibilant.dir\n                   file sibilant.file })\n     (set sibilant\n          'dir  dir\n          'file file)\n\n     (var retval (fn))\n\n     (set sibilant\n          'dir  before.dir\n          'file before.file)\n\n     retval)\n\n(set sibilant 'source-cache {})\n\n(def sibilant.sibilize-file (file-name)\n     (output-formatter (sibilant.transpile-file file-name)))\n\n(def sibilant.sibilize-json (file-name)\n     (sibilant.initialize)\n     (var before sibilant.macros.namespaces.core.hash.quote-keys)\n     (set sibilant.macros.namespaces.core.hash 'quote-keys true)\n     (var content (sibilant.sibilize-file file-name))\n     (set sibilant.macros.namespaces.core.hash 'quote-keys before)\n     content)\n\n(def sibilant.macros.namespaces.core.include (file)\n     (sibilant.with-default-search-path (#>\n       (sibilant.include (eval (output-formatter (transpile file)))))))\n\n"]}