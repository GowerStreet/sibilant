{"version":3,"sources":["/Users/jbr/code/sibilant/src/sibilant.sibilant","/Users/jbr/code/sibilant/src/node.sibilant","/Users/jbr/code/sibilant/src/colors.sibilant","/Users/jbr/code/sibilant/src/pretty-printer.sibilant","/Users/jbr/code/sibilant/src/output-formatter.sibilant","/Users/jbr/code/sibilant/src/sourcemap.sibilant","/Users/jbr/code/sibilant/include/functional.sibilant","/Users/jbr/code/sibilant/src/parser.sibilant","/Users/jbr/code/sibilant/src/restructurer.sibilant","/Users/jbr/code/sibilant/src/macros.sibilant","/Users/jbr/code/sibilant/src/transpiler.sibilant","/Users/jbr/code/sibilant/src/require-and-include.sibilant"],"names":[],"mappings":"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","sourcesContent":["(send (require \"source-map-support\") install)\n(meta \"//# sourceMappingURL=./sibilant.map\\n\")\n\n(include \"./node\")\n(include \"./pretty-printer\")\n(include \"./output-formatter\")\n(include \"./sourcemap\")\n(include \"../include/functional\")\n(include \"./parser\")\n(include \"./restructurer\")\n(include \"./macros\")\n(include \"./transpiler\")\n(include \"./require-and-include\")\n\n","(var sibilant exports\n     util     (require 'util)\n     path     (require 'path)\n     fs       (require 'fs)\n     error    (#(str) (throw str))\n     inspect  util.inspect)\n\n(set sibilant 'dir (process.cwd))\n\n\n(def sibilant.transpile-file (file-name)\n     (with-dir-and-file (path.dirname file-name) file-name\n                        (#>\n                         (var source (sibilant.strip-shebang\n                                      (fs.read-file-sync file-name \"utf8\")))\n\n                         (set sibilant.source-cache file-name source)\n                         (sibilant.initialize)\n                         (transpile (restructure (parse source))))))\n\n\n(def sibilant.sourcemap-file (file-name)\n     (with-dir-and-file (path.dirname file-name) file-name\n                        (#> (sourcemap\n                             (sibilant.strip-shebang\n                              (fs.read-file-sync file-name \"utf8\"))))))\n\n\n(set require.extensions \".sibilant\"\n     (#(module filename)\n       (var content (sibilant.sibilize-file filename))\n       (module.*compile content filename)))\n\n(set require.extensions \".son\"\n     (#(module filename)\n       (var content (sibilant.sibilize-json filename))\n       (set module 'exports (JSON.parse content))))\n\n\n(def sibilant.package-info ()\n     (var fs (require 'fs))\n     (JSON.parse (fs.read-file-sync\n                  (concat **dirname \"/../package.json\"))))\n\n(def sibilant.version-string ()\n     (var package (sibilant.package-info)\n          path (require 'path))\n     (concat package.name \" version \" package.version\n             \"\\n(at \" (path.join **dirname \"..\") \")\"))\n\n\n(def sibilant.initialize ()\n     (unless (or sibilant.loaded? sibilant.loading?)\n             (set sibilant 'loading? true)\n             (sibilant.load-macros)\n             (delete sibilant.loading?)\n             (set sibilant 'loaded? true)))\n     \n(def sibilant.load-macros ()\n     (sibilant.include (path.normalize (concat **dirname \"/../include/macros\"))))\n\n\n(def sibilant.include (file)\n     (when (not (file.match (regex \"\\\\.(sibilant|son)$\")))\n           (assign file (concat file \".sibilant\")))\n\n     (when (file.match (regex \"^\\\\.\\\\.?/\"))\n           (assign file (concat sibilant.dir \"/\" file)))\n\n     (var resolved-file\n          (try (require.resolve file)\n               (error (\"Failed to resolve file for inclusion: \" file))))\n\n     (sibilant.transpile-file resolved-file))\n","(def log! (...args)\n     (send (inspect! ..args ) for-each (#(o) (console.log o))))\n\n(def inspect! (...args)\n     (args.map (#(arg) (util.inspect arg { colors false depth 3}))))\n\n(def color (code items depth)\n     (concat code (join \"\" items) \"\\033[0m\"))\n\n(def black (...args) (color \"\\033[0;30m\" args))\n(def red (...args) (color \"\\033[0;31m\" args))\n(def green (...args) (color \"\\033[0;32m\" args))\n(def brown (...args) (color \"\\033[0;33m\" args))\n(def blue (...args) (color \"\\033[0;34m\" args))\n(def purple (...args) (color \"\\033[0;35m\" args))\n(def cyan (...args) (color \"\\033[0;36m\" args))\n(def gray (...args) (color \"\\033[0;37m\" args))\n(def bold-gray (...args) (color \"\\033[1;30m\" args))\n(def bold-red (...args) (color \"\\033[1;31m\" args))\n(def bold-green (...args) (color \"\\033[1;32m\" args))\n(def yellow (...args) (color \"\\033[1;33m\" args))\n(def bold-blue (...args) (color \"\\033[1;34m\" args))\n(def bold-purple (...args) (color \"\\033[1;35m\" args))\n(def bold-cyan (...args) (color \"\\033[1;36m\" args))\n(def white (...args) (color \"\\033[1;37m\" args))\n","(include \"./colors.sibilant\")\n\n(def sibilant.pretty-print (node color)\n     (when (undefined? color) (assign color true))\n\n     (real-newlines (if (node? node) (do\n                       (var pretty-printer (or (get sibilant.pretty-print node.type)\n                                               sibilant.pretty-print.default))\n                       (pretty-printer node color))\n         (list? node)\n           (concat (if color (black \"[\") \"\")\n                   (join (if color (black \",\") \"\") (map node prettify))\n                   (if color (black \"]\") \"\"))\n\n           color (red (util.inspect node))\n           (real-newlines (util.inspect node)))))\n\n\n(def sibilant.pretty-print.default (node color)\n     (real-newlines (sibilant.pretty-print.colorize node color\n      (concat\n       (if (and node.modifiers node.modifiers.length)\n           (join \"\" (map node.modifiers (#(n) (sibilant.pretty-print n color)))) \"\")\n       node.token\n       (if (and node.contents node.contents.length)\n           (join \" \" (map node.contents (#(n) (sibilant.pretty-print n color)))) \"\")\n       (or (get acceptable-pairs node.token) \"\")))))\n\n(def sibilant.pretty-print.root (node color)\n     (join \"\\n\" (map node.contents (#(n) (sibilant.pretty-print n color)))))\n\n(def sibilant.pretty-print.output (node color)\n     (concat (if color (black \"{\") \"\")\n             (if (list? node.contents)\n                 (join (if color (black \",\") \"\")\n                       (map node.contents (#(c) (sibilant.pretty-print.colorize node color (prettify c)))))\n                 (sibilant.pretty-print.colorize node color node.contents))\n             (if color (black \"}\") \"\")))\n\n(def real-newlines (node)\n     (chain node (split \"\\\\n\") (join \"\\n\")))\n\n\n(def sibilant.pretty-print.colorize (node color string)\n     (if (not color) string\n         (= node.hint 'macro) (yellow string)\n         (= node.type 'output) (purple string)\n         (green string)))\n\n(var prettify sibilant.pretty-print)","(def output-formatter (node)\n     (if (list? node) (join \"\" (map node output-formatter))\n         (and (node? node) (= node.type 'output))\n           (output-formatter node.contents)\n         (or (string? node) (number? node)) node\n         (not (exists? node)) \"\"\n         (node? node) (do\n                       (console.log \"WE SHOULD NOT BE HERE\")\n                       (output-formatter (transpile node)))))\n\n(set sibilant 'output-formatter output-formatter)","(var source-node (get (require \"source-map\") 'Source-node))\n\n(def source-map (node)\n     (if\n      (and (node? node) (= node.type 'output))\n       (new source-node\n            node.source.line\n            node.source.col\n            node.source.file\n            (if (list? node.contents)\n                         (map node.contents source-map)\n                         (source-map node.contents)))\n\n       (or (string? node) (number? node)) (node.to-string)))\n\n\n(def sourcemapper (node)\n     (var source-nodes (source-map (transpile node))\n          map (get (source-nodes.to-string-with-source-map) 'map))\n\n     (each (key) (keys sibilant.source-cache)\n           (map.set-source-content key (get sibilant.source-cache key)))\n\n     (map.to-string))","(def bulk-map (arr fn)\n  (var index 0\n          group-size fn.length\n          ret-arr [])\n\n  (while (< index arr.length)\n    (send ret-arr push\n          (apply fn (send arr slice\n                          index (+ index group-size))))\n    (incr-by index group-size))\n  ret-arr)\n\n(def inject (start items fn)\n  (var value start)\n  (when (list? items)\n    (each (item index) items\n      (assign value (fn value item index))))\n  value)\n\n(def map (items fn)\n  (inject [] items\n          (#(collector item index)\n            (send collector push (fn item index))\n            collector)))\n\n(def select (items fn)\n  (inject [] items\n          (#(collector item index)\n            (when (fn item index)\n              (send collector push item))\n            collector)))\n\n(def detect (items fn)\n  (var return-item undefined\n          index 0\n          items (or items []))\n\n  (until (or (= items.length index) return-item)\n         (when (fn (get items index) index)\n           (assign return-item (get items index)))\n         (incr index))\n\n  return-item)\n\n(def all? (items fn)\n     (undefined? (detect items (#(item index) (not (fn item index))))))\n\n(def none? (items fn)\n     (undefined? (detect items fn)))\n\n(def any? (items fn)\n     (defined? (detect items fn)))\n\n(def reject (items fn)\n  (var args [ items fn ])\n  (select items (thunk (not (apply fn arguments)))))\n\n(def compact (arr)\n     (select arr (#(item)\n                   (and\n                    (!= null item)\n                    (!= false item)\n                    (defined? item)))))\n\n(def interleave (glue arr)\n     (if (list? glue) (inject [] arr\n             (#(collector item index)\n               (collector.concat [item (get glue index)])))\n\n         \n     (inject [(first arr)] (rest arr)\n             (#(collector item index) (collector.concat [glue item])))))\n\n\n(def flatten (...items)\n  (inject [] items\n          (#(collector item)\n            (collector.concat\n             (if (list? item)\n               (apply flatten item)\n               item)))))\n\n\n(def recurse-map (item fn)\n     (if (list? item) (map item (#(subitem) (recurse-map subitem fn)))\n         (fn item)))\n\n(def pluck (items attribute)\n     (map items (#(item) (get item attribute))))\n\n(def merge-into (into from)\n     (each (key) (keys from) (set into key (get from key)))\n     into)\n\n(def clone (object)\n     (inject {} (keys object)\n             (#(collector key)\n               (set collector key (get object key))\n               collector)))\n\n(def map-values (object fn)\n     (inject {} (keys object)\n             (#(collector key index)\n               (set collector key (fn (get object key) key))\n               collector)))\n\n(def merge-with (into from)\n     (merge-into (clone into) from))\n","(var parser {})\n(set sibilant 'parser parser)\n(set parser 'tokens\n     { 'regex              \"(\\\\/(\\\\\\\\\\\\\\/|[^\\\\/\\\\n])+\\\\/[glim]*)\"\n       'comment            \"(;.*)\"\n       'string             \"(\\\"(([^\\\"]|(\\\\\\\\\\\"))*[^\\\\\\\\])?\\\")\"\n       'number             \"(-?[0-9][0-9.,]*)\"\n       'literal            \"(-?[*.$a-zA-Z_][*.a-zA-Z0-9-_]*(\\\\?|!)?)\"\n       'special            \"([&'])\"\n       'at                 \"@\"\n       'tick               \"'\"\n       'hat                \"(\\\\^)\"\n       'dots               \"(\\\\.+)\"\n       'other-char         \"([#><=!\\\\+\\\\/\\\\*-]+)\"\n       'open-expression    \"(\\\\(|\\\\{|\\\\[)\"\n       'close-expression    \"(\\\\)|\\\\}|\\\\])\"\n       'newline \"\\\\n\"\n       'whitespace \"\\\\s\"\n       'ignored \".\" })\n\n;;(set parser.tokens 'special-literal (concat parser.tokens.special parser.tokens.literal))\n\n(set parser 'token-precedence  [ 'regex\n                                 'comment\n                                 'string\n                                 'number\n                                 'dots\n                                 'tick\n                                 'hat\n                                 'at\n                                 'special\n                                 'literal\n                                 'other-char\n                                 'open-expression\n                                 'close-expression\n                                 'newline\n                                 'whitespace\n                                 'ignored\n                                 ]\n     'ordered-regexes (parser.token-precedence.map\n                       (#(x)\n                         (var r (regex (\"^\" (get parser.tokens x))))\n                         (set r 'name x)\n                         r)))\n\n\n(var ordered-regexes parser.ordered-regexes)\n\n(set sibilant 'node-cache (or sibilant.node-cache {}))\n(def node-id (node)\n     (incr node-id.last-id))\n(def cache-node (node)\n     (var id (node-id node))\n     (set sibilant.node-cache id node)\n     (merge-into node {node-id id}))\n\n(set node-id 'last-id 0)\n\n (def parser.parse (string context)\n     (var context (if context context { position 0\n                        stack []\n                        line 1\n                        last-newline 0 col 0}))\n\n     (var match true\n          regex-name null\n          remaining-input string)\n\n     (while match\n            (detect ordered-regexes\n                    (#(r)\n                      (assign match (r.exec remaining-input)\n                              regex-name r.name)\n                      match))\n\n            (when (exists? match)\n                  (var match-string (first match)\n                       length (length match-string))\n                  \n                  (context.stack.push\n                   (cache-node { contents []\n                                 dir sibilant.dir\n                                 file sibilant.file\n                                 token match-string\n                                 type regex-name\n                                 start context.position\n                                 line context.line\n                                 col context.col\n                                 length length }))\n\n                  (if\n                   (= 'newline regex-name)\n                   (do\n                    (incr context.line)\n                    (set context\n                         'col 0\n                         'last-newline context.position))\n\n\n                   (and (= 'string regex-name) (!= -1 (match-string.index-of \"\\n\")))\n                   (do\n                    (var string-newline-count (- (length (match-string.split \"\\n\")) 1))\n                    (incr-by context.line string-newline-count)\n                    (set context 'col (- length (match-string.last-index-of \"\\n\"))))\n\n                   (incr-by context.col length))\n\n                  (incr-by context.position length)\n                  (assign remaining-input (if remaining-input.length\n                                              (remaining-input.slice length)\n                                              \"\"))))\n     context.stack)\n\n(var parse parser.parse)\n","(var restructurers {}\n     acceptable-pairs { \"(\" \")\" \"[\" \"]\" \"{\" \"}\" }\n     bracket-types { \"(\" 'expression\n                     \"[\" 'bracket\n                     \"{\" 'brace })\n\n(def restructure (input)\n     (var output { type 'root\n                   contents []\n                   file sibilant.file\n                   col 0\n                   line 1 }\n          context { parse-stack [output]\n                    output output\n                    input input\n                    specials 0 })\n\n     (inject context input\n             (#(context token index)\n               (var restructurer (or (get restructurers token.type) restructurers.default))\n               (restructurer token context index)))\n     output)\n\n(set sibilant 'restructure restructure)\n\n(def restructurers.open-expression (token context)\n     (var first (first context.parse-stack))\n     (set token\n          'contents []\n          'type (get bracket-types token.token)\n          'parent first)\n     (accept-specials token context)\n     (send first.contents push token)\n     (context.parse-stack.unshift token)\n     context)\n\n\n(def restructurers.close-expression (node context index)\n     (var first (first context.parse-stack))\n\n     (when (!= (get acceptable-pairs first.token) node.token)\n           (throw (\"trying to close \" (yellow (sibilant.pretty-print first))\n                                      \"\\n   on \"first.file\":\"first.line\":\"first.col\n                                      \"\\n   with \"(sibilant.pretty-print node)\n                                      \"\\n   on \"node.file\":\"node.line\":\"node.col\n                                      \"\\n\")))\n\n     (set first 'end node.end)\n     (context.parse-stack.shift)\n     (close-specials first context)\n     (when (zero? context.parse-stack.length)\n           (throw (\"unbalanced parens:\\n\"\n                   (call inspect parse-stack))))\n     context)\n\n(def open-special (node context)\n     (incr context.specials)\n\n     (var first (first context.parse-stack))\n     (set node\n          'contents []\n          'parent first)\n\n     (first.contents.push node)\n     (context.parse-stack.unshift node)\n     context)\n\n(def accept-specials (node context)\n     (set node 'specials (get context 'specials))\n     (set context 'specials 0)\n     context)\n\n(def close-specials (node context)\n     (when (> node.specials 0)\n           (decr node.specials)\n           (context.parse-stack.shift)\n           (close-specials node context))\n     context)\n\n(def restructurers.hat (node context index) (open-special node context))\n(def restructurers.dots (node context index) (open-special node context))\n(def restructurers.tick (node context index) (open-special node context))\n(def restructurers.at (node context index) (open-special node context))\n\n(def restructurers.whitespace (token context index) context)\n(def restructurers.newline (token context index) context)\n(def restructurers.ignored (token context index) context)\n\n(def restructurers.default (token context index)\n     (accept-specials token context)\n     (send (get (first context.parse-stack) 'contents) push token)\n     (close-specials token context))\n","(var macros {})\n(set sibilant 'macros macros 'debug false)\n\n\n(def recurse-indent (...args)\n     (map args\n          (#(arg)\n            (if (node? arg) (do (set arg 'contents (apply recurse-indent (compact (flatten arg.contents)))) arg)\n                (list? arg) (apply recurse-indent arg)\n                (number? arg) (arg.to-string)\n                (string? arg)\n                (chain arg\n                       (replace (regex \"\\\\n\" 'g) \"\\n  \")\n                       (replace (regex \"\\\\n\\\\s+\\\\n\" 'g) \"\\n\\n\"))\n\n                 arg))))\n\n(def indent (...args)\n     [\"\\n  \" (recurse-indent args) \"\\n\"])\n\n\n(def escape-regex (string)\n     (string.replace (regex \"[\\\\-\\\\[\\\\]\\\\/\\\\{\\\\}\\\\(\\\\)\\\\*\\\\+\\\\?\\\\.\\\\\\\\\\^\\\\$\\\\|]\" 'g) \"\\\\$&\"))\n\n(def ^return (token)\n     (when sibilant.debug (console.log \"returning \" (prettify token)))\n     (var default-return (as-statement [\"return \" (transpile token)]))\n     (if (and token token.contents token.contents.length)\n         (switch (get (first token.contents) 'token)\n                 (('return 'throw 'do) (transpile token))\n                 ('delete\n                  (var delete-macro (get macros 'delete))\n                  (if (< token.contents.length 3) default-return\n                      [ (as-statement (apply delete-macro (token.contents.slice 1 -1)))\n                        \"\\nreturn \"\n                        (as-statement (call delete-macro (last token.contents)))]))\n                 ('assign\n                  (if (< token.contents.length 4) default-return\n                      [ (apply ^assign\n                               (token.contents.slice 1 (- token.contents.length 2)))\n                        \"\\nreturn \"\n                        (apply ^assign (token.contents.slice -2))]))\n                 ('var\n                  [ (transpile token) \"\\nreturn \" (transpile (if (even? token.contents.length)\n                                                                 (last token.contents)\n                                                                 (first (token.contents.slice -2))))])\n                 ('set\n                  (if (< token.contents.length 5) default-return\n                      (do\n                       (var obj (second token.contents)\n                            non-return-part (token.contents.slice 2 (- token.contents.length 2))\n                            return-part (token.contents.slice -2))\n                       (non-return-part.unshift obj)\n                       (return-part.unshift obj)\n                       [ (^set ...non-return-part)\n                         \"\\nreturn \"\n                         (^set ...return-part)])))\n                 (default default-return))\n         default-return))\n\n\n(def statement? (transpiled)\n     (if (node? transpiled) (statement? transpiled.contents)\n         (list? transpiled) (statement? (last transpiled))\n         (string? transpiled) (= \";\" (last transpiled))\n         false))\n\n(def as-statement (node)\n     (var transpiled (transpile node))\n\n     (if (empty-node? transpiled) undefined\n         (statement? transpiled) transpiled\n         [ transpiled \";\" ]))\n\n(def ^do (...body)\n     (if (= 1 body.length) (^return (first body))\n         body.length [ (interleave \"\\n\" (map (body.slice 0 -1) (#(node) (as-statement node))))\n                       \"\\n\"\n                       (^return (last body)) ]\n         \"\"))\n\n(def ^empty-list () 'null)\n\n(def ^def (fn-name args ...body)\n     (var fn-name-tr (transpile fn-name) this-node this)\n\n     (as-statement [ (if (match? (regex \"\\\\.\") (output-formatter fn-name-tr)) \"\" \"var \")\n                     fn-name-tr \" = \"\n                     (^lambda { name fn-name args args node this-node } ...body )\n                     ] ))\n\n(def ^macro (name args ...body)\n     (var name-tr (output-formatter (transpile name))\n          options { name name args args node this}\n          js (output-formatter (^lambda options ...body)))\n\n     (when sibilant.debug (console.log js))\n     \n     (try (set macros name-tr (eval js))\n          (error (\"error in parsing macro \"\n                  (sibilant.pretty-print name) \":\\n\" js)))\n\n     undefined)\n\n(def ^concat (...args)\n     [\"(\" (interleave \" + \" (map args transpile)) \")\"])\n\n(def ^reverse (arr)\n     (var reversed [])\n     (each (item) arr (reversed.unshift item))\n     reversed)\n\n(var reverse ^reverse)\n\n(def ^lambda (args-or-options ...body)\n     (when sibilant.debug\n           (console.log args-or-options))\n     (var args (or (get args-or-options 'args) args-or-options)\n          body (or (get args-or-options 'body) body)\n          args (if (node? args 'expression) args.contents\n                   (and (node? args) (empty? body)) (do (assign body [ args ]) [])\n                   args)\n          name (when args-or-options.name\n                     (chain (output-formatter (transpile args-or-options.name))\n                            (replace (regex \"\\\\W+\" 'g) \"$\")\n                            (concat \"$\")))\n          rest (detect args\n                       (#(arg) (node? arg 'dots))))\n\n     (var this-node this\n          node (detect\n                [ args-or-options.node this-node args-or-options.name args (first body) ]\n                (#(n) (and (node? n) (get n 'file)))))\n     [\"(function\" (if name (\" \" name) \"\") \"(\"\n       (interleave \", \" (map args transpile)) \") {\"\n       (if (or args-or-options.name node)\n           (indent [\"/*\"\n                     (if args-or-options.name (\" \" (sibilant.pretty-print args-or-options.name false)) \"\")\n                     (if node (\" \" node.file \":\" node.line \":\" node.col) \"\")\n                     \" */\"]) \"\")\n       (when (exists? rest)\n             (indent (as-statement [\"var \" (transpile rest)\n                       \" = Array.prototype.slice.call(arguments, \"\n                       (- args.length 1) \")\"])))\n\n       (indent (apply ^do body))\n       \"})\"])\n\n(set macros \"#\" ^lambda)\n\n(def ^quoted-hash (...pairs)\n     (var cached-quote-value ^hash.quote-keys)\n     (set ^hash 'quote-keys true)\n     (var value (^hash ...pairs))\n     (set ^hash 'quote-keys cached-quote-value)\n     value)\n\n(def ^hash (...pairs)\n     (when (odd? pairs.length)\n           (error (\"odd number of key-value pairs in hash: \"\n                   (call inspect pairs))))\n\n     (var quote-keys ^hash.quote-keys\n          pair-strings (bulk-map pairs (#(key value)\n                                         [ (if (and quote-keys (not (node? key 'string)))\n                                               [\"\\\"\" (transpile key) \"\\\"\"]\n                                               (transpile key))\n                                           \": \"\n                                           (transpile value)])))\n     (if (>= 1 pair-strings.length)\n         [\"{ \" (interleave \", \" pair-strings) \" }\"]\n         [\"{\" (indent (interleave \",\\n\" pair-strings)) \"}\"]))\n\n\n(def qescape (content)\n     (if (not (exists? content)) \"\"\n         (string? content) (chain content\n                                  (replace (regex \"\\\"\" 'g) \"\\\\\\\"\")\n                                  (replace (regex \"\\\\n\" 'g) \"\\\\n\\\" +\\n\\\"\"))\n         content))\n\n(def log-pretty (label arg)\n     (console.log (concat label \": \" (prettify arg)))\n     arg)\n\n(var pretty-log log-pretty)\n\n(def ^quote (content)\n     (if (string? content) (\"\\\"\" (qescape content) \"\\\"\")\n         (number? content) (^quote (content.to-string))\n         (node? content 'literal) [\"\\\"\" (transpile content) \"\\\"\"]\n         (node? content 'expression)\n         (if (length (keys (find-unquotes content)))\n             (^call 'macros.expand-quote.call 'this (^quote content.node-id)\n                    (apply ^quoted-hash (alternating-keys-and-values (find-unquotes content))))\n             [\"\\\"\" (map-node (transpile content) qescape) \"\\\"\"])\n         (do\n          (console.log (\"unknown content\" (prettify content)))\n          content)))\n\n(def ^debug (val)\n     (set sibilant 'debug (eval (output-formatter (transpile val)))) null)\n\n(def map-node (node fn)\n     (if (node? node)\n         (do\n          (var mapped-node (fn node))\n          (when (node? mapped-node)\n                (set mapped-node 'contents (map-node mapped-node.contents fn)))\n\n          mapped-node)\n\n         (list? node) (map node (#(c) (map-node c fn)))\n         (fn node)))\n\n(def each-node (node fn)\n     (if (node? node) (when (fn node) (each-node node.contents fn))\n         (list? node) (each (c) node (each-node c fn))\n         (fn node)))\n\n\n(def map-node-for-quote-expansion (node expansions)\n     (if (node? node)\n         (do\n          (var mapped-node (if (expansions.has-own-property node.node-id) (get expansions node.node-id) (clone node)))\n          (when (node? mapped-node)\n                (set mapped-node 'contents (map-node-for-quote-expansion mapped-node.contents expansions)))\n\n          (assign mapped-node (splice-dots mapped-node))\n          mapped-node)\n\n         (list? node)\n           (map node (#(c) (map-node-for-quote-expansion c expansions)))\n\n         node))\n\n\n(def ^expand-quote (node-id expansions)\n     (var expanded-nodes\n          (map-node-for-quote-expansion (get sibilant.node-cache node-id) expansions))\n\n     (transpile expanded-nodes))\n\n(def unquote? (node) (node? node 'at))\n\n(def find-unquotes (node)\n     (var unquotes {})\n     (each-node node (#(n)\n                       (when (unquote? n)\n                             (set unquotes n.node-id (transpile n)))\n                       (not (node? n 'tick))))\n     unquotes)\n\n(def splice-dots (node)\n     (when (list? node.contents)\n           (var contents [])\n           (each (content) node.contents\n                 (if (and (node? content 'dots)\n                          (list? content.contents)\n                          (= content.contents.length 1)\n                          (list? (first content.contents)))\n                      (contents.push.apply contents (first content.contents))\n                      (contents.push content)))\n\n           (set node 'contents contents))\n     node)\n\n\n(def alternating-keys-and-values (hash)\n     (flatten (map (keys hash)\n                   (#(key) [key, (get hash key)]))))\n\n\n(def ^list (...args)\n       (var arg-segments [])\n       (if (empty? args) \"[]\"\n           (do\n            (def simple-list (args)\n                 [\"[ \" (interleave \", \" (map args (#(arg) arg.transpiled))) \" ]\"])\n\n            (args.for-each (#(arg)\n                  (if (node? arg 'dots) (arg-segments.push {transpiled (transpile arg)})\n                   (list? (last arg-segments)) (send (last arg-segments) push {transpiled (transpile arg)})\n                   (arg-segments.push [{transpiled (transpile arg)}]))))\n\n            (assign arg-segments (map arg-segments\n                                      (#(segment)\n                                        (if (list? segment)\n                                            (simple-list segment)\n                                            segment.transpiled))))\n\n            (if (= 1 (length arg-segments))\n                (first arg-segments)\n                [(first arg-segments) \".concat(\" (interleave \", \" (rest arg-segments))\")\"]))))\n\n\n(def ^call (fn-name ...args)\n     (if (any? args (#(arg) (node? arg 'dots)))\n           (macros.apply fn-name (macros.list ...args))\n           [ (transpile fn-name)\n                   \"(\" (interleave \", \" (map args transpile)) \")\" ]))\n\n(def ^dots (...contents)\n     (transpile contents))\n\n",";; (def flatten-output (nodes)\n;;      (inject [] nodes\n;;              (#(collector item)\n;;                (if (list? item) (apply flatten-output item)\n;;                   (if \n                                \n\n(def node? (thing type)\n     (and\n      (exists? thing)\n      (= 'object (typeof thing))\n      (string? thing.type)\n      (or (undefined? type) (= thing.type type))\n      (thing.has-own-property 'contents)))\n\n(def empty-node? (item)\n     (if (node? item) (empty-node? item.contents)\n         (list? item) (all? item empty-node?)\n         (string? item) (item.match (regex \"^\\\\s*$\"))\n         (or (= null item)\n             (undefined? item)\n             (= false item))))\n\n(def compact-node (item)\n     (if (node? item) (do\n                       (set item 'contents (compact-node item.contents))\n                       (if (and item.contents item.contents.length) item null))\n         (list? item) (do\n                       (var compacted (compact (map item compact-node)))\n                       (if (and compacted compacted.length) compacted null))\n         (if (or (= item \"\") (= item false)) null item)))\n\n(def recurse-transpile (node)\n     (if (list? node) (map node recurse-transpile)\n         (and (node? node) (!= 'output node.type)) (transpile node)\n         (and (node? node) (= 'output node.type)) (do\n                                                   (set node 'contents (recurse-transpile node.contents))\n                                                   node)\n         node))\n\n(def transpile (node preprocessor)\n     (if\n      (string? node)\n      (assign node { type 'js token node contents []})\n\n      (number? node)\n      (assign node { type 'number token (node.to-string) contents []}))\n     \n     (if (list? node) node\n         (exists? node) (do\n                         (var transpiler (or (get transpile node.type) transpile.default))\n                         (var result (transpiler node))\n                         (var result-node (recurse-transpile (if (node? result) result\n                                              { contents result type 'output })))\n                         (set result-node\n                              'contents (compact (flatten result-node.contents))\n                              'source node)\n\n                         (when sibilant.debug\n                               (console.log (prettify node)\n                                            (red \"->\")\n                                            (prettify result-node)))\n\n                         (set node 'transpiled result-node)\n\n                         \n                         (if (empty-node? result-node) undefined\n                             result-node))))\n\n\n(set sibilant 'transpile transpile)\n\n(var reader-macros {})\n\n(def transpile.hat (node)\n     (var output (transpile (first node.contents)))\n     (set output 'contents [(\"macros.\" (first output.contents))])\n     output)\n\n(def transpile.tick (node)\n     (^quote.apply node node.contents))\n\n(def transpile.at (node)\n     (transpile (first node.contents)))\n\n(def transpile.dots (node)\n     (^dots.apply node node.contents))\n\n\n(def transpile.default (node)\n     node.token)\n\n(def transpile.output (node)\n     node)\n\n(def transpile.number (node)\n     (send (parse-float (node.token.replace (regex \",\" 'g) \"\")) to-string))\n\n(def transpile.root (node)\n     (if (= 1 node.contents.length)\n         (transpile (first node.contents))\n         (interleave \"\\n\" (compact (map node.contents as-statement)))))\n\n(def transpile.expression (node preprocessor)\n     (if node.contents.length\n         (do\n          (var head (first node.contents)\n               args (rest node.contents)\n               macro (get macros (output-formatter (transpile head))))\n\n          (when (exists? macro) (set head 'hint 'macro))\n\n          (when (and head (= 'string head.type))\n                (assign macro macros.concat args node.contents))\n\n          (when (undefined? macro)\n                (assign macro macros.call args node.contents))\n\n          (macro.apply node args))\n\n         \"null\"))\n\n(def transpile.bracket (node)\n     (apply macros.list node.contents))\n\n(def transpile.brace (node) (apply macros.hash node.contents))\n\n(def transpile.literal (node)\n     (var string node.token)\n     (inject (chain string\n                    (replace (regex \"\\\\*\" 'g) \"_\")\n                    (replace (regex \"\\\\?$\") \"__QUERY\")\n                    (replace (regex \"!$\") \"__BANG\"))\n             (string.match (regex \"-(.)\" 'g))\n             (#(return-string match)\n               (return-string.replace match\n                                      (send (second match) to-upper-case)))))\n\n(def transpile.string (node)\n     (chain node.token (split \"\\n\")\n            (join \"\\\\n\\\" +\\n\\\"\")))\n\n(def transpile.comment (node) null)\n\n","(def sibilize (input)\n     (sibilant.initialize)\n     (output-formatter (transpile (restructure (parse input)))))\n\n(def sourcemap (input)\n     (sibilant.initialize)\n     (sourcemapper (transpile (restructure (parse input)))))\n\n(set sibilant 'sibilize sibilize)\n\n(def sibilant.version ()\n     (get (sibilant.package-info) 'version))\n\n(def sibilant.strip-shebang (data)\n     (data.replace (regex \"^#!.*\\\\n\") \"\\n\"))\n\n(set sibilant 'file 'eval.sibilant)\n\n(def with-dir-and-file (dir file fn)\n     (var before { dir sibilant.dir\n                   file sibilant.file })\n     (set sibilant\n          'dir  dir\n          'file file)\n\n     (var retval (fn))\n\n     (set sibilant\n          'dir  before.dir\n          'file before.file)\n\n     retval)\n\n(set sibilant 'source-cache {})\n\n(def sibilant.sibilize-file (file-name)\n     (output-formatter (sibilant.transpile-file file-name)))\n\n(def sibilant.sibilize-json (file-name)\n     (sibilant.initialize)\n     (var before sibilant.macros.hash.quote-keys)\n     (set sibilant.macros.hash 'quote-keys true)\n     (var content (sibilant.sibilize-file file-name))\n     (set sibilant.macros.hash 'quote-keys before)\n     content)\n\n(def sibilant.macros.include (file)\n     (sibilant.include (eval (output-formatter (transpile file)))))\n\n"]}