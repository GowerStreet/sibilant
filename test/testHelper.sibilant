(var sibilant (require "../lib/sibilant")
        sys      (require 'sys)
        inspect  sys.inspect
        passes   0
        fails    0)

(set sibilant
     'dir (meta (macros.quote sibilant.dir)))

(delmacro inspect)

(console.log (concat "Testing " (sibilant.version-string)))

(def green (&rest args)
  (concat "\033[32m" (join "" args) "\033[0m"))

(def red (&rest args)
  (concat "\033[31m" (join "" args) "\033[0m"))

(def trim (string)
  (if string (string.trim) ""))

(def pass () (incr passes) (process.stdout.write (green ".")))

(def fail (message)
  (incr fails)
  (process.stdout.write (concat (red "F") "\n" (+ passes fails) ": "
          (or message "")
          (chain (get (new Error) 'stack)
            (replace /Error.*/ ""))
          "\n")))

(def assert (thing message)
  (if thing (pass) (fail message)))

(def assert-equal (expected actual message)
  (assert (= expected actual)
          (concat (if message (concat message "\n") "")
                  "\n  expected " (green (inspect expected))
                  "\n   but got " (red (inspect actual)) "\n")))

(def assert-match (regex thing message)
  (assert (regex.test thing)
          (concat (if message (concat message "\n\n") "")
                  "expected "
                  (inspect thing) " to match "
                  (inspect regex) " but it did not.")))

(def assert-translation (sibilant-code js-code)
  (assert-equal (trim js-code)
		(trim (try (sibilant.translate-all sibilant-code)))))

(def assert-throws (block message)
  (try (progn (block)
              (fail (concat "expected to catch "
                                   (if message (concat "`" message "'") "an error")
                                   " but caught nothing")))
       (if message
         (if message.test
           (assert-match message (e.to-string))
           (assert-equal (trim message) (trim (e.to-string))))
         (pass))))

(def assert-translation-error (sibilant-code error-text)
  (assert-throws (#> (sibilant.translate-all (trim sibilant-code))) error-text))

(def assert-true (&rest args)
  (args.unshift true)
  (apply assert-equal args))

(def assert-false (&rest args)
  (args.unshift false)
  (apply assert-equal args))

(def assert-deep-equal (expected actual)
  (each (item index) expected
            (assert-equal item (get actual index))))

(process.next-tick (#> (console.log (concat "\n\n" (+ passes fails) " total tests, "
                                            (green passes " passed") ", " (red fails " failed")))
                       (when (> fails 0) (process.exit 1))))
