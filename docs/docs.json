
[{"name":"macro core/ternary","description":"the simplest way to conditionally execute code.","arguments":["cond","ifTrue","ifFalse"],"definition":"(macro ternary (cond if-true if-false)\n       [\"(\" (transpile cond) \") ? \"\n            (transpile if-true) \" : \"\n            (transpile if-false)])","examples":[{"javascript":"(50 < 100) ? \"fifty is less than 100\" : \"fifty is more than 100\"","sibilant":"(ternary (< 50 100)\n                       \"fifty is less than 100\"\n                       \"fifty is more than 100\")"}]},{"name":"macro core/alias-macro","description":"stores a duplicate copy of `current-macro-name` as\n`new-macro-name` in current namespace.  No output.","arguments":["currentMacroName","newMacroName"],"definition":"(macro alias-macro (current-macro-name new-macro-name)\n       (var current-macro-name (output-formatter (transpile current-macro-name))\n            new-macro-name (output-formatter (transpile new-macro-name)))\n       (set sibilant.macros.namespace\n            new-macro-name (get sibilant.macros.namespace current-macro-name))\n       null)","examples":[]},{"name":"macro core/send","description":"calls the `method` on `object` as a function with `args` as the arguments","arguments":["object","method","args"],"definition":"(macro send (object method ...args)\n       [(transpile object) \".\" (transpile method)\n               \"(\" (interleave \", \" (map args transpile)) \")\"])","examples":[{"javascript":"object.method(firstArgument, secondArgument, thirdArgument)","sibilant":"(send object method first-argument second-argument third-argument)"}]},{"name":"macro core/apply","description":"calls the function `fn` with arguments passed as an array in `arglist`","arguments":["fn","arglist"],"definition":"(macro apply (fn arglist)\n       '(.apply @fn this @arglist))","examples":[{"javascript":"myFunction.apply(this, [ firstArg, secondArg, thirdArg ])","sibilant":"(apply my-function [ first-arg second-arg third-arg ])"}]},{"name":"macro core/cons","description":"builds an array with `first` as the zeroth index and the\nelements provided by array `rest` as the subsequent elements, as\nsiblings with `first`.  deprecated","arguments":["first","rest"],"definition":"(macro cons (first rest)\n       [\"[ \" (transpile first) \" ].concat(\" (transpile rest) \")\"])","examples":[{"javascript":"[ 1 ].concat([ 2, 3, 4 ])","sibilant":"(cons 1 [ 2 3 4 ])"}]},{"name":"macro core/append","description":"adds `additional` elements onto the right-side (tail) of `list`. deprecated","arguments":["list","additional"],"definition":"(macro append (list ...additional)\n       '(.concat @list (list ...@additional)))","examples":[{"javascript":"[ 1, 2, 3 ].concat([ 4, 5, 6 ])","sibilant":"(append [ 1 2 3 ] 4 5 6)"}]},{"name":"macro core/length","description":"fetches length attribute from `arr`","arguments":["arr"],"definition":"(macro length (arr)\n       '(get @arr 'length))","examples":[{"javascript":"[ 1, 2, 3 ].length","sibilant":"(length [ 1 2 3 ])"}]},{"name":"macro core/scoped","description":"executes the `body` inside of a self-executing function. The\nlast statement/expression of the body is returned.","arguments":["body"],"definition":"(macro scoped (...body)\n       '(.call (lambda @{node this args []} ...@body) this))","examples":[{"javascript":"(function() {\n  /* /Users/jbr/code/sibilant/include/macros.sibilant:100:16 */\n\n  return true;\n}).call(this)","sibilant":"(scoped true)"},{"javascript":"(function() {\n  /* /Users/jbr/code/sibilant/include/macros.sibilant:100:30 */\n\n  var a = 1;\n  return (a + 2);\n}).call(this)","sibilant":"(scoped (var a 1) (+ a 2))"}]},{"name":"macro core/first","description":"fetches the first element from `arr`","arguments":["arr"],"definition":"(macro first (arr) (var index0) `(get @arr @index))","examples":[{"javascript":"myArray[0]","sibilant":"( first my-array)"}]},{"name":"macro core/second","description":"fetches the second element from `arr`","arguments":["arr"],"definition":"(macro second (arr) (var index1) `(get @arr @index))","examples":[{"javascript":"myArray[1]","sibilant":"( second my-array)"}]},{"name":"macro core/third","description":"fetches the third element from `arr`","arguments":["arr"],"definition":"(macro third (arr) (var index2) `(get @arr @index))","examples":[{"javascript":"myArray[2]","sibilant":"( third my-array)"}]},{"name":"macro core/fourth","description":"fetches the fourth element from `arr`","arguments":["arr"],"definition":"(macro fourth (arr) (var index3) `(get @arr @index))","examples":[{"javascript":"myArray[3]","sibilant":"( fourth my-array)"}]},{"name":"macro core/fifth","description":"fetches the fifth element from `arr`","arguments":["arr"],"definition":"(macro fifth (arr) (var index4) `(get @arr @index))","examples":[{"javascript":"myArray[4]","sibilant":"( fifth my-array)"}]},{"name":"macro core/sixth","description":"fetches the sixth element from `arr`","arguments":["arr"],"definition":"(macro sixth (arr) (var index5) `(get @arr @index))","examples":[{"javascript":"myArray[5]","sibilant":"( sixth my-array)"}]},{"name":"macro core/seventh","description":"fetches the seventh element from `arr`","arguments":["arr"],"definition":"(macro seventh (arr) (var index6) `(get @arr @index))","examples":[{"javascript":"myArray[6]","sibilant":"( seventh my-array)"}]},{"name":"macro core/eighth","description":"fetches the eighth element from `arr`","arguments":["arr"],"definition":"(macro eighth (arr) (var index7) `(get @arr @index))","examples":[{"javascript":"myArray[7]","sibilant":"( eighth my-array)"}]},{"name":"macro core/ninth","description":"fetches the ninth element from `arr`","arguments":["arr"],"definition":"(macro ninth (arr) (var index8) `(get @arr @index))","examples":[{"javascript":"myArray[8]","sibilant":"( ninth my-array)"}]},{"name":"macro core/rest","description":"fetches all but the first item of `arr`","arguments":["arr"],"definition":"(macro rest (arr) '(.slice @arr 1))","examples":[{"javascript":"[ 1, 2, 3 ].slice(1)","sibilant":"(rest [ 1 2 3 ])"}]},{"name":"macro core/last","description":"fetches just the last element of `arr` by slicing.","arguments":["arr"],"definition":"(macro last (arr) '(first (.slice @arr -1)))","examples":[{"javascript":"[ 1, 2, 3 ].slice(-1)[0]","sibilant":"(last [ 1 2 3 ])"}]},{"name":"macro core/+","description":"adds `args` using the javascript `+` operator. Since javascript\noverloads this for string concatenation, this macro can be used for\nthis as well.","arguments":["args"],"definition":"(macro +   (...args)\n       [\"(\" (interleave \" + \" (map args transpile)) \")\"])","examples":[{"javascript":"(1 + 2 + 3)","sibilant":"(+ 1 2 3)"},{"javascript":"(\"hello\" + \"world\")","sibilant":"(+ 'hello 'world)"}]},{"name":"macro core/-","description":"subtracts each subsequent element of `args`","arguments":["args"],"definition":"(macro -   (...args)\n       [\"(\" (interleave \" - \" (map args transpile)) \")\"])","examples":[{"javascript":"(2 - 1)","sibilant":"(- 2 1)"},{"javascript":"(10 - 5 - 1)","sibilant":"(- 10 5 1)"}]},{"name":"macro core/*","description":"multiplies elements of `args`","arguments":["args"],"definition":"(macro *   (...args)\n       [\"(\" (interleave \" * \" (map args transpile)) \")\"])","examples":[{"javascript":"(3 * 4 * 5)","sibilant":"(* 3 4 5)"}]},{"name":"macro core//","description":"divides each subsequent element of `args`","arguments":["args"],"definition":"(macro /   (...args)\n           [\"(\" (interleave \" / \" (map args transpile)) \")\"])","examples":[{"javascript":"(1 / 2)","sibilant":"(/ 1 2)"},{"javascript":"(1 / 2 / 3)","sibilant":"(/ 1 2 3)"}]},{"name":"macro core/or","description":"short circuiting operator returns the first element of `args` that evaluates to be truthy","arguments":["args"],"definition":"(macro or  (...args)\n       [\"(\" (interleave \" || \" (map args transpile)) \")\"])","examples":[{"javascript":"(1 === 2 || typeof [] === \"string\" || \"one is not two and an array is not a string\")","sibilant":"(or (= 1 2) (string? []) \"one is not two and an array is not a string\")"}]},{"name":"macro core/and","description":"returns the last element if all elements of `args` are truthy, or the\nfirst non-truthy element if it exists","arguments":["args"],"definition":"(macro and (...args)\n       (ternary (= 1 (length args)) (transpile (first args))\n                [\"(\" (interleave \" && \" (map args transpile)) \")\"]))","examples":[{"javascript":"(typeof \"string\" === \"string\" && typeof 10 === \"number\" && 1 === 1)","sibilant":"(and (string? \"string\") (number? 10) (= 1 1))"}]},{"name":"macro core/mod","description":"modulus operator","arguments":["args"],"definition":"(macro mod (...args)\n       [\"(\" (interleave \" % \" (map args transpile)) \")\"])","examples":[{"javascript":"(10 % 2)","sibilant":"(mod 10 2)"}]},{"name":"macro core/>","description":"compares `args` from left to right, returning true if each element is greater than than the next","arguments":["args"],"definition":"(macro > (...args)\n               (var js-comparator'\"' >'\"')\n               `(and ...@(map (args.slice 0 -1)\n                              (#(item index)\n                                [ item \" \" js-comparator \" \"\n                                  (get args (+ 1 index)) ]))))","examples":[{"javascript":"(a > b && b > c)","sibilant":"( > a b c)"},{"javascript":"a > b","sibilant":"( > a b)"}]},{"name":"macro core/<","description":"compares `args` from left to right, returning true if each element is less than than the next","arguments":["args"],"definition":"(macro < (...args)\n               (var js-comparator'\"' <'\"')\n               `(and ...@(map (args.slice 0 -1)\n                              (#(item index)\n                                [ item \" \" js-comparator \" \"\n                                  (get args (+ 1 index)) ]))))","examples":[{"javascript":"(a < b && b < c)","sibilant":"( < a b c)"},{"javascript":"a < b","sibilant":"( < a b)"}]},{"name":"macro core/<=","description":"compares `args` from left to right, returning true if each element is less than or equal than the next","arguments":["args"],"definition":"(macro <= (...args)\n               (var js-comparator'\"' <='\"')\n               `(and ...@(map (args.slice 0 -1)\n                              (#(item index)\n                                [ item \" \" js-comparator \" \"\n                                  (get args (+ 1 index)) ]))))","examples":[{"javascript":"(a <= b && b <= c)","sibilant":"( <= a b c)"},{"javascript":"a <= b","sibilant":"( <= a b)"}]},{"name":"macro core/>=","description":"compares `args` from left to right, returning true if each element is greater than or equal than the next","arguments":["args"],"definition":"(macro >= (...args)\n               (var js-comparator'\"' >='\"')\n               `(and ...@(map (args.slice 0 -1)\n                              (#(item index)\n                                [ item \" \" js-comparator \" \"\n                                  (get args (+ 1 index)) ]))))","examples":[{"javascript":"(a >= b && b >= c)","sibilant":"( >= a b c)"},{"javascript":"a >= b","sibilant":"( >= a b)"}]},{"name":"macro core/!=","description":"compares `args` from left to right, returning true if each element is not equal (using threequals) than the next","arguments":["args"],"definition":"(macro != (...args)\n               (var js-comparator \"!==\")\n               `(and ...@(map (args.slice 0 -1)\n                              (#(item index)\n                                [ item \" \" js-comparator \" \"\n                                  (get args (+ 1 index)) ]))))","examples":[{"javascript":"(a !== b && b !== c)","sibilant":"( != a b c)"},{"javascript":"a !== b","sibilant":"( != a b)"}]},{"name":"macro core/=","description":"compares `args` from left to right, returning true if each element is equal (using threequals) than the next","arguments":["args"],"definition":"(macro = (...args)\n               (var js-comparator \"===\")\n               `(and ...@(map (args.slice 0 -1)\n                              (#(item index)\n                                [ item \" \" js-comparator \" \"\n                                  (get args (+ 1 index)) ]))))","examples":[{"javascript":"(a === b && b === c)","sibilant":"( = a b c)"},{"javascript":"a === b","sibilant":"( = a b)"}]},{"name":"macro core/incr-by","description":"increments `item` by `increment`","arguments":["item","increment"],"definition":"(macro incr-by (item increment)\n       [ (transpile item) \" += \" (transpile increment)])","examples":[{"javascript":"n += 5","sibilant":"(incr-by n 5)"}]},{"name":"macro core/incr","description":"increments item by 1","arguments":["item"],"definition":"(macro incr (item)\n       [\"((\" (transpile item) \")++)\"])","examples":[{"javascript":"((i)++)","sibilant":"(incr i)"}]},{"name":"macro core/decr","description":"decrements item by 1","arguments":["item"],"definition":"(macro decr (item) [\"((\" (transpile item) \")--)\"])","examples":[{"javascript":"((i)--)","sibilant":"(decr i)"}]},{"name":"macro core/new","description":"uses the javascript new keyword to construct an object using\n      `constructor`, with `args` passed as arguments to the constructor.","arguments":["constructor","args"],"definition":"(macro new (constructor ...args)\n       [\"(new \" '(call @constructor ...@args) \")\"])","examples":[{"javascript":"(new RegExp(\"hello\", \"g\"))","sibilant":"(new RegExp \"hello\" 'g)"}]},{"name":"macro core/regex","description":"builds a regex using `pattern` and `flags` as arguments to the RegExp constructor","arguments":["pattern","flags"],"definition":"(macro regex (pattern flags)\n       '(new RegExp @pattern @(or flags 'undefined)))","examples":[{"javascript":"(new RegExp(\"[0-9]+\", undefined))","sibilant":"(regex \"[0-9]+\")"},{"javascript":"(new RegExp(\"0x[0-9a-f]+\", \"i\"))","sibilant":"(regex \"0x[0-9a-f]+\" 'i)"}]},{"name":"macro core/timestamp","description":"inserts compilation timestamp as a string. deprecated.","arguments":[],"definition":"(macro timestamp ()\n       [\"\\\"\" (.to-string (new Date)) \"\\\"\"])","examples":[{"javascript":"\"Mon Dec 21 2015 19:41:12 GMT-0800 (PST)\"","sibilant":"(timestamp)"}]},{"name":"macro core/zero?","description":"predicate to test for equality with zero","arguments":["item"],"definition":"(macro zero? (item) '(= @item 0))","examples":[{"javascript":"n === 0","sibilant":"(zero? n)"}]},{"name":"macro core/empty?","description":"returns true if the array `arr` has a length of zero","arguments":["arr"],"definition":"(macro empty? (arr)\n       `(= 0 (length @arr)))","examples":[{"javascript":"0 === [].length","sibilant":"(empty? [])"}]},{"name":"macro core/odd?","description":"returns true if `number` is not divisible by 2","arguments":["number"],"definition":"(macro odd? (number)\n       '(= 1 (mod @number 2)))","examples":[{"javascript":"1 === (5 % 2)","sibilant":"(odd? 5)"}]},{"name":"macro core/even?","description":"returns true if `number` is divisible by 2 with no remainder","arguments":["number"],"definition":"(macro even? (number)\n       '(= 0 (mod @number 2)))","examples":[{"javascript":"0 === (10 % 2)","sibilant":"(even? 10)"}]},{"name":"macro core/typeof","description":"exposes the javascript typeof operator. most often, predicates\nsuch as `string?`, `function?`, `number?`, etc are preferred.","arguments":["thing"],"definition":"(macro typeof (thing) [\"typeof \" (transpile thing)])","examples":[{"javascript":"typeof 5","sibilant":"(typeof 5)"}]},{"name":"macro core/string?","description":"returns true if all of the `things` are javascript strings","arguments":["things"],"definition":"(macro string? (...things)\n       '(and ...@(map things (#(thing) '(= (typeof @thing) 'string)))))","examples":[{"javascript":"typeof testObject === \"string\"","sibilant":"(string? test-object)"},{"javascript":"(typeof \"yes\" === \"string\" && typeof \"yes\" === \"string\" && typeof \"yes\" === \"string\")","sibilant":"(string? 'yes 'yes 'yes)"}]},{"name":"macro core/function?","description":"returns true if all of the `things` are functions","arguments":["things"],"definition":"(macro function? (...things)\n       '(and ...@(map things (#(thing) '(= (typeof @thing) 'function)))))","examples":[{"javascript":"typeof fn === \"function\"","sibilant":"(function? fn)"},{"javascript":"(typeof err === \"function\" && typeof cb === \"function\")","sibilant":"(function? err cb)"}]},{"name":"macro core/undefined?","description":"returns true if all of the `things` are undefined, as tested\nwith `typeof`, not equality with literal undefined. This is the\ninverse of `defined?`","arguments":["things"],"definition":"(macro undefined? (...things)\n       '(and ...@(map things (#(thing) '(= (typeof @thing) 'undefined)))))","examples":[{"javascript":"typeof argument === \"undefined\"","sibilant":"(undefined? argument)"},{"javascript":"(typeof 1 === \"undefined\" && typeof 2 === \"undefined\" && typeof undefined === \"undefined\")","sibilant":"(undefined? 1 2 undefined)"}]},{"name":"macro core/defined?","description":"returns true if none of the `things` are undefined, as tested\nwith `typeof`. This is the inverse of `defined?`","arguments":["things"],"definition":"(macro defined? (...things)\n       '(and ...@(map things (#(thing) '(!= (typeof @thing) 'undefined)))))","examples":[{"javascript":"typeof variable !== \"undefined\"","sibilant":"(defined? variable)"},{"javascript":"(typeof var1 !== \"undefined\" && typeof var2 !== \"undefined\" && typeof var3 !== \"undefined\")","sibilant":"(defined? var1 var2 var3)"}]},{"name":"macro core/number?","description":"returns true if all of the `things` are numbers, as tested\nwith `typeof`","arguments":["things"],"definition":"(macro number? (...things)\n       '(and ...@(map things (#(thing) '(= (typeof @thing) 'number)))))","examples":[{"javascript":"typeof 1 === \"number\"","sibilant":"(number? 1)"},{"javascript":"(typeof 1 === \"number\" && typeof 2 === \"number\" && typeof 3 === \"number\")","sibilant":"(number? 1 2 3)"}]},{"name":"macro core/pipe","description":"inserts the result of each subsequent call in `calls` as the\nsecond argument to the next macro. This is very much akin to clojure's thread-first arrow or elixir's pipe operator","references":[{"contents":[],"dir":"/Users/jbr/code/sibilant/include","file":"/Users/jbr/code/sibilant/include/macros.sibilant","token":"\"https://clojuredocs.org/clojure.core/-%3E\"","type":"string","start":10409,"line":341,"col":19,"length":43,"nodeId":4235,"specials":0,"precedingIgnored":[{"contents":[],"dir":"/Users/jbr/code/sibilant/include","file":"/Users/jbr/code/sibilant/include/macros.sibilant","token":" ","type":"whitespace","start":10408,"line":341,"col":18,"length":1,"nodeId":4234}]},{"contents":[],"dir":"/Users/jbr/code/sibilant/include","file":"/Users/jbr/code/sibilant/include/macros.sibilant","token":"\"http://elixir-lang.org/docs/v1.0/elixir/Kernel.html#|>/2\"","type":"string","start":10472,"line":342,"col":19,"length":58,"nodeId":4256,"specials":0,"precedingIgnored":[{"contents":[],"dir":"/Users/jbr/code/sibilant/include","file":"/Users/jbr/code/sibilant/include/macros.sibilant","token":"\n","type":"newline","start":10452,"line":341,"col":62,"length":1,"nodeId":4236},{"contents":[],"dir":"/Users/jbr/code/sibilant/include","file":"/Users/jbr/code/sibilant/include/macros.sibilant","token":" ","type":"whitespace","start":10453,"line":342,"col":0,"length":1,"nodeId":4237},{"contents":[],"dir":"/Users/jbr/code/sibilant/include","file":"/Users/jbr/code/sibilant/include/macros.sibilant","token":" ","type":"whitespace","start":10454,"line":342,"col":1,"length":1,"nodeId":4238},{"contents":[],"dir":"/Users/jbr/code/sibilant/include","file":"/Users/jbr/code/sibilant/include/macros.sibilant","token":" ","type":"whitespace","start":10455,"line":342,"col":2,"length":1,"nodeId":4239},{"contents":[],"dir":"/Users/jbr/code/sibilant/include","file":"/Users/jbr/code/sibilant/include/macros.sibilant","token":" ","type":"whitespace","start":10456,"line":342,"col":3,"length":1,"nodeId":4240},{"contents":[],"dir":"/Users/jbr/code/sibilant/include","file":"/Users/jbr/code/sibilant/include/macros.sibilant","token":" ","type":"whitespace","start":10457,"line":342,"col":4,"length":1,"nodeId":4241},{"contents":[],"dir":"/Users/jbr/code/sibilant/include","file":"/Users/jbr/code/sibilant/include/macros.sibilant","token":" ","type":"whitespace","start":10458,"line":342,"col":5,"length":1,"nodeId":4242},{"contents":[],"dir":"/Users/jbr/code/sibilant/include","file":"/Users/jbr/code/sibilant/include/macros.sibilant","token":" ","type":"whitespace","start":10459,"line":342,"col":6,"length":1,"nodeId":4243},{"contents":[],"dir":"/Users/jbr/code/sibilant/include","file":"/Users/jbr/code/sibilant/include/macros.sibilant","token":" ","type":"whitespace","start":10460,"line":342,"col":7,"length":1,"nodeId":4244},{"contents":[],"dir":"/Users/jbr/code/sibilant/include","file":"/Users/jbr/code/sibilant/include/macros.sibilant","token":" ","type":"whitespace","start":10461,"line":342,"col":8,"length":1,"nodeId":4245},{"contents":[],"dir":"/Users/jbr/code/sibilant/include","file":"/Users/jbr/code/sibilant/include/macros.sibilant","token":" ","type":"whitespace","start":10462,"line":342,"col":9,"length":1,"nodeId":4246},{"contents":[],"dir":"/Users/jbr/code/sibilant/include","file":"/Users/jbr/code/sibilant/include/macros.sibilant","token":" ","type":"whitespace","start":10463,"line":342,"col":10,"length":1,"nodeId":4247},{"contents":[],"dir":"/Users/jbr/code/sibilant/include","file":"/Users/jbr/code/sibilant/include/macros.sibilant","token":" ","type":"whitespace","start":10464,"line":342,"col":11,"length":1,"nodeId":4248},{"contents":[],"dir":"/Users/jbr/code/sibilant/include","file":"/Users/jbr/code/sibilant/include/macros.sibilant","token":" ","type":"whitespace","start":10465,"line":342,"col":12,"length":1,"nodeId":4249},{"contents":[],"dir":"/Users/jbr/code/sibilant/include","file":"/Users/jbr/code/sibilant/include/macros.sibilant","token":" ","type":"whitespace","start":10466,"line":342,"col":13,"length":1,"nodeId":4250},{"contents":[],"dir":"/Users/jbr/code/sibilant/include","file":"/Users/jbr/code/sibilant/include/macros.sibilant","token":" ","type":"whitespace","start":10467,"line":342,"col":14,"length":1,"nodeId":4251},{"contents":[],"dir":"/Users/jbr/code/sibilant/include","file":"/Users/jbr/code/sibilant/include/macros.sibilant","token":" ","type":"whitespace","start":10468,"line":342,"col":15,"length":1,"nodeId":4252},{"contents":[],"dir":"/Users/jbr/code/sibilant/include","file":"/Users/jbr/code/sibilant/include/macros.sibilant","token":" ","type":"whitespace","start":10469,"line":342,"col":16,"length":1,"nodeId":4253},{"contents":[],"dir":"/Users/jbr/code/sibilant/include","file":"/Users/jbr/code/sibilant/include/macros.sibilant","token":" ","type":"whitespace","start":10470,"line":342,"col":17,"length":1,"nodeId":4254},{"contents":[],"dir":"/Users/jbr/code/sibilant/include","file":"/Users/jbr/code/sibilant/include/macros.sibilant","token":" ","type":"whitespace","start":10471,"line":342,"col":18,"length":1,"nodeId":4255}]}],"arguments":["calls"],"definition":"(macro pipe (...calls)\n       (inject undefined calls\n               (#(value item)\n                 (if (undefined? value) item\n                     (scoped\n                      (var cloned (if (node? item 'literal 'dots)\n                                      (get `(@item) 'source)\n                                      (clone item)))\n                     \n                      (merge-into cloned\n                                  { contents [ (first cloned.contents)\n                                               value\n                                               ...(rest cloned.contents) ] }))))))","examples":[{"javascript":"(\"a b c d\".toUpperCase().replace(\"A\", \"X\").split(\" \")[0] + \" marks the spot\")","sibilant":"(pipe \"a b c d\"\n                     .to-upper-case\n                     (.replace \"A\" \"X\")\n                     (.split \" \")\n                     first\n                     (concat \" marks the spot\"))"},{"javascript":"JSON.stringify(JSON.parse(\"{\\\"a\\\": {\\\"b\\\": [ 1, 2, 3 ]}}\").a)","sibilant":"(pipe \"{\\\"a\\\": {\\\"b\\\": [ 1, 2, 3 ]}}\"\n                        JSON.parse\n                        (get 'a)\n                        JSON.stringify)"}]},{"name":"macro core/comment","description":"inserts `contents` transpiled to javascript as a comment in the\noutput file, removing it from execution.","arguments":["contents"],"definition":"(macro comment (...contents)\n       (map contents (#(content)\n                       [\"// \"(recurse-map (transpile content)\n                                    (#(item)\n                                      (ternary item\n                                               (pipe item transpile output-formatter\n                                                     (.replace (regex \"\n\" 'g) \"\n// \"))\n                                               null)))])))","examples":[{"javascript":"// (function() {\n//   /* /Users/jbr/code/sibilant/include/macros.sibilant:362:23 */\n// \n//   return 1;\n// }).call(this)","sibilant":"(comment (scoped 1))"}]},{"name":"macro core/array?","description":"returns true if `thing` is an array in javascript. aliased as\n`list?`.","arguments":["thing"],"definition":"(macro array? (thing)\n       (var transpiled (transpile thing))\n       [\"((\" transpiled \") && typeof (\" transpiled \") === \\\"object\\\" && (\"\n               transpiled \").constructor.name === \\\"Array\\\")\"])","examples":[{"javascript":"((arr) && typeof (arr) === \"object\" && (arr).constructor.name === \"Array\")","sibilant":"(array? arr)"}]},{"name":"macro core/when","description":"evaluates statements in `body` if `condition` is true. `body`\n      is `scoped` in a self-evaluating function to support having a\n      return value from the if statement.","arguments":["condition","body"],"definition":"(macro when (condition ...body)\n       [\"(function() {\"\n        (indent [\"if (\" (transpile condition) \") {\"\n                        (indent '(do ...@body))\n                        \"}\"])\n        \"}).call(this)\"])","examples":[{"javascript":"(function() {\n  if (3 < i) {\n    console.log(i);\n    return arr[i];\n  }\n}).call(this)","sibilant":"(when (< 3 i) (console.log i) (get arr i))"}]},{"name":"macro core/not","description":"boolean negation, as determined by javascript truthiness","references":[{"contents":[],"dir":"/Users/jbr/code/sibilant/include","file":"/Users/jbr/code/sibilant/include/macros.sibilant","token":"\"https://developer.mozilla.org/en-US/docs/Glossary/Truthy\"","type":"string","start":13048,"line":408,"col":20,"length":58,"nodeId":5387,"specials":0,"precedingIgnored":[{"contents":[],"dir":"/Users/jbr/code/sibilant/include","file":"/Users/jbr/code/sibilant/include/macros.sibilant","token":" ","type":"whitespace","start":13047,"line":408,"col":19,"length":1,"nodeId":5386}]},{"contents":[],"dir":"/Users/jbr/code/sibilant/include","file":"/Users/jbr/code/sibilant/include/macros.sibilant","token":"\"https://developer.mozilla.org/en-US/docs/Glossary/Falsy\"","type":"string","start":13127,"line":409,"col":20,"length":57,"nodeId":5409,"specials":0,"precedingIgnored":[{"contents":[],"dir":"/Users/jbr/code/sibilant/include","file":"/Users/jbr/code/sibilant/include/macros.sibilant","token":"\n","type":"newline","start":13106,"line":408,"col":78,"length":1,"nodeId":5388},{"contents":[],"dir":"/Users/jbr/code/sibilant/include","file":"/Users/jbr/code/sibilant/include/macros.sibilant","token":" ","type":"whitespace","start":13107,"line":409,"col":0,"length":1,"nodeId":5389},{"contents":[],"dir":"/Users/jbr/code/sibilant/include","file":"/Users/jbr/code/sibilant/include/macros.sibilant","token":" ","type":"whitespace","start":13108,"line":409,"col":1,"length":1,"nodeId":5390},{"contents":[],"dir":"/Users/jbr/code/sibilant/include","file":"/Users/jbr/code/sibilant/include/macros.sibilant","token":" ","type":"whitespace","start":13109,"line":409,"col":2,"length":1,"nodeId":5391},{"contents":[],"dir":"/Users/jbr/code/sibilant/include","file":"/Users/jbr/code/sibilant/include/macros.sibilant","token":" ","type":"whitespace","start":13110,"line":409,"col":3,"length":1,"nodeId":5392},{"contents":[],"dir":"/Users/jbr/code/sibilant/include","file":"/Users/jbr/code/sibilant/include/macros.sibilant","token":" ","type":"whitespace","start":13111,"line":409,"col":4,"length":1,"nodeId":5393},{"contents":[],"dir":"/Users/jbr/code/sibilant/include","file":"/Users/jbr/code/sibilant/include/macros.sibilant","token":" ","type":"whitespace","start":13112,"line":409,"col":5,"length":1,"nodeId":5394},{"contents":[],"dir":"/Users/jbr/code/sibilant/include","file":"/Users/jbr/code/sibilant/include/macros.sibilant","token":" ","type":"whitespace","start":13113,"line":409,"col":6,"length":1,"nodeId":5395},{"contents":[],"dir":"/Users/jbr/code/sibilant/include","file":"/Users/jbr/code/sibilant/include/macros.sibilant","token":" ","type":"whitespace","start":13114,"line":409,"col":7,"length":1,"nodeId":5396},{"contents":[],"dir":"/Users/jbr/code/sibilant/include","file":"/Users/jbr/code/sibilant/include/macros.sibilant","token":" ","type":"whitespace","start":13115,"line":409,"col":8,"length":1,"nodeId":5397},{"contents":[],"dir":"/Users/jbr/code/sibilant/include","file":"/Users/jbr/code/sibilant/include/macros.sibilant","token":" ","type":"whitespace","start":13116,"line":409,"col":9,"length":1,"nodeId":5398},{"contents":[],"dir":"/Users/jbr/code/sibilant/include","file":"/Users/jbr/code/sibilant/include/macros.sibilant","token":" ","type":"whitespace","start":13117,"line":409,"col":10,"length":1,"nodeId":5399},{"contents":[],"dir":"/Users/jbr/code/sibilant/include","file":"/Users/jbr/code/sibilant/include/macros.sibilant","token":" ","type":"whitespace","start":13118,"line":409,"col":11,"length":1,"nodeId":5400},{"contents":[],"dir":"/Users/jbr/code/sibilant/include","file":"/Users/jbr/code/sibilant/include/macros.sibilant","token":" ","type":"whitespace","start":13119,"line":409,"col":12,"length":1,"nodeId":5401},{"contents":[],"dir":"/Users/jbr/code/sibilant/include","file":"/Users/jbr/code/sibilant/include/macros.sibilant","token":" ","type":"whitespace","start":13120,"line":409,"col":13,"length":1,"nodeId":5402},{"contents":[],"dir":"/Users/jbr/code/sibilant/include","file":"/Users/jbr/code/sibilant/include/macros.sibilant","token":" ","type":"whitespace","start":13121,"line":409,"col":14,"length":1,"nodeId":5403},{"contents":[],"dir":"/Users/jbr/code/sibilant/include","file":"/Users/jbr/code/sibilant/include/macros.sibilant","token":" ","type":"whitespace","start":13122,"line":409,"col":15,"length":1,"nodeId":5404},{"contents":[],"dir":"/Users/jbr/code/sibilant/include","file":"/Users/jbr/code/sibilant/include/macros.sibilant","token":" ","type":"whitespace","start":13123,"line":409,"col":16,"length":1,"nodeId":5405},{"contents":[],"dir":"/Users/jbr/code/sibilant/include","file":"/Users/jbr/code/sibilant/include/macros.sibilant","token":" ","type":"whitespace","start":13124,"line":409,"col":17,"length":1,"nodeId":5406},{"contents":[],"dir":"/Users/jbr/code/sibilant/include","file":"/Users/jbr/code/sibilant/include/macros.sibilant","token":" ","type":"whitespace","start":13125,"line":409,"col":18,"length":1,"nodeId":5407},{"contents":[],"dir":"/Users/jbr/code/sibilant/include","file":"/Users/jbr/code/sibilant/include/macros.sibilant","token":" ","type":"whitespace","start":13126,"line":409,"col":19,"length":1,"nodeId":5408}]}],"arguments":["exp"],"definition":"(macro not (exp)\n       [\"!(\" (transpile exp) \")\"])","examples":[{"javascript":"!(typeof 1 === \"string\")","sibilant":"(not (string? 1))"}]},{"name":"macro core/unless","description":"evaluates statements in `body` if `condition` is falsy. `body`\n      is `scoped` in a self-evaluating function to support having a\n      return value from the if statement.","arguments":["condition","body"],"definition":"(macro unless (condition ...body)\n       [\"(function() {\"\n        (indent [\"if (\" '(not @condition) \") {\"\n                        (indent '(do ...@body))\n                        \"}\"])\n        \"}).call(this)\"])","examples":[{"javascript":"(function() {\n  if (!(3 < i)) {\n    console.log(i);\n    return arr[i];\n  }\n}).call(this)","sibilant":"(unless (< 3 i) (console.log i) (get arr i))"}]},{"name":"macro core/assign","description":"assigns alternating keys and values in `args`.  This works much\nlike `var`, but without the var keyword.  It is important to\nunderstand variable scope in javascript in order to use this macro safely.\nnote that this macro does not currently support destructuring like `var` does","arguments":["args"],"definition":"(macro assign (...args)\n       (interleave \"\n\"\n             (bulk-map args (#(name value)\n                              (as-statement [ (transpile name) \" = \"\n                                                    (transpile value)])))))","examples":[{"javascript":"a = 1;","sibilant":"(assign a 1)"},{"javascript":"a = 1;\nb = 2;","sibilant":"(assign a 1 b 2)"}]},{"name":"macro core/log-pretty","description":"outputs debug information about `arg`.  If `label` is\nomitted (only one argument is provided), the name of the variable or\nexpression of that first expression will be logged. Aliased as `pretty-log`","arguments":["label","arg"],"definition":"(macro log-pretty (label arg)\n       (var node this)\n       (when (undefined? arg)\n             (assign arg label\n                     label [\"\\\"\" (prettify label false) \"\\\"\"]))\n       `(console.log (concat @[\"\\\"\" node.file \":\" node.line \"\\\"\"] \" \" @label \" = \" (prettify @arg))))","examples":[{"javascript":"console.log((\"/Users/jbr/code/sibilant/include/macros.sibilant:446\" + \" \" + \"myLabel\" + \" = \" + prettify(value)))","sibilant":"(log-pretty 'my-label value)"},{"javascript":"console.log((\"/Users/jbr/code/sibilant/include/macros.sibilant:447\" + \" \" + \"(+ 1 2)\" + \" = \" + prettify((1 + 2))))","sibilant":"(log-pretty (+ 1 2))"}]},{"name":"macro core/each","description":"iterates over `array`, evaluating `body` once for each value in\n`array`.  If `item` is a literal name, that will be the variable into\nwhich the `array` element is yielded (current value).  If `item` is an expression, it\ncan contain the current value, the index, and the `array`.","references":[{"contents":[],"dir":"/Users/jbr/code/sibilant/include","file":"/Users/jbr/code/sibilant/include/macros.sibilant","token":"\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach\"","type":"string","start":15193,"line":460,"col":18,"length":96,"nodeId":6037,"specials":0,"precedingIgnored":[]}],"arguments":["item","array","body"],"definition":"(macro each (item array ...body)\n       '(.for-each @array\n                   (lambda @{ node this\n                              args (if (node? item 'expression) item [item]) }\n                           ...@body)))","examples":[{"javascript":"[ 1, 2, 3 ].forEach((function(number) {\n  /* /Users/jbr/code/sibilant/include/macros.sibilant:461:17 */\n\n  return console.log(number);\n}))","sibilant":"(each number [ 1 2 3 ] (console.log number))"},{"javascript":"[ \"a\", \"b\", \"c\", \"d\" ].forEach((function(letter, index) {\n  /* /Users/jbr/code/sibilant/include/macros.sibilant:462:17 */\n\n  letters[letter] = index;\n  return console.log(letter.toUpperCase());\n}))","sibilant":"(each (letter index) `[ a b c d ]\n                       (set letters letter index)\n                       (pipe letter (.to-upper-case) (console.log)))"}]},{"name":"macro core/throw","description":"throws a new javascript error with arguments as the string","arguments":["error"],"definition":"(macro throw (error)\n       [\"throw \" (transpile error)])","examples":[{"javascript":"throw (new Error(\"could not find matching socks\"))","sibilant":"(throw (new Error \"could not find matching socks\"))"}]},{"name":"macro core/as-boolean","description":"double-negates `expr`, converting it to a boolean","arguments":["expr"],"definition":"(macro as-boolean (expr)\n       [\"(!!(\" (transpile expr) \"))\"])","examples":[{"javascript":"(!!(0))","sibilant":"(as-boolean 0)"},{"javascript":"(!!(true))","sibilant":"(as-boolean true)"}]},{"name":"macro core/while","description":"evaluates the `body` as long as `condition` is truthy,\nreturning the value of the last expression in `block` when `condition`\nceases to be truthy. See also `until`","arguments":["condition","body"],"definition":"(macro while (condition ...body)\n       (var symbol (^symbol))\n       '(*scoped-without-source\n         (var @symbol)\n         @[\"while (\" (transpile condition) \") {\"\n           (indent '(assign @symbol (*scoped-without-source ...@body)))\n            \"}\"]\n         @symbol))","examples":[{"javascript":"(function() {\n  var $_symbol1_$ = undefined;\n  while (5 > i) {\n    $_symbol1_$ = (function() {\n      console.log(i);\n      return ((i)--);\n    }).call(this);\n  };\n  return $_symbol1_$;\n}).call(this)","sibilant":"(while (> 5 i) (console.log i) (decr i))"}]},{"name":"macro core/until","description":"evaluates the `body` as long as `condition` is falsy,\nreturning the value of the last expression in `block` when `condition`\nceases to be falsy. See also `while`","arguments":["condition","body"],"definition":"(macro until (condition ...body)\n       '(while (not @condition) ...@body))","examples":[{"javascript":"(function() {\n  var $_symbol2_$ = undefined;\n  while (!(5 < i)) {\n    $_symbol2_$ = (function() {\n      console.log(i);\n      return ((i)++);\n    }).call(this);\n  };\n  return $_symbol2_$;\n}).call(this)","sibilant":"(until (< 5 i) (console.log i) (incr i))"}]},{"name":"macro core/match?","description":"returns true if the `string` matches `regexp`.  Deprecated in\n      preference to `.match` (`send` dot-invocation).","arguments":["regexp","string"],"definition":"(macro match? (regexp string)\n       '(.match @string @regexp))","examples":[{"javascript":"\"word\".match((new RegExp(\"^[a-z]+$\", \"i\")))","sibilant":"(match? (regex \"^[a-z]+$\" 'i) 'word)"}]},{"name":"macro core/match-regex?","description":"similar to `match?` but builds a regex out of the `pattern` and `flags`.","arguments":["string","pattern","flags"],"definition":"(macro match-regex? (string pattern flags)\n       '(match? (regex @pattern @flags) @string))","examples":[{"javascript":"\"word\".match((new RegExp(\"^[a-z]+$\", \"i\")))","sibilant":"(match-regex? 'word \"^[a-z]+$\" 'i)"}]},{"name":"macro core/replace","description":"replaces the first occurance of `pattern` (as a regex) with `replacement`","arguments":["string","pattern","replacement"],"definition":"(macro replace (string pattern replacement)\n       '(.replace @string\n              (regex @pattern)\n              @replacement))","examples":[{"javascript":"\"hello world\".replace((new RegExp(\"l+o\", undefined)), \"y there,\")","sibilant":"(replace \"hello world\" \"l+o\" \"y there,\")"}]},{"name":"macro core/replace-all","description":"replaces all occurrances of `pattern` (as a regex) with `replacement`","arguments":["string","pattern","replacement"],"definition":"(macro replace-all (string pattern replacement)\n       '(.replace @string (regex @pattern 'g) @replacement))","examples":[{"javascript":"\"503-555-1212\".replace((new RegExp(\"[0-9]\", \"g\")), \"#\")","sibilant":"(replace-all \"503-555-1212\" \"[0-9]\" \"#\")"}]},{"name":"macro core/thunk","description":"most often called as its alias, `#>`, thunk creates a function\nwith no named arguments. To refer to arguments anonymously, use #n,\nsuch as #0 for the first argument.","arguments":["body"],"definition":"(macro thunk (...body)\n       '(lambda @{ node this args [] }\n       ...@(map-node body\n                 (#(node)\n                   (if (node? node 'arg-placeholder)\n                       '(argument @(replace node.token \"^#\" \"\"))\n                       node)))))","examples":[{"javascript":"[ 1, 2, 3 ].map((function() {\n  /* /Users/jbr/code/sibilant/include/macros.sibilant:603:34 */\n\n  return (1 + arguments[0]);\n}))","sibilant":"(.map [ 1 2 3 ] (#> (+ 1'arguments''[''0'']')))"},{"javascript":"window.setTimeout((function() {\n  /* /Users/jbr/code/sibilant/include/macros.sibilant:604:38 */\n\n  return console.log(\"here\");\n}), 10)","sibilant":"(window.set-timeout (#> (console.log 'here)) 10)"}]},{"name":"macro core/pipe-thunk","description":"most often called as its alias, `#->`, pipe-thunk applies a pipe chain to the argument of a function and returns the result","arguments":["calls"],"definition":"(macro pipe-thunk (...calls) `(thunk (pipe #0 ...@calls)))","examples":[{"javascript":"[ \"a\", \"b\", \"c\" ].map((function() {\n  /* /Users/jbr/code/sibilant/include/macros.sibilant:620:30 */\n\n  return (arguments[0].toUpperCase() + \" is a letter\");\n}))","sibilant":"(.map `[ a b c ] (#-> (.to-upper-case) (concat \" is a letter\")))"}]},{"name":"macro core/keys","description":"returns the property names of `obj`.","references":[{"contents":[],"dir":"/Users/jbr/code/sibilant/include","file":"/Users/jbr/code/sibilant/include/macros.sibilant","token":"\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/keys\"","type":"string","start":20132,"line":629,"col":20,"length":94,"nodeId":7901,"specials":0,"precedingIgnored":[{"contents":[],"dir":"/Users/jbr/code/sibilant/include","file":"/Users/jbr/code/sibilant/include/macros.sibilant","token":" ","type":"whitespace","start":20131,"line":629,"col":19,"length":1,"nodeId":7900}]}],"arguments":["obj"],"definition":"(macro keys (obj)\n       '(Object.keys @obj))","examples":[{"javascript":"Object.keys({\n  a: 1,\n  b: 2\n})","sibilant":"(keys { a 1 b 2 })"}]},{"name":"macro core/delete","description":"uses the javascript delete keyword on any number of `objects`.\n      Use in conjunction with `get` or dotted literal notation (a.b).","arguments":["objects"],"definition":"(macro delete (...objects)\n       (interleave \"\n\" (map objects (#(obj)\n                                 (as-statement [\"delete \" (transpile obj)])))))","examples":[{"javascript":"delete object.a;\ndelete object.b;","sibilant":"(delete object.a object.b)"},{"javascript":"delete object[attribute];\ndelete object[\"other attribute\"];","sibilant":"(delete (get object attribute) (get object \"other attribute\"))"}]},{"name":"macro core/delete-macro","description":"deletes each macro name in `macro-names` from the current namespace. Use carefully","arguments":["macroNames"],"definition":"(macro delete-macro (...macro-names)\n       (each macro-name macro-names\n             (delete (get sibilant.macros.namespace (output-formatter (transpile macro-name)))))\n       null)","examples":[]},{"name":"macro core/rename-macro","description":"moves macro from `current-macro-name` to `new-macro-name`. Use carefully","arguments":["currentMacroName","newMacroName"],"definition":"(macro rename-macro (current-macro-name new-macro-name)\n       (^alias-macro current-macro-name new-macro-name)\n       (^delete-macro current-macro-name)\n       null)","examples":[]},{"name":"macro core/arguments","description":"transforms function arguments into an array, using the Array prototype's slice","arguments":[],"definition":"(macro arguments ()\n       [\"(Array.prototype.slice.apply(arguments))\"])","examples":[{"javascript":"(Array.prototype.slice.apply(arguments))","sibilant":"(arguments)"}]},{"name":"macro core/argument","description":"`get`s the argument at `index` in the current function context","arguments":["index"],"definition":"(macro argument (index)\n       '(get arguments @index))","examples":[{"javascript":"arguments[3]","sibilant":"(argument 3)"}]},{"name":"macro core/each-key","description":"iterates over each attribute in `obj`","arguments":["as","obj","body"],"definition":"(macro each-key (as obj ...body)\n       `(pipe @obj (keys)\n              (.for-each (lambda @{ args: (if (node? as 'expression) as [as])\n                                    node: this }\n                                 ...@body))))","examples":[{"javascript":"Object.keys({\n  a: 1,\n  b: 2\n}).forEach((function(key) {\n  /* /Users/jbr/code/sibilant/include/macros.sibilant:698:14 */\n\n  return console.log(key);\n}))","sibilant":"(each-key key { a 1 b 2 } (console.log key))"}]},{"name":"macro core/switch","description":"uses the javascript switch construction to test equality.  documentation todo: needs better description","arguments":["obj","cases"],"definition":"(macro switch (obj ...cases)\n       [\"(function() {\"\n         (indent [\"switch(\" (transpile obj) \") {\"\n                   (map cases (#(case-def)\n                                (var case-name-node (first case-def.contents)\n                                     case-labels (if (node? case-name-node 'expression 'bracket)\n                                                     case-name-node.contents\n                                                     [case-name-node])\n                                     case-string (interleave \"\n\"\n                                                             (map case-labels (#(c)\n                                                                                (if (= 'default c.token)\n                                                                                    \"default:\"\n                                                                                    [\"case \" (transpile c) \":\"])))))\n                                [\"\n\" case-string (indent '(do ...@(rest case-def.contents)))]))\n                   \"}\"])\n         \"}).call(this)\"])","examples":[{"javascript":"(function() {\n  switch(char) {\n  case \"a\":\n    return \"it was an a\";\n  \n  case \"b\":\n    console.log(\"found a b!\");\n    return \"it was a b\";\n  \n  case 1:\n  case 2:\n  case 3:\n  case 4:\n  case 5:\n    return \"it was an integer from one to five\";\n  \n  default:\n    return \"not sure\";\n  }\n}).call(this)","sibilant":"(switch char\n                         ('a \"it was an a\")\n                         ('b (console.log \"found a b!\")\n                             \"it was a b\")\n                         ([1 2 3 4 5] \"it was an integer from one to five\")\n                         (default \"not sure\"))"}]},{"name":"macro core/if","description":"tests any number of `alternating-conditions-and-branches`.  If\n      an odd number of branches are supplied, the final branch is a\n      default else clause.  To evaluate more than one expression as a\n      branch, use the `do` macro, as shown in the examples:","arguments":["alternatingConditionsAndBranches"],"definition":"(macro if (...alternating-conditions-and-branches)\n       [\"(function() {\"\n        (indent\n         (interleave \" else \"\n               (bulk-map alternating-conditions-and-branches\n                         (#(cond val)\n                           (if (!= (typeof val) 'undefined)\n                                 [\"if (\" (transpile cond) \") {\"\n                                   (indent '(do @val))\n                                   \"}\"]\n                                 [\"{\" (indent '(do @cond)) \"}\"])))))\n        \"}).call(this)\"])","examples":[{"javascript":"(function() {\n  if (true) {\n    return console.log(\"here\");\n  }\n}).call(this)","sibilant":"(if true (console.log 'here))"},{"javascript":"(function() {\n  if (1 === arguments.length) {\n    return console.log(\"one argument\");\n  } else if (\"blue\" === favoriteColor) {\n    return console.log(\"blue\");\n  } else {\n    return examples = \"difficult\";\n  }\n}).call(this)","sibilant":"(if (= 1 arguments.length) (console.log \"one argument\")\n                     (= 'blue favorite-color) (console.log \"blue\")\n                     (assign examples 'difficult))"},{"javascript":"(function() {\n  if (foo__QUERY()) {\n    a(b);\n    return c();\n  } else if (bar__QUERY()) {\n    baz();\n    return wibble();\n  } else {\n    d(e);\n    return console.log(\"default\");\n  }\n}).call(this)","sibilant":"(if (foo?) (do (a b)\n                                (c))\n                     (bar?) (do (baz)\n                                (wibble))\n                     (do (d e)\n                         (console.log 'default)))"}]},{"name":"macro core/chain","description":"similar to `pipe`, this macro allows function calls to be applied\nin sequence, as is common in fluent interfaces. deprecated in preference to `pipe`","arguments":["object","calls"],"definition":"(macro chain (object ...calls)\n       (if (= 0 calls.length) (transpile object)\n           (= 1 calls.length) '(send @object ...@(get (first calls) 'contents))\n           (do\n            (var lines (map calls (#(call index)\n                                    [\".\" (transpile (first call.contents))\n                                         \"(\" (interleave \", \" (map (rest call.contents) transpile)) \")\"])))\n\n            [ (transpile object)\n              (first lines)\n              \"\n  \"\n              (recurse-indent\n               (interleave \"\n\" (rest lines)))])))","examples":[{"javascript":"a.b(c, d)\n  .e()\n  .f(g)","sibilant":"(chain a (b c d) (e) (f g))"}]},{"name":"macro core/instance-of?","description":"uses the javascript `instanceof` operator to check if `item` is of `type`.","arguments":["item","type"],"definition":"(macro instance-of? (item type)\n       [\"(\" (transpile item) \" instanceof \" (transpile type) \")\"])","examples":[{"javascript":"((new Date()) instanceof Date)","sibilant":"(instance-of? (new Date) Date)"}]},{"name":"macro core/includes?","description":"returns true if `haystack` includes `needle`.  `haystack` can be a string or array/list.","arguments":["haystack","needle"],"definition":"(macro includes? (haystack needle)\n       '(pipe @haystack (.index-of @needle) (!= -1)))","examples":[{"javascript":"\"hello\".indexOf(\"h\") !== -1","sibilant":"(includes? 'hello 'h)"},{"javascript":"[ \"Veni\", \"vidi\", \"vici\" ].indexOf(\"vidi\") !== -1","sibilant":"(includes? `[ Veni vidi vici] 'vidi)"}]},{"name":"macro core/excludes?","description":"returns true if `haystack` does NOT include `needle`.\n`haystack` can be a string or array/list","arguments":["haystack","needle"],"definition":"(macro excludes? (haystack needle)\n       `(pipe @haystack (.index-of @needle) (= -1)))","examples":[{"javascript":"\"hello\".indexOf(10) === -1","sibilant":"(excludes? 'hello 10)"},{"javascript":"[ \"Veni\", \"vidi\", \"vici\" ].indexOf(\"attenti\") === -1","sibilant":"(excludes? `[ Veni vidi vici] 'attenti)"}]},{"name":"macro core/exists?","description":"similar to the javascript truthiness predicate `as-boolean`, returns true unless the `thing` is undefined or null","arguments":["thing"],"definition":"(macro exists? (thing)\n       `(and (defined? @thing) (!= @thing null)))","examples":[{"javascript":"(typeof window !== \"undefined\" && window !== null)","sibilant":"(exists? window)"}]},{"name":"macro core/join","description":"combines elements of array `arr` into a string, inserting\n`glue` string between each element.  if `glue` is omitted (only one\nargument provided), the elements of `arr` are joined with an empty\nstring","arguments":["arr","glue"],"definition":"(macro join (arr glue)\n       (if (and (defined? glue) (undefined? arr))\n           (assign arr glue glue undefined))\n       `(.join @arr @(or glue \"\\\"\\\"\")))","examples":[{"javascript":"[ \"a\", \"few\", \"words\" ].join(\", \")","sibilant":"(join `[ a few words ]  \", \" )"},{"javascript":"[ \"several\", \"more\", \"words\" ].join(\"\")","sibilant":"(join `[ several more words ])"}]},{"name":"macro core/var","description":"registers variables in `pairs` inside of the current scope using the javascript var keyword.\ndestructuring from arrays and objects is also supported, as shown in the examples","arguments":["pairs"],"definition":"(macro var (...pairs)\n       (var destructured [])\n       (bulk-map pairs (#(lhs rhs)\n                         (switch lhs.type\n                                 ('bracket\n                                  (var symbol (^symbol))\n                                  (destructured.push [symbol (transpile rhs)])\n                                  (each (item index) lhs.contents\n                                        (destructured.push [(transpile item) '(get @symbol @index)]))\n                                  (destructured.push [symbol 'undefined]))\n                                 ('brace\n                                  (var symbol (^symbol))\n                                  (destructured.push [symbol (transpile rhs)])\n                                  (each (item index) lhs.contents\n                                        (var tr-item (transpile item))\n                                        (destructured.push [tr-item '(get @symbol @[\"\\\"\" tr-item \"\\\"\"])]))\n                                  (destructured.push [symbol 'undefined]))\n\n                                 (default\n                                  (destructured.push [(transpile lhs)\n                                                       (if rhs (transpile rhs) 'undefined)])))))\n\n       (as-statement\n        [\"var \" (interleave \",\n    \"\n           (map destructured\n                (#(pair)\n                  [(first pair) \" = \" (second pair)]\n                  )))]))","examples":[{"javascript":"var a = 1,\n    b = 2;","sibilant":"(var a 1 b 2)"},{"javascript":"var a = 1;","sibilant":"(var a 1)"},{"javascript":"var a = undefined;","sibilant":"(var a)"},{"javascript":"var $_symbol3_$ = {\n  a: 1,\n  b: 2\n},\n    a = $_symbol3_$.a,\n    $_symbol3_$ = undefined,\n    c = 3;","sibilant":"(var {a} {a 1 b 2} c 3)"},{"javascript":"var a = 1,\n    $_symbol4_$ = [ 2, 3 ],\n    b = $_symbol4_$[0],\n    c = $_symbol4_$[1],\n    $_symbol4_$ = undefined;","sibilant":"(var a 1 [b c] [2 3])"}]},{"name":"macro core/default","description":"sets default values for variables in current scope. `pairs` are\nalternating variable names and default values","arguments":["pairs"],"definition":"(macro default (...pairs)\n       (interleave \"\n\" (bulk-map pairs (#(name value)\n                                  '(assign @name (ternary (defined? @name) @name @value))))))","examples":[{"javascript":"a = (typeof a !== \"undefined\") ? a : 10;\nb = (typeof b !== \"undefined\") ? b : 20;","sibilant":"(default a 10 b 20)"}]},{"name":"macro core/has-key?","description":"checks if `object` has property `key`.  returns true or false.","arguments":["object","key"],"definition":"(macro has-key? (object key)\n       `(.has-own-property @object @key))","examples":[{"javascript":"object.hasOwnProperty(\"a\")","sibilant":"(has-key? object 'a)"}]},{"name":"macro core/get","description":"retreives object properties, potentially deeply. If more than one `keys` are provided,\n`get` fetches deeply into nested objects or arrays.\nWhen javascript dot notation can be used (`a.b = 3`), it is.\nOtherwise, bracket notation is used.","arguments":["obj","keys"],"definition":"(macro get (obj ...keys)\n       [(transpile obj)\n         (map keys (#(key)\n                     (var transpiled (transpile key)\n                          output (output-formatter transpiled))\n\n                     (if (match-regex? output \"^\\\"[a-zA-Z0-9]+\\\"$\")\n                         [\".\" (replace-all output \"\\\"\" \"\") ]\n                         [\"[\" transpiled \"]\"])))])","examples":[{"javascript":"anObject.staticAttributeName","sibilant":"(get an-object 'static-attribute-name)"},{"javascript":"object[dynamicAttributeName]","sibilant":"(get object dynamic-attribute-name)"},{"javascript":"object[\"these attributes\"][\"can't be dotted\"]","sibilant":"(get object \"these attributes\" \"can't be dotted\")"},{"javascript":"array[0]","sibilant":"(get array 0)"},{"javascript":"object.a.b[c]","sibilant":"(get object 'a 'b c)"},{"javascript":"array[0][1][2]","sibilant":"(get array 0 1 2)"}]},{"name":"macro core/set","description":"assigns object properties to `arr` in pairs, alternating between keys and values.\nWhen javascript dot notation can be used (`a.b = 3`), it is.  Otherwise, bracket notation is used","arguments":["arr","kvPairs"],"definition":"(macro set (arr ...kv-pairs)\n       (interleave \"\n\" (bulk-map kv-pairs (#(k v) `(assign (get @arr @k) @v)))))","examples":[{"javascript":"anObject.staticAttributeName = \"value\";","sibilant":"(set an-object 'static-attribute-name 'value)"},{"javascript":"object[dynamicAttributeName] = \"key name determined at runtime\";","sibilant":"(set object dynamic-attribute-name \"key name determined at runtime\")"},{"javascript":"array[0] = \"first element of array\";","sibilant":"(set array 0 \"first element of array\")"},{"javascript":"object[\"can't be dotted\"] = \"value\";","sibilant":"(set object \"can't be dotted\" 'value)"},{"javascript":"object.firstAttribute = \"firstValue\";\nobject.secondAttribute = \"secondValue\";","sibilant":"(set object 'first-attribute 'first-value\n                      'second-attribute 'second-value)"}]},{"name":"macro core/lower-case?","description":"checks if a string is identical to the lower-cased version of itself","arguments":["str"],"definition":"(macro lower-case? (str)\n       `(= (.to-lower-case @str) @str))","examples":[{"javascript":"\"abc\".toLowerCase() === \"abc\"","sibilant":"(lower-case? \"abc\")"}]},{"name":"macro core/upper-case?","description":"checks if a string is identical to the upper-cased version of itself","arguments":["str"],"definition":"(macro upper-case? (str)\n       `(= (.to-upper-case @str) @str))","examples":[{"javascript":"\"abc\".toLowerCase() === \"abc\"","sibilant":"(lower-case? \"abc\")"}]},{"name":"macro core/ternary","description":"the simplest way to conditionally execute code.","arguments":["cond","ifTrue","ifFalse"],"definition":"(macro ternary (cond if-true if-false)\n       [\"(\" (transpile cond) \") ? \"\n            (transpile if-true) \" : \"\n            (transpile if-false)])","examples":[{"javascript":"(50 < 100) ? \"fifty is less than 100\" : \"fifty is more than 100\"","sibilant":"(ternary (< 50 100)\n                       \"fifty is less than 100\"\n                       \"fifty is more than 100\")"}]},{"name":"macro core/alias-macro","description":"stores a duplicate copy of `current-macro-name` as\n`new-macro-name` in current namespace.  No output.","arguments":["currentMacroName","newMacroName"],"definition":"(macro alias-macro (current-macro-name new-macro-name)\n       (var current-macro-name (output-formatter (transpile current-macro-name))\n            new-macro-name (output-formatter (transpile new-macro-name)))\n       (set sibilant.macros.namespace\n            new-macro-name (get sibilant.macros.namespace current-macro-name))\n       null)","examples":[]},{"name":"macro core/send","description":"calls the `method` on `object` as a function with `args` as the arguments","arguments":["object","method","args"],"definition":"(macro send (object method ...args)\n       [(transpile object) \".\" (transpile method)\n               \"(\" (interleave \", \" (map args transpile)) \")\"])","examples":[{"javascript":"object.method(firstArgument, secondArgument, thirdArgument)","sibilant":"(send object method first-argument second-argument third-argument)"}]},{"name":"macro core/apply","description":"calls the function `fn` with arguments passed as an array in `arglist`","arguments":["fn","arglist"],"definition":"(macro apply (fn arglist)\n       '(.apply @fn this @arglist))","examples":[{"javascript":"myFunction.apply(this, [ firstArg, secondArg, thirdArg ])","sibilant":"(apply my-function [ first-arg second-arg third-arg ])"}]},{"name":"macro core/cons","description":"builds an array with `first` as the zeroth index and the\nelements provided by array `rest` as the subsequent elements, as\nsiblings with `first`.  deprecated","arguments":["first","rest"],"definition":"(macro cons (first rest)\n       [\"[ \" (transpile first) \" ].concat(\" (transpile rest) \")\"])","examples":[{"javascript":"[ 1 ].concat([ 2, 3, 4 ])","sibilant":"(cons 1 [ 2 3 4 ])"}]},{"name":"macro core/append","description":"adds `additional` elements onto the right-side (tail) of `list`. deprecated","arguments":["list","additional"],"definition":"(macro append (list ...additional)\n       '(.concat @list (list ...@additional)))","examples":[{"javascript":"[ 1, 2, 3 ].concat([ 4, 5, 6 ])","sibilant":"(append [ 1 2 3 ] 4 5 6)"}]},{"name":"macro core/length","description":"fetches length attribute from `arr`","arguments":["arr"],"definition":"(macro length (arr)\n       '(get @arr 'length))","examples":[{"javascript":"[ 1, 2, 3 ].length","sibilant":"(length [ 1 2 3 ])"}]},{"name":"macro core/scoped","description":"executes the `body` inside of a self-executing function. The\nlast statement/expression of the body is returned.","arguments":["body"],"definition":"(macro scoped (...body)\n       '(.call (lambda @{node this args []} ...@body) this))","examples":[{"javascript":"(function() {\n  /* /Users/jbr/code/sibilant/include/macros.sibilant:100:16 */\n\n  return true;\n}).call(this)","sibilant":"(scoped true)"},{"javascript":"(function() {\n  /* /Users/jbr/code/sibilant/include/macros.sibilant:100:30 */\n\n  var a = 1;\n  return (a + 2);\n}).call(this)","sibilant":"(scoped (var a 1) (+ a 2))"}]},{"name":"macro core/first","description":"fetches the first element from `arr`","arguments":["arr"],"definition":"(macro first (arr) (var index0) `(get @arr @index))","examples":[{"javascript":"myArray[0]","sibilant":"( first my-array)"}]},{"name":"macro core/second","description":"fetches the second element from `arr`","arguments":["arr"],"definition":"(macro second (arr) (var index1) `(get @arr @index))","examples":[{"javascript":"myArray[1]","sibilant":"( second my-array)"}]},{"name":"macro core/third","description":"fetches the third element from `arr`","arguments":["arr"],"definition":"(macro third (arr) (var index2) `(get @arr @index))","examples":[{"javascript":"myArray[2]","sibilant":"( third my-array)"}]},{"name":"macro core/fourth","description":"fetches the fourth element from `arr`","arguments":["arr"],"definition":"(macro fourth (arr) (var index3) `(get @arr @index))","examples":[{"javascript":"myArray[3]","sibilant":"( fourth my-array)"}]},{"name":"macro core/fifth","description":"fetches the fifth element from `arr`","arguments":["arr"],"definition":"(macro fifth (arr) (var index4) `(get @arr @index))","examples":[{"javascript":"myArray[4]","sibilant":"( fifth my-array)"}]},{"name":"macro core/sixth","description":"fetches the sixth element from `arr`","arguments":["arr"],"definition":"(macro sixth (arr) (var index5) `(get @arr @index))","examples":[{"javascript":"myArray[5]","sibilant":"( sixth my-array)"}]},{"name":"macro core/seventh","description":"fetches the seventh element from `arr`","arguments":["arr"],"definition":"(macro seventh (arr) (var index6) `(get @arr @index))","examples":[{"javascript":"myArray[6]","sibilant":"( seventh my-array)"}]},{"name":"macro core/eighth","description":"fetches the eighth element from `arr`","arguments":["arr"],"definition":"(macro eighth (arr) (var index7) `(get @arr @index))","examples":[{"javascript":"myArray[7]","sibilant":"( eighth my-array)"}]},{"name":"macro core/ninth","description":"fetches the ninth element from `arr`","arguments":["arr"],"definition":"(macro ninth (arr) (var index8) `(get @arr @index))","examples":[{"javascript":"myArray[8]","sibilant":"( ninth my-array)"}]},{"name":"macro core/rest","description":"fetches all but the first item of `arr`","arguments":["arr"],"definition":"(macro rest (arr) '(.slice @arr 1))","examples":[{"javascript":"[ 1, 2, 3 ].slice(1)","sibilant":"(rest [ 1 2 3 ])"}]},{"name":"macro core/last","description":"fetches just the last element of `arr` by slicing.","arguments":["arr"],"definition":"(macro last (arr) '(first (.slice @arr -1)))","examples":[{"javascript":"[ 1, 2, 3 ].slice(-1)[0]","sibilant":"(last [ 1 2 3 ])"}]},{"name":"macro core/+","description":"adds `args` using the javascript `+` operator. Since javascript\noverloads this for string concatenation, this macro can be used for\nthis as well.","arguments":["args"],"definition":"(macro +   (...args)\n       [\"(\" (interleave \" + \" (map args transpile)) \")\"])","examples":[{"javascript":"(1 + 2 + 3)","sibilant":"(+ 1 2 3)"},{"javascript":"(\"hello\" + \"world\")","sibilant":"(+ 'hello 'world)"}]},{"name":"macro core/-","description":"subtracts each subsequent element of `args`","arguments":["args"],"definition":"(macro -   (...args)\n       [\"(\" (interleave \" - \" (map args transpile)) \")\"])","examples":[{"javascript":"(2 - 1)","sibilant":"(- 2 1)"},{"javascript":"(10 - 5 - 1)","sibilant":"(- 10 5 1)"}]},{"name":"macro core/*","description":"multiplies elements of `args`","arguments":["args"],"definition":"(macro *   (...args)\n       [\"(\" (interleave \" * \" (map args transpile)) \")\"])","examples":[{"javascript":"(3 * 4 * 5)","sibilant":"(* 3 4 5)"}]},{"name":"macro core//","description":"divides each subsequent element of `args`","arguments":["args"],"definition":"(macro /   (...args)\n           [\"(\" (interleave \" / \" (map args transpile)) \")\"])","examples":[{"javascript":"(1 / 2)","sibilant":"(/ 1 2)"},{"javascript":"(1 / 2 / 3)","sibilant":"(/ 1 2 3)"}]},{"name":"macro core/or","description":"short circuiting operator returns the first element of `args` that evaluates to be truthy","arguments":["args"],"definition":"(macro or  (...args)\n       [\"(\" (interleave \" || \" (map args transpile)) \")\"])","examples":[{"javascript":"(1 === 2 || typeof [] === \"string\" || \"one is not two and an array is not a string\")","sibilant":"(or (= 1 2) (string? []) \"one is not two and an array is not a string\")"}]},{"name":"macro core/and","description":"returns the last element if all elements of `args` are truthy, or the\nfirst non-truthy element if it exists","arguments":["args"],"definition":"(macro and (...args)\n       (ternary (= 1 (length args)) (transpile (first args))\n                [\"(\" (interleave \" && \" (map args transpile)) \")\"]))","examples":[{"javascript":"(typeof \"string\" === \"string\" && typeof 10 === \"number\" && 1 === 1)","sibilant":"(and (string? \"string\") (number? 10) (= 1 1))"}]},{"name":"macro core/mod","description":"modulus operator","arguments":["args"],"definition":"(macro mod (...args)\n       [\"(\" (interleave \" % \" (map args transpile)) \")\"])","examples":[{"javascript":"(10 % 2)","sibilant":"(mod 10 2)"}]},{"name":"macro core/>","description":"compares `args` from left to right, returning true if each element is greater than than the next","arguments":["args"],"definition":"(macro > (...args)\n               (var js-comparator'\"' >'\"')\n               `(and ...@(map (args.slice 0 -1)\n                              (#(item index)\n                                [ item \" \" js-comparator \" \"\n                                  (get args (+ 1 index)) ]))))","examples":[{"javascript":"(a > b && b > c)","sibilant":"( > a b c)"},{"javascript":"a > b","sibilant":"( > a b)"}]},{"name":"macro core/<","description":"compares `args` from left to right, returning true if each element is less than than the next","arguments":["args"],"definition":"(macro < (...args)\n               (var js-comparator'\"' <'\"')\n               `(and ...@(map (args.slice 0 -1)\n                              (#(item index)\n                                [ item \" \" js-comparator \" \"\n                                  (get args (+ 1 index)) ]))))","examples":[{"javascript":"(a < b && b < c)","sibilant":"( < a b c)"},{"javascript":"a < b","sibilant":"( < a b)"}]},{"name":"macro core/<=","description":"compares `args` from left to right, returning true if each element is less than or equal than the next","arguments":["args"],"definition":"(macro <= (...args)\n               (var js-comparator'\"' <='\"')\n               `(and ...@(map (args.slice 0 -1)\n                              (#(item index)\n                                [ item \" \" js-comparator \" \"\n                                  (get args (+ 1 index)) ]))))","examples":[{"javascript":"(a <= b && b <= c)","sibilant":"( <= a b c)"},{"javascript":"a <= b","sibilant":"( <= a b)"}]},{"name":"macro core/>=","description":"compares `args` from left to right, returning true if each element is greater than or equal than the next","arguments":["args"],"definition":"(macro >= (...args)\n               (var js-comparator'\"' >='\"')\n               `(and ...@(map (args.slice 0 -1)\n                              (#(item index)\n                                [ item \" \" js-comparator \" \"\n                                  (get args (+ 1 index)) ]))))","examples":[{"javascript":"(a >= b && b >= c)","sibilant":"( >= a b c)"},{"javascript":"a >= b","sibilant":"( >= a b)"}]},{"name":"macro core/!=","description":"compares `args` from left to right, returning true if each element is not equal (using threequals) than the next","arguments":["args"],"definition":"(macro != (...args)\n               (var js-comparator \"!==\")\n               `(and ...@(map (args.slice 0 -1)\n                              (#(item index)\n                                [ item \" \" js-comparator \" \"\n                                  (get args (+ 1 index)) ]))))","examples":[{"javascript":"(a !== b && b !== c)","sibilant":"( != a b c)"},{"javascript":"a !== b","sibilant":"( != a b)"}]},{"name":"macro core/=","description":"compares `args` from left to right, returning true if each element is equal (using threequals) than the next","arguments":["args"],"definition":"(macro = (...args)\n               (var js-comparator \"===\")\n               `(and ...@(map (args.slice 0 -1)\n                              (#(item index)\n                                [ item \" \" js-comparator \" \"\n                                  (get args (+ 1 index)) ]))))","examples":[{"javascript":"(a === b && b === c)","sibilant":"( = a b c)"},{"javascript":"a === b","sibilant":"( = a b)"}]},{"name":"macro core/incr-by","description":"increments `item` by `increment`","arguments":["item","increment"],"definition":"(macro incr-by (item increment)\n       [ (transpile item) \" += \" (transpile increment)])","examples":[{"javascript":"n += 5","sibilant":"(incr-by n 5)"}]},{"name":"macro core/incr","description":"increments item by 1","arguments":["item"],"definition":"(macro incr (item)\n       [\"((\" (transpile item) \")++)\"])","examples":[{"javascript":"((i)++)","sibilant":"(incr i)"}]},{"name":"macro core/decr","description":"decrements item by 1","arguments":["item"],"definition":"(macro decr (item) [\"((\" (transpile item) \")--)\"])","examples":[{"javascript":"((i)--)","sibilant":"(decr i)"}]},{"name":"macro core/new","description":"uses the javascript new keyword to construct an object using\n      `constructor`, with `args` passed as arguments to the constructor.","arguments":["constructor","args"],"definition":"(macro new (constructor ...args)\n       [\"(new \" '(call @constructor ...@args) \")\"])","examples":[{"javascript":"(new RegExp(\"hello\", \"g\"))","sibilant":"(new RegExp \"hello\" 'g)"}]},{"name":"macro core/regex","description":"builds a regex using `pattern` and `flags` as arguments to the RegExp constructor","arguments":["pattern","flags"],"definition":"(macro regex (pattern flags)\n       '(new RegExp @pattern @(or flags 'undefined)))","examples":[{"javascript":"(new RegExp(\"[0-9]+\", undefined))","sibilant":"(regex \"[0-9]+\")"},{"javascript":"(new RegExp(\"0x[0-9a-f]+\", \"i\"))","sibilant":"(regex \"0x[0-9a-f]+\" 'i)"}]},{"name":"macro core/timestamp","description":"inserts compilation timestamp as a string. deprecated.","arguments":[],"definition":"(macro timestamp ()\n       [\"\\\"\" (.to-string (new Date)) \"\\\"\"])","examples":[{"javascript":"\"Mon Dec 21 2015 19:41:12 GMT-0800 (PST)\"","sibilant":"(timestamp)"}]},{"name":"macro core/zero?","description":"predicate to test for equality with zero","arguments":["item"],"definition":"(macro zero? (item) '(= @item 0))","examples":[{"javascript":"n === 0","sibilant":"(zero? n)"}]},{"name":"macro core/empty?","description":"returns true if the array `arr` has a length of zero","arguments":["arr"],"definition":"(macro empty? (arr)\n       `(= 0 (length @arr)))","examples":[{"javascript":"0 === [].length","sibilant":"(empty? [])"}]},{"name":"macro core/odd?","description":"returns true if `number` is not divisible by 2","arguments":["number"],"definition":"(macro odd? (number)\n       '(= 1 (mod @number 2)))","examples":[{"javascript":"1 === (5 % 2)","sibilant":"(odd? 5)"}]},{"name":"macro core/even?","description":"returns true if `number` is divisible by 2 with no remainder","arguments":["number"],"definition":"(macro even? (number)\n       '(= 0 (mod @number 2)))","examples":[{"javascript":"0 === (10 % 2)","sibilant":"(even? 10)"}]},{"name":"macro core/typeof","description":"exposes the javascript typeof operator. most often, predicates\nsuch as `string?`, `function?`, `number?`, etc are preferred.","arguments":["thing"],"definition":"(macro typeof (thing) [\"typeof \" (transpile thing)])","examples":[{"javascript":"typeof 5","sibilant":"(typeof 5)"}]},{"name":"macro core/string?","description":"returns true if all of the `things` are javascript strings","arguments":["things"],"definition":"(macro string? (...things)\n       '(and ...@(map things (#(thing) '(= (typeof @thing) 'string)))))","examples":[{"javascript":"typeof testObject === \"string\"","sibilant":"(string? test-object)"},{"javascript":"(typeof \"yes\" === \"string\" && typeof \"yes\" === \"string\" && typeof \"yes\" === \"string\")","sibilant":"(string? 'yes 'yes 'yes)"}]},{"name":"macro core/function?","description":"returns true if all of the `things` are functions","arguments":["things"],"definition":"(macro function? (...things)\n       '(and ...@(map things (#(thing) '(= (typeof @thing) 'function)))))","examples":[{"javascript":"typeof fn === \"function\"","sibilant":"(function? fn)"},{"javascript":"(typeof err === \"function\" && typeof cb === \"function\")","sibilant":"(function? err cb)"}]},{"name":"macro core/undefined?","description":"returns true if all of the `things` are undefined, as tested\nwith `typeof`, not equality with literal undefined. This is the\ninverse of `defined?`","arguments":["things"],"definition":"(macro undefined? (...things)\n       '(and ...@(map things (#(thing) '(= (typeof @thing) 'undefined)))))","examples":[{"javascript":"typeof argument === \"undefined\"","sibilant":"(undefined? argument)"},{"javascript":"(typeof 1 === \"undefined\" && typeof 2 === \"undefined\" && typeof undefined === \"undefined\")","sibilant":"(undefined? 1 2 undefined)"}]},{"name":"macro core/defined?","description":"returns true if none of the `things` are undefined, as tested\nwith `typeof`. This is the inverse of `defined?`","arguments":["things"],"definition":"(macro defined? (...things)\n       '(and ...@(map things (#(thing) '(!= (typeof @thing) 'undefined)))))","examples":[{"javascript":"typeof variable !== \"undefined\"","sibilant":"(defined? variable)"},{"javascript":"(typeof var1 !== \"undefined\" && typeof var2 !== \"undefined\" && typeof var3 !== \"undefined\")","sibilant":"(defined? var1 var2 var3)"}]},{"name":"macro core/number?","description":"returns true if all of the `things` are numbers, as tested\nwith `typeof`","arguments":["things"],"definition":"(macro number? (...things)\n       '(and ...@(map things (#(thing) '(= (typeof @thing) 'number)))))","examples":[{"javascript":"typeof 1 === \"number\"","sibilant":"(number? 1)"},{"javascript":"(typeof 1 === \"number\" && typeof 2 === \"number\" && typeof 3 === \"number\")","sibilant":"(number? 1 2 3)"}]},{"name":"macro core/pipe","description":"inserts the result of each subsequent call in `calls` as the\nsecond argument to the next macro. This is very much akin to clojure's thread-first arrow or elixir's pipe operator","references":[{"contents":[],"dir":"/Users/jbr/code/sibilant/include","file":"/Users/jbr/code/sibilant/include/macros.sibilant","token":"\"https://clojuredocs.org/clojure.core/-%3E\"","type":"string","start":10409,"line":341,"col":19,"length":43,"nodeId":17848,"specials":0,"precedingIgnored":[{"contents":[],"dir":"/Users/jbr/code/sibilant/include","file":"/Users/jbr/code/sibilant/include/macros.sibilant","token":" ","type":"whitespace","start":10408,"line":341,"col":18,"length":1,"nodeId":17847}]},{"contents":[],"dir":"/Users/jbr/code/sibilant/include","file":"/Users/jbr/code/sibilant/include/macros.sibilant","token":"\"http://elixir-lang.org/docs/v1.0/elixir/Kernel.html#|>/2\"","type":"string","start":10472,"line":342,"col":19,"length":58,"nodeId":17869,"specials":0,"precedingIgnored":[{"contents":[],"dir":"/Users/jbr/code/sibilant/include","file":"/Users/jbr/code/sibilant/include/macros.sibilant","token":"\n","type":"newline","start":10452,"line":341,"col":62,"length":1,"nodeId":17849},{"contents":[],"dir":"/Users/jbr/code/sibilant/include","file":"/Users/jbr/code/sibilant/include/macros.sibilant","token":" ","type":"whitespace","start":10453,"line":342,"col":0,"length":1,"nodeId":17850},{"contents":[],"dir":"/Users/jbr/code/sibilant/include","file":"/Users/jbr/code/sibilant/include/macros.sibilant","token":" ","type":"whitespace","start":10454,"line":342,"col":1,"length":1,"nodeId":17851},{"contents":[],"dir":"/Users/jbr/code/sibilant/include","file":"/Users/jbr/code/sibilant/include/macros.sibilant","token":" ","type":"whitespace","start":10455,"line":342,"col":2,"length":1,"nodeId":17852},{"contents":[],"dir":"/Users/jbr/code/sibilant/include","file":"/Users/jbr/code/sibilant/include/macros.sibilant","token":" ","type":"whitespace","start":10456,"line":342,"col":3,"length":1,"nodeId":17853},{"contents":[],"dir":"/Users/jbr/code/sibilant/include","file":"/Users/jbr/code/sibilant/include/macros.sibilant","token":" ","type":"whitespace","start":10457,"line":342,"col":4,"length":1,"nodeId":17854},{"contents":[],"dir":"/Users/jbr/code/sibilant/include","file":"/Users/jbr/code/sibilant/include/macros.sibilant","token":" ","type":"whitespace","start":10458,"line":342,"col":5,"length":1,"nodeId":17855},{"contents":[],"dir":"/Users/jbr/code/sibilant/include","file":"/Users/jbr/code/sibilant/include/macros.sibilant","token":" ","type":"whitespace","start":10459,"line":342,"col":6,"length":1,"nodeId":17856},{"contents":[],"dir":"/Users/jbr/code/sibilant/include","file":"/Users/jbr/code/sibilant/include/macros.sibilant","token":" ","type":"whitespace","start":10460,"line":342,"col":7,"length":1,"nodeId":17857},{"contents":[],"dir":"/Users/jbr/code/sibilant/include","file":"/Users/jbr/code/sibilant/include/macros.sibilant","token":" ","type":"whitespace","start":10461,"line":342,"col":8,"length":1,"nodeId":17858},{"contents":[],"dir":"/Users/jbr/code/sibilant/include","file":"/Users/jbr/code/sibilant/include/macros.sibilant","token":" ","type":"whitespace","start":10462,"line":342,"col":9,"length":1,"nodeId":17859},{"contents":[],"dir":"/Users/jbr/code/sibilant/include","file":"/Users/jbr/code/sibilant/include/macros.sibilant","token":" ","type":"whitespace","start":10463,"line":342,"col":10,"length":1,"nodeId":17860},{"contents":[],"dir":"/Users/jbr/code/sibilant/include","file":"/Users/jbr/code/sibilant/include/macros.sibilant","token":" ","type":"whitespace","start":10464,"line":342,"col":11,"length":1,"nodeId":17861},{"contents":[],"dir":"/Users/jbr/code/sibilant/include","file":"/Users/jbr/code/sibilant/include/macros.sibilant","token":" ","type":"whitespace","start":10465,"line":342,"col":12,"length":1,"nodeId":17862},{"contents":[],"dir":"/Users/jbr/code/sibilant/include","file":"/Users/jbr/code/sibilant/include/macros.sibilant","token":" ","type":"whitespace","start":10466,"line":342,"col":13,"length":1,"nodeId":17863},{"contents":[],"dir":"/Users/jbr/code/sibilant/include","file":"/Users/jbr/code/sibilant/include/macros.sibilant","token":" ","type":"whitespace","start":10467,"line":342,"col":14,"length":1,"nodeId":17864},{"contents":[],"dir":"/Users/jbr/code/sibilant/include","file":"/Users/jbr/code/sibilant/include/macros.sibilant","token":" ","type":"whitespace","start":10468,"line":342,"col":15,"length":1,"nodeId":17865},{"contents":[],"dir":"/Users/jbr/code/sibilant/include","file":"/Users/jbr/code/sibilant/include/macros.sibilant","token":" ","type":"whitespace","start":10469,"line":342,"col":16,"length":1,"nodeId":17866},{"contents":[],"dir":"/Users/jbr/code/sibilant/include","file":"/Users/jbr/code/sibilant/include/macros.sibilant","token":" ","type":"whitespace","start":10470,"line":342,"col":17,"length":1,"nodeId":17867},{"contents":[],"dir":"/Users/jbr/code/sibilant/include","file":"/Users/jbr/code/sibilant/include/macros.sibilant","token":" ","type":"whitespace","start":10471,"line":342,"col":18,"length":1,"nodeId":17868}]}],"arguments":["calls"],"definition":"(macro pipe (...calls)\n       (inject undefined calls\n               (#(value item)\n                 (if (undefined? value) item\n                     (scoped\n                      (var cloned (if (node? item 'literal 'dots)\n                                      (get `(@item) 'source)\n                                      (clone item)))\n                     \n                      (merge-into cloned\n                                  { contents [ (first cloned.contents)\n                                               value\n                                               ...(rest cloned.contents) ] }))))))","examples":[{"javascript":"(\"a b c d\".toUpperCase().replace(\"A\", \"X\").split(\" \")[0] + \" marks the spot\")","sibilant":"(pipe \"a b c d\"\n                     .to-upper-case\n                     (.replace \"A\" \"X\")\n                     (.split \" \")\n                     first\n                     (concat \" marks the spot\"))"},{"javascript":"JSON.stringify(JSON.parse(\"{\\\"a\\\": {\\\"b\\\": [ 1, 2, 3 ]}}\").a)","sibilant":"(pipe \"{\\\"a\\\": {\\\"b\\\": [ 1, 2, 3 ]}}\"\n                        JSON.parse\n                        (get 'a)\n                        JSON.stringify)"}]},{"name":"macro core/comment","description":"inserts `contents` transpiled to javascript as a comment in the\noutput file, removing it from execution.","arguments":["contents"],"definition":"(macro comment (...contents)\n       (map contents (#(content)\n                       [\"// \"(recurse-map (transpile content)\n                                    (#(item)\n                                      (ternary item\n                                               (pipe item transpile output-formatter\n                                                     (.replace (regex \"\n\" 'g) \"\n// \"))\n                                               null)))])))","examples":[{"javascript":"// (function() {\n//   /* /Users/jbr/code/sibilant/include/macros.sibilant:362:23 */\n// \n//   return 1;\n// }).call(this)","sibilant":"(comment (scoped 1))"}]},{"name":"macro core/array?","description":"returns true if `thing` is an array in javascript. aliased as\n`list?`.","arguments":["thing"],"definition":"(macro array? (thing)\n       (var transpiled (transpile thing))\n       [\"((\" transpiled \") && typeof (\" transpiled \") === \\\"object\\\" && (\"\n               transpiled \").constructor.name === \\\"Array\\\")\"])","examples":[{"javascript":"((arr) && typeof (arr) === \"object\" && (arr).constructor.name === \"Array\")","sibilant":"(array? arr)"}]},{"name":"macro core/when","description":"evaluates statements in `body` if `condition` is true. `body`\n      is `scoped` in a self-evaluating function to support having a\n      return value from the if statement.","arguments":["condition","body"],"definition":"(macro when (condition ...body)\n       [\"(function() {\"\n        (indent [\"if (\" (transpile condition) \") {\"\n                        (indent '(do ...@body))\n                        \"}\"])\n        \"}).call(this)\"])","examples":[{"javascript":"(function() {\n  if (3 < i) {\n    console.log(i);\n    return arr[i];\n  }\n}).call(this)","sibilant":"(when (< 3 i) (console.log i) (get arr i))"}]},{"name":"macro core/not","description":"boolean negation, as determined by javascript truthiness","references":[{"contents":[],"dir":"/Users/jbr/code/sibilant/include","file":"/Users/jbr/code/sibilant/include/macros.sibilant","token":"\"https://developer.mozilla.org/en-US/docs/Glossary/Truthy\"","type":"string","start":13048,"line":408,"col":20,"length":58,"nodeId":19000,"specials":0,"precedingIgnored":[{"contents":[],"dir":"/Users/jbr/code/sibilant/include","file":"/Users/jbr/code/sibilant/include/macros.sibilant","token":" ","type":"whitespace","start":13047,"line":408,"col":19,"length":1,"nodeId":18999}]},{"contents":[],"dir":"/Users/jbr/code/sibilant/include","file":"/Users/jbr/code/sibilant/include/macros.sibilant","token":"\"https://developer.mozilla.org/en-US/docs/Glossary/Falsy\"","type":"string","start":13127,"line":409,"col":20,"length":57,"nodeId":19022,"specials":0,"precedingIgnored":[{"contents":[],"dir":"/Users/jbr/code/sibilant/include","file":"/Users/jbr/code/sibilant/include/macros.sibilant","token":"\n","type":"newline","start":13106,"line":408,"col":78,"length":1,"nodeId":19001},{"contents":[],"dir":"/Users/jbr/code/sibilant/include","file":"/Users/jbr/code/sibilant/include/macros.sibilant","token":" ","type":"whitespace","start":13107,"line":409,"col":0,"length":1,"nodeId":19002},{"contents":[],"dir":"/Users/jbr/code/sibilant/include","file":"/Users/jbr/code/sibilant/include/macros.sibilant","token":" ","type":"whitespace","start":13108,"line":409,"col":1,"length":1,"nodeId":19003},{"contents":[],"dir":"/Users/jbr/code/sibilant/include","file":"/Users/jbr/code/sibilant/include/macros.sibilant","token":" ","type":"whitespace","start":13109,"line":409,"col":2,"length":1,"nodeId":19004},{"contents":[],"dir":"/Users/jbr/code/sibilant/include","file":"/Users/jbr/code/sibilant/include/macros.sibilant","token":" ","type":"whitespace","start":13110,"line":409,"col":3,"length":1,"nodeId":19005},{"contents":[],"dir":"/Users/jbr/code/sibilant/include","file":"/Users/jbr/code/sibilant/include/macros.sibilant","token":" ","type":"whitespace","start":13111,"line":409,"col":4,"length":1,"nodeId":19006},{"contents":[],"dir":"/Users/jbr/code/sibilant/include","file":"/Users/jbr/code/sibilant/include/macros.sibilant","token":" ","type":"whitespace","start":13112,"line":409,"col":5,"length":1,"nodeId":19007},{"contents":[],"dir":"/Users/jbr/code/sibilant/include","file":"/Users/jbr/code/sibilant/include/macros.sibilant","token":" ","type":"whitespace","start":13113,"line":409,"col":6,"length":1,"nodeId":19008},{"contents":[],"dir":"/Users/jbr/code/sibilant/include","file":"/Users/jbr/code/sibilant/include/macros.sibilant","token":" ","type":"whitespace","start":13114,"line":409,"col":7,"length":1,"nodeId":19009},{"contents":[],"dir":"/Users/jbr/code/sibilant/include","file":"/Users/jbr/code/sibilant/include/macros.sibilant","token":" ","type":"whitespace","start":13115,"line":409,"col":8,"length":1,"nodeId":19010},{"contents":[],"dir":"/Users/jbr/code/sibilant/include","file":"/Users/jbr/code/sibilant/include/macros.sibilant","token":" ","type":"whitespace","start":13116,"line":409,"col":9,"length":1,"nodeId":19011},{"contents":[],"dir":"/Users/jbr/code/sibilant/include","file":"/Users/jbr/code/sibilant/include/macros.sibilant","token":" ","type":"whitespace","start":13117,"line":409,"col":10,"length":1,"nodeId":19012},{"contents":[],"dir":"/Users/jbr/code/sibilant/include","file":"/Users/jbr/code/sibilant/include/macros.sibilant","token":" ","type":"whitespace","start":13118,"line":409,"col":11,"length":1,"nodeId":19013},{"contents":[],"dir":"/Users/jbr/code/sibilant/include","file":"/Users/jbr/code/sibilant/include/macros.sibilant","token":" ","type":"whitespace","start":13119,"line":409,"col":12,"length":1,"nodeId":19014},{"contents":[],"dir":"/Users/jbr/code/sibilant/include","file":"/Users/jbr/code/sibilant/include/macros.sibilant","token":" ","type":"whitespace","start":13120,"line":409,"col":13,"length":1,"nodeId":19015},{"contents":[],"dir":"/Users/jbr/code/sibilant/include","file":"/Users/jbr/code/sibilant/include/macros.sibilant","token":" ","type":"whitespace","start":13121,"line":409,"col":14,"length":1,"nodeId":19016},{"contents":[],"dir":"/Users/jbr/code/sibilant/include","file":"/Users/jbr/code/sibilant/include/macros.sibilant","token":" ","type":"whitespace","start":13122,"line":409,"col":15,"length":1,"nodeId":19017},{"contents":[],"dir":"/Users/jbr/code/sibilant/include","file":"/Users/jbr/code/sibilant/include/macros.sibilant","token":" ","type":"whitespace","start":13123,"line":409,"col":16,"length":1,"nodeId":19018},{"contents":[],"dir":"/Users/jbr/code/sibilant/include","file":"/Users/jbr/code/sibilant/include/macros.sibilant","token":" ","type":"whitespace","start":13124,"line":409,"col":17,"length":1,"nodeId":19019},{"contents":[],"dir":"/Users/jbr/code/sibilant/include","file":"/Users/jbr/code/sibilant/include/macros.sibilant","token":" ","type":"whitespace","start":13125,"line":409,"col":18,"length":1,"nodeId":19020},{"contents":[],"dir":"/Users/jbr/code/sibilant/include","file":"/Users/jbr/code/sibilant/include/macros.sibilant","token":" ","type":"whitespace","start":13126,"line":409,"col":19,"length":1,"nodeId":19021}]}],"arguments":["exp"],"definition":"(macro not (exp)\n       [\"!(\" (transpile exp) \")\"])","examples":[{"javascript":"!(typeof 1 === \"string\")","sibilant":"(not (string? 1))"}]},{"name":"macro core/unless","description":"evaluates statements in `body` if `condition` is falsy. `body`\n      is `scoped` in a self-evaluating function to support having a\n      return value from the if statement.","arguments":["condition","body"],"definition":"(macro unless (condition ...body)\n       [\"(function() {\"\n        (indent [\"if (\" '(not @condition) \") {\"\n                        (indent '(do ...@body))\n                        \"}\"])\n        \"}).call(this)\"])","examples":[{"javascript":"(function() {\n  if (!(3 < i)) {\n    console.log(i);\n    return arr[i];\n  }\n}).call(this)","sibilant":"(unless (< 3 i) (console.log i) (get arr i))"}]},{"name":"macro core/assign","description":"assigns alternating keys and values in `args`.  This works much\nlike `var`, but without the var keyword.  It is important to\nunderstand variable scope in javascript in order to use this macro safely.\nnote that this macro does not currently support destructuring like `var` does","arguments":["args"],"definition":"(macro assign (...args)\n       (interleave \"\n\"\n             (bulk-map args (#(name value)\n                              (as-statement [ (transpile name) \" = \"\n                                                    (transpile value)])))))","examples":[{"javascript":"a = 1;","sibilant":"(assign a 1)"},{"javascript":"a = 1;\nb = 2;","sibilant":"(assign a 1 b 2)"}]},{"name":"macro core/log-pretty","description":"outputs debug information about `arg`.  If `label` is\nomitted (only one argument is provided), the name of the variable or\nexpression of that first expression will be logged. Aliased as `pretty-log`","arguments":["label","arg"],"definition":"(macro log-pretty (label arg)\n       (var node this)\n       (when (undefined? arg)\n             (assign arg label\n                     label [\"\\\"\" (prettify label false) \"\\\"\"]))\n       `(console.log (concat @[\"\\\"\" node.file \":\" node.line \"\\\"\"] \" \" @label \" = \" (prettify @arg))))","examples":[{"javascript":"console.log((\"/Users/jbr/code/sibilant/include/macros.sibilant:446\" + \" \" + \"myLabel\" + \" = \" + prettify(value)))","sibilant":"(log-pretty 'my-label value)"},{"javascript":"console.log((\"/Users/jbr/code/sibilant/include/macros.sibilant:447\" + \" \" + \"(+ 1 2)\" + \" = \" + prettify((1 + 2))))","sibilant":"(log-pretty (+ 1 2))"}]},{"name":"macro core/each","description":"iterates over `array`, evaluating `body` once for each value in\n`array`.  If `item` is a literal name, that will be the variable into\nwhich the `array` element is yielded (current value).  If `item` is an expression, it\ncan contain the current value, the index, and the `array`.","references":[{"contents":[],"dir":"/Users/jbr/code/sibilant/include","file":"/Users/jbr/code/sibilant/include/macros.sibilant","token":"\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach\"","type":"string","start":15193,"line":460,"col":18,"length":96,"nodeId":19650,"specials":0,"precedingIgnored":[]}],"arguments":["item","array","body"],"definition":"(macro each (item array ...body)\n       '(.for-each @array\n                   (lambda @{ node this\n                              args (if (node? item 'expression) item [item]) }\n                           ...@body)))","examples":[{"javascript":"[ 1, 2, 3 ].forEach((function(number) {\n  /* /Users/jbr/code/sibilant/include/macros.sibilant:461:17 */\n\n  return console.log(number);\n}))","sibilant":"(each number [ 1 2 3 ] (console.log number))"},{"javascript":"[ \"a\", \"b\", \"c\", \"d\" ].forEach((function(letter, index) {\n  /* /Users/jbr/code/sibilant/include/macros.sibilant:462:17 */\n\n  letters[letter] = index;\n  return console.log(letter.toUpperCase());\n}))","sibilant":"(each (letter index) `[ a b c d ]\n                       (set letters letter index)\n                       (pipe letter (.to-upper-case) (console.log)))"}]},{"name":"macro core/throw","description":"throws a new javascript error with arguments as the string","arguments":["error"],"definition":"(macro throw (error)\n       [\"throw \" (transpile error)])","examples":[{"javascript":"throw (new Error(\"could not find matching socks\"))","sibilant":"(throw (new Error \"could not find matching socks\"))"}]},{"name":"macro core/as-boolean","description":"double-negates `expr`, converting it to a boolean","arguments":["expr"],"definition":"(macro as-boolean (expr)\n       [\"(!!(\" (transpile expr) \"))\"])","examples":[{"javascript":"(!!(0))","sibilant":"(as-boolean 0)"},{"javascript":"(!!(true))","sibilant":"(as-boolean true)"}]},{"name":"macro core/while","description":"evaluates the `body` as long as `condition` is truthy,\nreturning the value of the last expression in `block` when `condition`\nceases to be truthy. See also `until`","arguments":["condition","body"],"definition":"(macro while (condition ...body)\n       (var symbol (^symbol))\n       '(*scoped-without-source\n         (var @symbol)\n         @[\"while (\" (transpile condition) \") {\"\n           (indent '(assign @symbol (*scoped-without-source ...@body)))\n            \"}\"]\n         @symbol))","examples":[{"javascript":"(function() {\n  var $_symbol5_$ = undefined;\n  while (5 > i) {\n    $_symbol5_$ = (function() {\n      console.log(i);\n      return ((i)--);\n    }).call(this);\n  };\n  return $_symbol5_$;\n}).call(this)","sibilant":"(while (> 5 i) (console.log i) (decr i))"}]},{"name":"macro core/until","description":"evaluates the `body` as long as `condition` is falsy,\nreturning the value of the last expression in `block` when `condition`\nceases to be falsy. See also `while`","arguments":["condition","body"],"definition":"(macro until (condition ...body)\n       '(while (not @condition) ...@body))","examples":[{"javascript":"(function() {\n  var $_symbol6_$ = undefined;\n  while (!(5 < i)) {\n    $_symbol6_$ = (function() {\n      console.log(i);\n      return ((i)++);\n    }).call(this);\n  };\n  return $_symbol6_$;\n}).call(this)","sibilant":"(until (< 5 i) (console.log i) (incr i))"}]},{"name":"macro core/match?","description":"returns true if the `string` matches `regexp`.  Deprecated in\n      preference to `.match` (`send` dot-invocation).","arguments":["regexp","string"],"definition":"(macro match? (regexp string)\n       '(.match @string @regexp))","examples":[{"javascript":"\"word\".match((new RegExp(\"^[a-z]+$\", \"i\")))","sibilant":"(match? (regex \"^[a-z]+$\" 'i) 'word)"}]},{"name":"macro core/match-regex?","description":"similar to `match?` but builds a regex out of the `pattern` and `flags`.","arguments":["string","pattern","flags"],"definition":"(macro match-regex? (string pattern flags)\n       '(match? (regex @pattern @flags) @string))","examples":[{"javascript":"\"word\".match((new RegExp(\"^[a-z]+$\", \"i\")))","sibilant":"(match-regex? 'word \"^[a-z]+$\" 'i)"}]},{"name":"macro core/replace","description":"replaces the first occurance of `pattern` (as a regex) with `replacement`","arguments":["string","pattern","replacement"],"definition":"(macro replace (string pattern replacement)\n       '(.replace @string\n              (regex @pattern)\n              @replacement))","examples":[{"javascript":"\"hello world\".replace((new RegExp(\"l+o\", undefined)), \"y there,\")","sibilant":"(replace \"hello world\" \"l+o\" \"y there,\")"}]},{"name":"macro core/replace-all","description":"replaces all occurrances of `pattern` (as a regex) with `replacement`","arguments":["string","pattern","replacement"],"definition":"(macro replace-all (string pattern replacement)\n       '(.replace @string (regex @pattern 'g) @replacement))","examples":[{"javascript":"\"503-555-1212\".replace((new RegExp(\"[0-9]\", \"g\")), \"#\")","sibilant":"(replace-all \"503-555-1212\" \"[0-9]\" \"#\")"}]},{"name":"macro core/thunk","description":"most often called as its alias, `#>`, thunk creates a function\nwith no named arguments. To refer to arguments anonymously, use #n,\nsuch as #0 for the first argument.","arguments":["body"],"definition":"(macro thunk (...body)\n       '(lambda @{ node this args [] }\n       ...@(map-node body\n                 (#(node)\n                   (if (node? node 'arg-placeholder)\n                       '(argument @(replace node.token \"^#\" \"\"))\n                       node)))))","examples":[{"javascript":"[ 1, 2, 3 ].map((function() {\n  /* /Users/jbr/code/sibilant/include/macros.sibilant:603:34 */\n\n  return (1 + arguments[0]);\n}))","sibilant":"(.map [ 1 2 3 ] (#> (+ 1'arguments''[''0'']')))"},{"javascript":"window.setTimeout((function() {\n  /* /Users/jbr/code/sibilant/include/macros.sibilant:604:38 */\n\n  return console.log(\"here\");\n}), 10)","sibilant":"(window.set-timeout (#> (console.log 'here)) 10)"}]},{"name":"macro core/pipe-thunk","description":"most often called as its alias, `#->`, pipe-thunk applies a pipe chain to the argument of a function and returns the result","arguments":["calls"],"definition":"(macro pipe-thunk (...calls) `(thunk (pipe #0 ...@calls)))","examples":[{"javascript":"[ \"a\", \"b\", \"c\" ].map((function() {\n  /* /Users/jbr/code/sibilant/include/macros.sibilant:620:30 */\n\n  return (arguments[0].toUpperCase() + \" is a letter\");\n}))","sibilant":"(.map `[ a b c ] (#-> (.to-upper-case) (concat \" is a letter\")))"}]},{"name":"macro core/keys","description":"returns the property names of `obj`.","references":[{"contents":[],"dir":"/Users/jbr/code/sibilant/include","file":"/Users/jbr/code/sibilant/include/macros.sibilant","token":"\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/keys\"","type":"string","start":20132,"line":629,"col":20,"length":94,"nodeId":21514,"specials":0,"precedingIgnored":[{"contents":[],"dir":"/Users/jbr/code/sibilant/include","file":"/Users/jbr/code/sibilant/include/macros.sibilant","token":" ","type":"whitespace","start":20131,"line":629,"col":19,"length":1,"nodeId":21513}]}],"arguments":["obj"],"definition":"(macro keys (obj)\n       '(Object.keys @obj))","examples":[{"javascript":"Object.keys({\n  a: 1,\n  b: 2\n})","sibilant":"(keys { a 1 b 2 })"}]},{"name":"macro core/delete","description":"uses the javascript delete keyword on any number of `objects`.\n      Use in conjunction with `get` or dotted literal notation (a.b).","arguments":["objects"],"definition":"(macro delete (...objects)\n       (interleave \"\n\" (map objects (#(obj)\n                                 (as-statement [\"delete \" (transpile obj)])))))","examples":[{"javascript":"delete object.a;\ndelete object.b;","sibilant":"(delete object.a object.b)"},{"javascript":"delete object[attribute];\ndelete object[\"other attribute\"];","sibilant":"(delete (get object attribute) (get object \"other attribute\"))"}]},{"name":"macro core/delete-macro","description":"deletes each macro name in `macro-names` from the current namespace. Use carefully","arguments":["macroNames"],"definition":"(macro delete-macro (...macro-names)\n       (each macro-name macro-names\n             (delete (get sibilant.macros.namespace (output-formatter (transpile macro-name)))))\n       null)","examples":[]},{"name":"macro core/rename-macro","description":"moves macro from `current-macro-name` to `new-macro-name`. Use carefully","arguments":["currentMacroName","newMacroName"],"definition":"(macro rename-macro (current-macro-name new-macro-name)\n       (^alias-macro current-macro-name new-macro-name)\n       (^delete-macro current-macro-name)\n       null)","examples":[]},{"name":"macro core/arguments","description":"transforms function arguments into an array, using the Array prototype's slice","arguments":[],"definition":"(macro arguments ()\n       [\"(Array.prototype.slice.apply(arguments))\"])","examples":[{"javascript":"(Array.prototype.slice.apply(arguments))","sibilant":"(arguments)"}]},{"name":"macro core/argument","description":"`get`s the argument at `index` in the current function context","arguments":["index"],"definition":"(macro argument (index)\n       '(get arguments @index))","examples":[{"javascript":"arguments[3]","sibilant":"(argument 3)"}]},{"name":"macro core/each-key","description":"iterates over each attribute in `obj`","arguments":["as","obj","body"],"definition":"(macro each-key (as obj ...body)\n       `(pipe @obj (keys)\n              (.for-each (lambda @{ args: (if (node? as 'expression) as [as])\n                                    node: this }\n                                 ...@body))))","examples":[{"javascript":"Object.keys({\n  a: 1,\n  b: 2\n}).forEach((function(key) {\n  /* /Users/jbr/code/sibilant/include/macros.sibilant:698:14 */\n\n  return console.log(key);\n}))","sibilant":"(each-key key { a 1 b 2 } (console.log key))"}]},{"name":"macro core/switch","description":"uses the javascript switch construction to test equality.  documentation todo: needs better description","arguments":["obj","cases"],"definition":"(macro switch (obj ...cases)\n       [\"(function() {\"\n         (indent [\"switch(\" (transpile obj) \") {\"\n                   (map cases (#(case-def)\n                                (var case-name-node (first case-def.contents)\n                                     case-labels (if (node? case-name-node 'expression 'bracket)\n                                                     case-name-node.contents\n                                                     [case-name-node])\n                                     case-string (interleave \"\n\"\n                                                             (map case-labels (#(c)\n                                                                                (if (= 'default c.token)\n                                                                                    \"default:\"\n                                                                                    [\"case \" (transpile c) \":\"])))))\n                                [\"\n\" case-string (indent '(do ...@(rest case-def.contents)))]))\n                   \"}\"])\n         \"}).call(this)\"])","examples":[{"javascript":"(function() {\n  switch(char) {\n  case \"a\":\n    return \"it was an a\";\n  \n  case \"b\":\n    console.log(\"found a b!\");\n    return \"it was a b\";\n  \n  case 1:\n  case 2:\n  case 3:\n  case 4:\n  case 5:\n    return \"it was an integer from one to five\";\n  \n  default:\n    return \"not sure\";\n  }\n}).call(this)","sibilant":"(switch char\n                         ('a \"it was an a\")\n                         ('b (console.log \"found a b!\")\n                             \"it was a b\")\n                         ([1 2 3 4 5] \"it was an integer from one to five\")\n                         (default \"not sure\"))"}]},{"name":"macro core/if","description":"tests any number of `alternating-conditions-and-branches`.  If\n      an odd number of branches are supplied, the final branch is a\n      default else clause.  To evaluate more than one expression as a\n      branch, use the `do` macro, as shown in the examples:","arguments":["alternatingConditionsAndBranches"],"definition":"(macro if (...alternating-conditions-and-branches)\n       [\"(function() {\"\n        (indent\n         (interleave \" else \"\n               (bulk-map alternating-conditions-and-branches\n                         (#(cond val)\n                           (if (!= (typeof val) 'undefined)\n                                 [\"if (\" (transpile cond) \") {\"\n                                   (indent '(do @val))\n                                   \"}\"]\n                                 [\"{\" (indent '(do @cond)) \"}\"])))))\n        \"}).call(this)\"])","examples":[{"javascript":"(function() {\n  if (true) {\n    return console.log(\"here\");\n  }\n}).call(this)","sibilant":"(if true (console.log 'here))"},{"javascript":"(function() {\n  if (1 === arguments.length) {\n    return console.log(\"one argument\");\n  } else if (\"blue\" === favoriteColor) {\n    return console.log(\"blue\");\n  } else {\n    return examples = \"difficult\";\n  }\n}).call(this)","sibilant":"(if (= 1 arguments.length) (console.log \"one argument\")\n                     (= 'blue favorite-color) (console.log \"blue\")\n                     (assign examples 'difficult))"},{"javascript":"(function() {\n  if (foo__QUERY()) {\n    a(b);\n    return c();\n  } else if (bar__QUERY()) {\n    baz();\n    return wibble();\n  } else {\n    d(e);\n    return console.log(\"default\");\n  }\n}).call(this)","sibilant":"(if (foo?) (do (a b)\n                                (c))\n                     (bar?) (do (baz)\n                                (wibble))\n                     (do (d e)\n                         (console.log 'default)))"}]},{"name":"macro core/chain","description":"similar to `pipe`, this macro allows function calls to be applied\nin sequence, as is common in fluent interfaces. deprecated in preference to `pipe`","arguments":["object","calls"],"definition":"(macro chain (object ...calls)\n       (if (= 0 calls.length) (transpile object)\n           (= 1 calls.length) '(send @object ...@(get (first calls) 'contents))\n           (do\n            (var lines (map calls (#(call index)\n                                    [\".\" (transpile (first call.contents))\n                                         \"(\" (interleave \", \" (map (rest call.contents) transpile)) \")\"])))\n\n            [ (transpile object)\n              (first lines)\n              \"\n  \"\n              (recurse-indent\n               (interleave \"\n\" (rest lines)))])))","examples":[{"javascript":"a.b(c, d)\n  .e()\n  .f(g)","sibilant":"(chain a (b c d) (e) (f g))"}]},{"name":"macro core/instance-of?","description":"uses the javascript `instanceof` operator to check if `item` is of `type`.","arguments":["item","type"],"definition":"(macro instance-of? (item type)\n       [\"(\" (transpile item) \" instanceof \" (transpile type) \")\"])","examples":[{"javascript":"((new Date()) instanceof Date)","sibilant":"(instance-of? (new Date) Date)"}]},{"name":"macro core/includes?","description":"returns true if `haystack` includes `needle`.  `haystack` can be a string or array/list.","arguments":["haystack","needle"],"definition":"(macro includes? (haystack needle)\n       '(pipe @haystack (.index-of @needle) (!= -1)))","examples":[{"javascript":"\"hello\".indexOf(\"h\") !== -1","sibilant":"(includes? 'hello 'h)"},{"javascript":"[ \"Veni\", \"vidi\", \"vici\" ].indexOf(\"vidi\") !== -1","sibilant":"(includes? `[ Veni vidi vici] 'vidi)"}]},{"name":"macro core/excludes?","description":"returns true if `haystack` does NOT include `needle`.\n`haystack` can be a string or array/list","arguments":["haystack","needle"],"definition":"(macro excludes? (haystack needle)\n       `(pipe @haystack (.index-of @needle) (= -1)))","examples":[{"javascript":"\"hello\".indexOf(10) === -1","sibilant":"(excludes? 'hello 10)"},{"javascript":"[ \"Veni\", \"vidi\", \"vici\" ].indexOf(\"attenti\") === -1","sibilant":"(excludes? `[ Veni vidi vici] 'attenti)"}]},{"name":"macro core/exists?","description":"similar to the javascript truthiness predicate `as-boolean`, returns true unless the `thing` is undefined or null","arguments":["thing"],"definition":"(macro exists? (thing)\n       `(and (defined? @thing) (!= @thing null)))","examples":[{"javascript":"(typeof window !== \"undefined\" && window !== null)","sibilant":"(exists? window)"}]},{"name":"macro core/join","description":"combines elements of array `arr` into a string, inserting\n`glue` string between each element.  if `glue` is omitted (only one\nargument provided), the elements of `arr` are joined with an empty\nstring","arguments":["arr","glue"],"definition":"(macro join (arr glue)\n       (if (and (defined? glue) (undefined? arr))\n           (assign arr glue glue undefined))\n       `(.join @arr @(or glue \"\\\"\\\"\")))","examples":[{"javascript":"[ \"a\", \"few\", \"words\" ].join(\", \")","sibilant":"(join `[ a few words ]  \", \" )"},{"javascript":"[ \"several\", \"more\", \"words\" ].join(\"\")","sibilant":"(join `[ several more words ])"}]},{"name":"macro core/var","description":"registers variables in `pairs` inside of the current scope using the javascript var keyword.\ndestructuring from arrays and objects is also supported, as shown in the examples","arguments":["pairs"],"definition":"(macro var (...pairs)\n       (var destructured [])\n       (bulk-map pairs (#(lhs rhs)\n                         (switch lhs.type\n                                 ('bracket\n                                  (var symbol (^symbol))\n                                  (destructured.push [symbol (transpile rhs)])\n                                  (each (item index) lhs.contents\n                                        (destructured.push [(transpile item) '(get @symbol @index)]))\n                                  (destructured.push [symbol 'undefined]))\n                                 ('brace\n                                  (var symbol (^symbol))\n                                  (destructured.push [symbol (transpile rhs)])\n                                  (each (item index) lhs.contents\n                                        (var tr-item (transpile item))\n                                        (destructured.push [tr-item '(get @symbol @[\"\\\"\" tr-item \"\\\"\"])]))\n                                  (destructured.push [symbol 'undefined]))\n\n                                 (default\n                                  (destructured.push [(transpile lhs)\n                                                       (if rhs (transpile rhs) 'undefined)])))))\n\n       (as-statement\n        [\"var \" (interleave \",\n    \"\n           (map destructured\n                (#(pair)\n                  [(first pair) \" = \" (second pair)]\n                  )))]))","examples":[{"javascript":"var a = 1,\n    b = 2;","sibilant":"(var a 1 b 2)"},{"javascript":"var a = 1;","sibilant":"(var a 1)"},{"javascript":"var a = undefined;","sibilant":"(var a)"},{"javascript":"var $_symbol7_$ = {\n  a: 1,\n  b: 2\n},\n    a = $_symbol7_$.a,\n    $_symbol7_$ = undefined,\n    c = 3;","sibilant":"(var {a} {a 1 b 2} c 3)"},{"javascript":"var a = 1,\n    $_symbol8_$ = [ 2, 3 ],\n    b = $_symbol8_$[0],\n    c = $_symbol8_$[1],\n    $_symbol8_$ = undefined;","sibilant":"(var a 1 [b c] [2 3])"}]},{"name":"macro core/default","description":"sets default values for variables in current scope. `pairs` are\nalternating variable names and default values","arguments":["pairs"],"definition":"(macro default (...pairs)\n       (interleave \"\n\" (bulk-map pairs (#(name value)\n                                  '(assign @name (ternary (defined? @name) @name @value))))))","examples":[{"javascript":"a = (typeof a !== \"undefined\") ? a : 10;\nb = (typeof b !== \"undefined\") ? b : 20;","sibilant":"(default a 10 b 20)"}]},{"name":"macro core/has-key?","description":"checks if `object` has property `key`.  returns true or false.","arguments":["object","key"],"definition":"(macro has-key? (object key)\n       `(.has-own-property @object @key))","examples":[{"javascript":"object.hasOwnProperty(\"a\")","sibilant":"(has-key? object 'a)"}]},{"name":"macro core/get","description":"retreives object properties, potentially deeply. If more than one `keys` are provided,\n`get` fetches deeply into nested objects or arrays.\nWhen javascript dot notation can be used (`a.b = 3`), it is.\nOtherwise, bracket notation is used.","arguments":["obj","keys"],"definition":"(macro get (obj ...keys)\n       [(transpile obj)\n         (map keys (#(key)\n                     (var transpiled (transpile key)\n                          output (output-formatter transpiled))\n\n                     (if (match-regex? output \"^\\\"[a-zA-Z0-9]+\\\"$\")\n                         [\".\" (replace-all output \"\\\"\" \"\") ]\n                         [\"[\" transpiled \"]\"])))])","examples":[{"javascript":"anObject.staticAttributeName","sibilant":"(get an-object 'static-attribute-name)"},{"javascript":"object[dynamicAttributeName]","sibilant":"(get object dynamic-attribute-name)"},{"javascript":"object[\"these attributes\"][\"can't be dotted\"]","sibilant":"(get object \"these attributes\" \"can't be dotted\")"},{"javascript":"array[0]","sibilant":"(get array 0)"},{"javascript":"object.a.b[c]","sibilant":"(get object 'a 'b c)"},{"javascript":"array[0][1][2]","sibilant":"(get array 0 1 2)"}]},{"name":"macro core/set","description":"assigns object properties to `arr` in pairs, alternating between keys and values.\nWhen javascript dot notation can be used (`a.b = 3`), it is.  Otherwise, bracket notation is used","arguments":["arr","kvPairs"],"definition":"(macro set (arr ...kv-pairs)\n       (interleave \"\n\" (bulk-map kv-pairs (#(k v) `(assign (get @arr @k) @v)))))","examples":[{"javascript":"anObject.staticAttributeName = \"value\";","sibilant":"(set an-object 'static-attribute-name 'value)"},{"javascript":"object[dynamicAttributeName] = \"key name determined at runtime\";","sibilant":"(set object dynamic-attribute-name \"key name determined at runtime\")"},{"javascript":"array[0] = \"first element of array\";","sibilant":"(set array 0 \"first element of array\")"},{"javascript":"object[\"can't be dotted\"] = \"value\";","sibilant":"(set object \"can't be dotted\" 'value)"},{"javascript":"object.firstAttribute = \"firstValue\";\nobject.secondAttribute = \"secondValue\";","sibilant":"(set object 'first-attribute 'first-value\n                      'second-attribute 'second-value)"}]},{"name":"macro core/lower-case?","description":"checks if a string is identical to the lower-cased version of itself","arguments":["str"],"definition":"(macro lower-case? (str)\n       `(= (.to-lower-case @str) @str))","examples":[{"javascript":"\"abc\".toLowerCase() === \"abc\"","sibilant":"(lower-case? \"abc\")"}]},{"name":"macro core/upper-case?","description":"checks if a string is identical to the upper-cased version of itself","arguments":["str"],"definition":"(macro upper-case? (str)\n       `(= (.to-upper-case @str) @str))","examples":[{"javascript":"\"abc\".toLowerCase() === \"abc\"","sibilant":"(lower-case? \"abc\")"}]}]
