name: macro core/[0;32mternary[0m
description: the simplest way to conditionally execute code.
arguments: [0;32m([0;32mcond[0m[0;32m[0;32m [0mif-true[0m[0;32m[0;32m [0mif-false[0m)[0m
examples: 
[0;32m([0;32mternary[0m[0;32m[0;32m [0m([0;32m<[0m[0;32m[0;32m [0m50[0m[0;32m[0;32m [0m100[0m)[0m[0;32m[0;32m
[0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m"fifty is less than 100"[0m[0;32m[0;32m
[0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m"fifty is more than 100"[0m)[0m
(50 < 100) ? "fifty is less than 100" : "fifty is more than 100"


name: macro core/[0;32malias-macro[0m
description: stores a duplicate copy of `current-macro-name` as
`new-macro-name` in current namespace.  No output.
arguments: [0;32m([0;32mcurrent-macro-name[0m[0;32m[0;32m [0mnew-macro-name[0m)[0m
examples: 



name: macro core/[0;32msend[0m
description: calls the `method` on `object` as a function with `args` as the arguments
arguments: [0;32m([0;32mobject[0m[0;32m[0;32m [0mmethod[0m[0;32m[0;32m [0m...[0;32margs[0m[0m)[0m
examples: 
[0;32m([0;32msend[0m[0;32m[0;32m [0mobject[0m[0;32m[0;32m [0mmethod[0m[0;32m[0;32m [0mfirst-argument[0m[0;32m[0;32m [0msecond-argument[0m[0;32m[0;32m [0mthird-argument[0m)[0m
object.method(firstArgument, secondArgument, thirdArgument)


name: macro core/[0;32mapply[0m
description: calls the function `fn` with arguments passed as an array in `arglist`
arguments: [0;32m([0;32mfn[0m[0;32m[0;32m [0marglist[0m)[0m
examples: 
[0;32m([0;32mapply[0m[0;32m[0;32m [0mmy-function[0m[0;32m[0;32m [0m[[0;32m[0;32m [0mfirst-arg[0m[0;32m[0;32m [0msecond-arg[0m[0;32m[0;32m [0mthird-arg[0m[0;32m [0m][0m)[0m
myFunction.apply(this, [ firstArg, secondArg, thirdArg ])


name: macro core/[0;32mcons[0m
description: builds an array with `first` as the zeroth index and the
elements provided by array `rest` as the subsequent elements, as
siblings with `first`.  deprecated
arguments: [0;32m([0;32mfirst[0m[0;32m[0;32m [0mrest[0m)[0m
examples: 
[0;32m([0;32mcons[0m[0;32m[0;32m [0m1[0m[0;32m[0;32m [0m[[0;32m[0;32m [0m2[0m[0;32m[0;32m [0m3[0m[0;32m[0;32m [0m4[0m[0;32m [0m][0m)[0m
[ 1 ].concat([ 2, 3, 4 ])


name: macro core/[0;32mappend[0m
description: adds `additional` elements onto the right-side (tail) of `list`. deprecated
arguments: [0;32m([0;32mlist[0m[0;32m[0;32m [0m...[0;32madditional[0m[0m)[0m
examples: 
[0;32m([0;32mappend[0m[0;32m[0;32m [0m[[0;32m[0;32m [0m1[0m[0;32m[0;32m [0m2[0m[0;32m[0;32m [0m3[0m[0;32m [0m][0m[0;32m[0;32m [0m4[0m[0;32m[0;32m [0m5[0m[0;32m[0;32m [0m6[0m)[0m
[ 1, 2, 3 ].concat([ 4, 5, 6 ])


name: macro core/[0;32mlength[0m
description: fetches length attribute from `arr`
arguments: [0;32m([0;32marr[0m)[0m
examples: 
[0;32m([0;32mlength[0m[0;32m[0;32m [0m[[0;32m[0;32m [0m1[0m[0;32m[0;32m [0m2[0m[0;32m[0;32m [0m3[0m[0;32m [0m][0m)[0m
[ 1, 2, 3 ].length


name: macro core/[0;32mscoped[0m
description: executes the `body` inside of a self-executing function. The
last statement/expression of the body is returned.
arguments: [0;32m([0;32m...[0;32mbody[0m[0m)[0m
examples: 
[0;32m([0;32mscoped[0m[0;32m[0;32m [0mtrue[0m)[0m
(function() {
  /* /Users/jbr/code/sibilant-clean/include/macros.sibilant:100:16 */

  return true;
}).call(this)

[0;32m([0;32mscoped[0m[0;32m[0;32m [0m([0;32mvar[0m[0;32m[0;32m [0ma[0m[0;32m[0;32m [0m1[0m)[0m[0;32m[0;32m [0m([0;32m+[0m[0;32m[0;32m [0ma[0m[0;32m[0;32m [0m2[0m)[0m)[0m
(function() {
  /* /Users/jbr/code/sibilant-clean/include/macros.sibilant:100:30 */

  var a = 1;
  return (a + 2);
}).call(this)


name: macro core/[0;32mfirst[0m
description: fetches the first element from `arr`
arguments: [0;32m([0;32marr[0m)[0m
examples: 
[0;32m([0;32m[0;32m [0mfirst[0m[0;32m[0;32m [0mmy-array[0m)[0m
myArray[0]


name: macro core/[0;32msecond[0m
description: fetches the second element from `arr`
arguments: [0;32m([0;32marr[0m)[0m
examples: 
[0;32m([0;32m[0;32m [0msecond[0m[0;32m[0;32m [0mmy-array[0m)[0m
myArray[1]


name: macro core/[0;32mthird[0m
description: fetches the third element from `arr`
arguments: [0;32m([0;32marr[0m)[0m
examples: 
[0;32m([0;32m[0;32m [0mthird[0m[0;32m[0;32m [0mmy-array[0m)[0m
myArray[2]


name: macro core/[0;32mfourth[0m
description: fetches the fourth element from `arr`
arguments: [0;32m([0;32marr[0m)[0m
examples: 
[0;32m([0;32m[0;32m [0mfourth[0m[0;32m[0;32m [0mmy-array[0m)[0m
myArray[3]


name: macro core/[0;32mfifth[0m
description: fetches the fifth element from `arr`
arguments: [0;32m([0;32marr[0m)[0m
examples: 
[0;32m([0;32m[0;32m [0mfifth[0m[0;32m[0;32m [0mmy-array[0m)[0m
myArray[4]


name: macro core/[0;32msixth[0m
description: fetches the sixth element from `arr`
arguments: [0;32m([0;32marr[0m)[0m
examples: 
[0;32m([0;32m[0;32m [0msixth[0m[0;32m[0;32m [0mmy-array[0m)[0m
myArray[5]


name: macro core/[0;32mseventh[0m
description: fetches the seventh element from `arr`
arguments: [0;32m([0;32marr[0m)[0m
examples: 
[0;32m([0;32m[0;32m [0mseventh[0m[0;32m[0;32m [0mmy-array[0m)[0m
myArray[6]


name: macro core/[0;32meighth[0m
description: fetches the eighth element from `arr`
arguments: [0;32m([0;32marr[0m)[0m
examples: 
[0;32m([0;32m[0;32m [0meighth[0m[0;32m[0;32m [0mmy-array[0m)[0m
myArray[7]


name: macro core/[0;32mninth[0m
description: fetches the ninth element from `arr`
arguments: [0;32m([0;32marr[0m)[0m
examples: 
[0;32m([0;32m[0;32m [0mninth[0m[0;32m[0;32m [0mmy-array[0m)[0m
myArray[8]


name: macro core/[0;32mrest[0m
description: fetches all but the first item of `arr`
arguments: [0;32m([0;32marr[0m)[0m
examples: 
[0;32m([0;32mrest[0m[0;32m[0;32m [0m[[0;32m[0;32m [0m1[0m[0;32m[0;32m [0m2[0m[0;32m[0;32m [0m3[0m[0;32m [0m][0m)[0m
[ 1, 2, 3 ].slice(1)


name: macro core/[0;32mlast[0m
description: fetches just the last element of `arr` by slicing.
arguments: [0;32m([0;32marr[0m)[0m
examples: 
[0;32m([0;32mlast[0m[0;32m[0;32m [0m[[0;32m[0;32m [0m1[0m[0;32m[0;32m [0m2[0m[0;32m[0;32m [0m3[0m[0;32m [0m][0m)[0m
[ 1, 2, 3 ].slice(-1)[0]


name: macro core/[0;32m+[0m
description: adds `args` using the javascript `+` operator. Since javascript
overloads this for string concatenation, this macro can be used for
this as well.
arguments: [0;32m([0;32m...[0;32margs[0m[0m)[0m
examples: 
[0;32m([0;32m+[0m[0;32m[0;32m [0m1[0m[0;32m[0;32m [0m2[0m[0;32m[0;32m [0m3[0m)[0m
(1 + 2 + 3)

[0;32m([0;32m+[0m[0;32m[0;32m [0m'[0;32mhello[0m[0m[0;32m[0;32m [0m'[0;32mworld[0m[0m)[0m
("hello" + "world")


name: macro core/[0;32m-[0m
description: subtracts each subsequent element of `args`
arguments: [0;32m([0;32m...[0;32margs[0m[0m)[0m
examples: 
[0;32m([0;32m-[0m[0;32m[0;32m [0m2[0m[0;32m[0;32m [0m1[0m)[0m
(2 - 1)

[0;32m([0;32m-[0m[0;32m[0;32m [0m10[0m[0;32m[0;32m [0m5[0m[0;32m[0;32m [0m1[0m)[0m
(10 - 5 - 1)


name: macro core/[0;32m*[0m
description: multiplies elements of `args`
arguments: [0;32m([0;32m...[0;32margs[0m[0m)[0m
examples: 
[0;32m([0;32m*[0m[0;32m[0;32m [0m3[0m[0;32m[0;32m [0m4[0m[0;32m[0;32m [0m5[0m)[0m
(3 * 4 * 5)


name: macro core/[0;32m/[0m
description: divides each subsequent element of `args`
arguments: [0;32m([0;32m...[0;32margs[0m[0m)[0m
examples: 
[0;32m([0;32m/[0m[0;32m[0;32m [0m1[0m[0;32m[0;32m [0m2[0m)[0m
(1 / 2)

[0;32m([0;32m/[0m[0;32m[0;32m [0m1[0m[0;32m[0;32m [0m2[0m[0;32m[0;32m [0m3[0m)[0m
(1 / 2 / 3)


name: macro core/[0;32mor[0m
description: short circuiting operator returns the first element of `args` that evaluates to be truthy
arguments: [0;32m([0;32m...[0;32margs[0m[0m)[0m
examples: 
[0;32m([0;32mor[0m[0;32m[0;32m [0m([0;32m=[0m[0;32m[0;32m [0m1[0m[0;32m[0;32m [0m2[0m)[0m[0;32m[0;32m [0m([0;32mstring?[0m[0;32m[0;32m [0m[][0m)[0m[0;32m[0;32m [0m"one is not two and an array is not a string"[0m)[0m
(1 === 2 || typeof [] === "string" || "one is not two and an array is not a string")


name: macro core/[0;32mand[0m
description: returns the last element if all elements of `args` are truthy, or the
first non-truthy element if it exists
arguments: [0;32m([0;32m...[0;32margs[0m[0m)[0m
examples: 
[0;32m([0;32mand[0m[0;32m[0;32m [0m([0;32mstring?[0m[0;32m[0;32m [0m"string"[0m)[0m[0;32m[0;32m [0m([0;32mnumber?[0m[0;32m[0;32m [0m10[0m)[0m[0;32m[0;32m [0m([0;32m=[0m[0;32m[0;32m [0m1[0m[0;32m[0;32m [0m1[0m)[0m)[0m
(typeof "string" === "string" && typeof 10 === "number" && 1 === 1)


name: macro core/[0;32mmod[0m
description: modulus operator
arguments: [0;32m([0;32m...[0;32margs[0m[0m)[0m
examples: 
[0;32m([0;32mmod[0m[0;32m[0;32m [0m10[0m[0;32m[0;32m [0m2[0m)[0m
(10 % 2)


name: macro core/[0;32m>[0m
description: compares `args` from left to right, returning true if each element is greater than than the next
arguments: [0;32m([0;32m...[0;32margs[0m[0m)[0m
examples: 
[0;32m([0;32m[0;32m [0m>[0m[0;32m[0;32m [0ma[0m[0;32m[0;32m [0mb[0m[0;32m[0;32m [0mc[0m)[0m
(a > b && b > c)

[0;32m([1;33m[0;32m [0m>[0m[0;32m[0;32m [0ma[0m[0;32m[0;32m [0mb[0m)[0m
a > b


name: macro core/[0;32m<[0m
description: compares `args` from left to right, returning true if each element is less than than the next
arguments: [0;32m([0;32m...[0;32margs[0m[0m)[0m
examples: 
[0;32m([0;32m[0;32m [0m<[0m[0;32m[0;32m [0ma[0m[0;32m[0;32m [0mb[0m[0;32m[0;32m [0mc[0m)[0m
(a < b && b < c)

[0;32m([1;33m[0;32m [0m<[0m[0;32m[0;32m [0ma[0m[0;32m[0;32m [0mb[0m)[0m
a < b


name: macro core/[0;32m<=[0m
description: compares `args` from left to right, returning true if each element is less than or equal than the next
arguments: [0;32m([0;32m...[0;32margs[0m[0m)[0m
examples: 
[0;32m([0;32m[0;32m [0m<=[0m[0;32m[0;32m [0ma[0m[0;32m[0;32m [0mb[0m[0;32m[0;32m [0mc[0m)[0m
(a <= b && b <= c)

[0;32m([1;33m[0;32m [0m<=[0m[0;32m[0;32m [0ma[0m[0;32m[0;32m [0mb[0m)[0m
a <= b


name: macro core/[0;32m>=[0m
description: compares `args` from left to right, returning true if each element is greater than or equal than the next
arguments: [0;32m([0;32m...[0;32margs[0m[0m)[0m
examples: 
[0;32m([0;32m[0;32m [0m>=[0m[0;32m[0;32m [0ma[0m[0;32m[0;32m [0mb[0m[0;32m[0;32m [0mc[0m)[0m
(a >= b && b >= c)

[0;32m([1;33m[0;32m [0m>=[0m[0;32m[0;32m [0ma[0m[0;32m[0;32m [0mb[0m)[0m
a >= b


name: macro core/[0;32m!=[0m
description: compares `args` from left to right, returning true if each element is not equal (using threequals) than the next
arguments: [0;32m([0;32m...[0;32margs[0m[0m)[0m
examples: 
[0;32m([0;32m[0;32m [0m!=[0m[0;32m[0;32m [0ma[0m[0;32m[0;32m [0mb[0m[0;32m[0;32m [0mc[0m)[0m
(a !== b && b !== c)

[0;32m([1;33m[0;32m [0m!=[0m[0;32m[0;32m [0ma[0m[0;32m[0;32m [0mb[0m)[0m
a !== b


name: macro core/[0;32m=[0m
description: compares `args` from left to right, returning true if each element is equal (using threequals) than the next
arguments: [0;32m([0;32m...[0;32margs[0m[0m)[0m
examples: 
[0;32m([0;32m[0;32m [0m=[0m[0;32m[0;32m [0ma[0m[0;32m[0;32m [0mb[0m[0;32m[0;32m [0mc[0m)[0m
(a === b && b === c)

[0;32m([1;33m[0;32m [0m=[0m[0;32m[0;32m [0ma[0m[0;32m[0;32m [0mb[0m)[0m
a === b


name: macro core/[0;32mincr-by[0m
description: increments `item` by `increment`
arguments: [0;32m([0;32mitem[0m[0;32m[0;32m [0mincrement[0m)[0m
examples: 
[0;32m([0;32mincr-by[0m[0;32m[0;32m [0mn[0m[0;32m[0;32m [0m5[0m)[0m
n += 5


name: macro core/[0;32mincr[0m
description: increments item by 1
arguments: [0;32m([0;32mitem[0m)[0m
examples: 
[0;32m([0;32mincr[0m[0;32m[0;32m [0mi[0m)[0m
((i)++)


name: macro core/[0;32mdecr[0m
description: decrements item by 1
arguments: [0;32m([0;32mitem[0m)[0m
examples: 
[0;32m([0;32mdecr[0m[0;32m[0;32m [0mi[0m)[0m
((i)--)


name: macro core/[0;32mnew[0m
description: uses the javascript new keyword to construct an object using
      `constructor`, with `args` passed as arguments to the constructor.
arguments: [0;32m([0;32mconstructor[0m[0;32m[0;32m [0m...[0;32margs[0m[0m)[0m
examples: 
[0;32m([0;32mnew[0m[0;32m[0;32m [0mRegExp[0m[0;32m[0;32m [0m"hello"[0m[0;32m[0;32m [0m'[0;32mg[0m[0m)[0m
(new RegExp("hello", "g"))


name: macro core/[0;32mregex[0m
description: builds a regex using `pattern` and `flags` as arguments to the RegExp constructor
arguments: [0;32m([0;32mpattern[0m[0;32m[0;32m [0mflags[0m)[0m
examples: 
[0;32m([0;32mregex[0m[0;32m[0;32m [0m"[0-9]+"[0m)[0m
(new RegExp("[0-9]+", undefined))

[0;32m([0;32mregex[0m[0;32m[0;32m [0m"0x[0-9a-f]+"[0m[0;32m[0;32m [0m'[0;32mi[0m[0m)[0m
(new RegExp("0x[0-9a-f]+", "i"))


name: macro core/[0;32mtimestamp[0m
description: inserts compilation timestamp as a string. deprecated.
arguments: [0;32m()[0m
examples: 
[0;32m([0;32mtimestamp[0m)[0m
"Mon Dec 21 2015 19:42:10 GMT-0800 (PST)"


name: macro core/[0;32mzero?[0m
description: predicate to test for equality with zero
arguments: [0;32m([0;32mitem[0m)[0m
examples: 
[0;32m([0;32mzero?[0m[0;32m[0;32m [0mn[0m)[0m
n === 0


name: macro core/[0;32mempty?[0m
description: returns true if the array `arr` has a length of zero
arguments: [0;32m([0;32marr[0m)[0m
examples: 
[0;32m([0;32mempty?[0m[0;32m[0;32m [0m[][0m)[0m
0 === [].length


name: macro core/[0;32modd?[0m
description: returns true if `number` is not divisible by 2
arguments: [0;32m([0;32mnumber[0m)[0m
examples: 
[0;32m([0;32modd?[0m[0;32m[0;32m [0m5[0m)[0m
1 === (5 % 2)


name: macro core/[0;32meven?[0m
description: returns true if `number` is divisible by 2 with no remainder
arguments: [0;32m([0;32mnumber[0m)[0m
examples: 
[0;32m([0;32meven?[0m[0;32m[0;32m [0m10[0m)[0m
0 === (10 % 2)


name: macro core/[0;32mtypeof[0m
description: exposes the javascript typeof operator. most often, predicates
such as `string?`, `function?`, `number?`, etc are preferred.
arguments: [0;32m([0;32mthing[0m)[0m
examples: 
[0;32m([0;32mtypeof[0m[0;32m[0;32m [0m5[0m)[0m
typeof 5


name: macro core/[0;32mstring?[0m
description: returns true if all of the `things` are javascript strings
arguments: [0;32m([0;32m...[0;32mthings[0m[0m)[0m
examples: 
[0;32m([0;32mstring?[0m[0;32m[0;32m [0mtest-object[0m)[0m
typeof testObject === "string"

[0;32m([0;32mstring?[0m[0;32m[0;32m [0m'[0;32myes[0m[0m[0;32m[0;32m [0m'[0;32myes[0m[0m[0;32m[0;32m [0m'[0;32myes[0m[0m)[0m
(typeof "yes" === "string" && typeof "yes" === "string" && typeof "yes" === "string")


name: macro core/[0;32mfunction?[0m
description: returns true if all of the `things` are functions
arguments: [0;32m([0;32m...[0;32mthings[0m[0m)[0m
examples: 
[0;32m([0;32mfunction?[0m[0;32m[0;32m [0mfn[0m)[0m
typeof fn === "function"

[0;32m([0;32mfunction?[0m[0;32m[0;32m [0merr[0m[0;32m[0;32m [0mcb[0m)[0m
(typeof err === "function" && typeof cb === "function")


name: macro core/[0;32mundefined?[0m
description: returns true if all of the `things` are undefined, as tested
with `typeof`, not equality with literal undefined. This is the
inverse of `defined?`
arguments: [0;32m([0;32m...[0;32mthings[0m[0m)[0m
examples: 
[0;32m([0;32mundefined?[0m[0;32m[0;32m [0margument[0m)[0m
typeof argument === "undefined"

[0;32m([0;32mundefined?[0m[0;32m[0;32m [0m1[0m[0;32m[0;32m [0m2[0m[0;32m[0;32m [0mundefined[0m)[0m
(typeof 1 === "undefined" && typeof 2 === "undefined" && typeof undefined === "undefined")


name: macro core/[0;32mdefined?[0m
description: returns true if none of the `things` are undefined, as tested
with `typeof`. This is the inverse of `defined?`
arguments: [0;32m([0;32m...[0;32mthings[0m[0m)[0m
examples: 
[0;32m([0;32mdefined?[0m[0;32m[0;32m [0mvariable[0m)[0m
typeof variable !== "undefined"

[0;32m([0;32mdefined?[0m[0;32m[0;32m [0mvar1[0m[0;32m[0;32m [0mvar2[0m[0;32m[0;32m [0mvar3[0m)[0m
(typeof var1 !== "undefined" && typeof var2 !== "undefined" && typeof var3 !== "undefined")


name: macro core/[0;32mnumber?[0m
description: returns true if all of the `things` are numbers, as tested
with `typeof`
arguments: [0;32m([0;32m...[0;32mthings[0m[0m)[0m
examples: 
[0;32m([0;32mnumber?[0m[0;32m[0;32m [0m1[0m)[0m
typeof 1 === "number"

[0;32m([0;32mnumber?[0m[0;32m[0;32m [0m1[0m[0;32m[0;32m [0m2[0m[0;32m[0;32m [0m3[0m)[0m
(typeof 1 === "number" && typeof 2 === "number" && typeof 3 === "number")


name: macro core/[0;32mpipe[0m
description: inserts the result of each subsequent call in `calls` as the
second argument to the next macro. This is very much akin to clojure's thread-first arrow or elixir's pipe operator
references:
https://clojuredocs.org/clojure.core/-%3E
http://elixir-lang.org/docs/v1.0/elixir/Kernel.html#|>/2
arguments: [0;32m([0;32m...[0;32mcalls[0m[0m)[0m
examples: 
[0;32m([0;32mpipe[0m[0;32m[0;32m [0m"a b c d"[0m[0;32m[0;32m
[0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m.[0;32mto-upper-case[0m[0m[0;32m[0;32m
[0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m([0;32m.[0;32mreplace[0m[0m[0;32m[0;32m [0m"A"[0m[0;32m[0;32m [0m"X"[0m)[0m[0;32m[0;32m
[0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m([0;32m.[0;32msplit[0m[0m[0;32m[0;32m [0m" "[0m)[0m[0;32m[0;32m
[0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0mfirst[0m[0;32m[0;32m
[0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m([0;32mconcat[0m[0;32m[0;32m [0m" marks the spot"[0m)[0m)[0m
("a b c d".toUpperCase().replace("A", "X").split(" ")[0] + " marks the spot")

[0;32m([0;32mpipe[0m[0;32m[0;32m [0m"{\"a\": {\"b\": [ 1, 2, 3 ]}}"[0m[0;32m[0;32m
[0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0mJSON.parse[0m[0;32m[0;32m
[0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m([0;32mget[0m[0;32m[0;32m [0m'[0;32ma[0m[0m)[0m[0;32m[0;32m
[0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0mJSON.stringify[0m)[0m
JSON.stringify(JSON.parse("{\"a\": {\"b\": [ 1, 2, 3 ]}}").a)


name: macro core/[0;32mcomment[0m
description: inserts `contents` transpiled to javascript as a comment in the
output file, removing it from execution.
arguments: [0;32m([0;32m...[0;32mcontents[0m[0m)[0m
examples: 
[0;32m([0;32mcomment[0m[0;32m[0;32m [0m([0;32mscoped[0m[0;32m[0;32m [0m1[0m)[0m)[0m
// (function() {
//   /* /Users/jbr/code/sibilant-clean/include/macros.sibilant:362:23 */
// 
//   return 1;
// }).call(this)


name: macro core/[0;32marray?[0m
description: returns true if `thing` is an array in javascript. aliased as
`list?`.
arguments: [0;32m([0;32mthing[0m)[0m
examples: 
[0;32m([0;32marray?[0m[0;32m[0;32m [0marr[0m)[0m
((arr) && typeof (arr) === "object" && (arr).constructor.name === "Array")


name: macro core/[0;32mwhen[0m
description: evaluates statements in `body` if `condition` is true. `body`
      is `scoped` in a self-evaluating function to support having a
      return value from the if statement.
arguments: [0;32m([0;32mcondition[0m[0;32m[0;32m [0m...[0;32mbody[0m[0m)[0m
examples: 
[0;32m([0;32mwhen[0m[0;32m[0;32m [0m([0;32m<[0m[0;32m[0;32m [0m3[0m[0;32m[0;32m [0mi[0m)[0m[0;32m[0;32m [0m([0;32mconsole.log[0m[0;32m[0;32m [0mi[0m)[0m[0;32m[0;32m [0m([0;32mget[0m[0;32m[0;32m [0marr[0m[0;32m[0;32m [0mi[0m)[0m)[0m
(function() {
  if (3 < i) {
    console.log(i);
    return arr[i];
  }
}).call(this)


name: macro core/[0;32mnot[0m
description: boolean negation, as determined by javascript truthiness
references:
https://developer.mozilla.org/en-US/docs/Glossary/Truthy
https://developer.mozilla.org/en-US/docs/Glossary/Falsy
arguments: [0;32m([0;32mexp[0m)[0m
examples: 
[0;32m([0;32mnot[0m[0;32m[0;32m [0m([0;32mstring?[0m[0;32m[0;32m [0m1[0m)[0m)[0m
!(typeof 1 === "string")


name: macro core/[0;32munless[0m
description: evaluates statements in `body` if `condition` is falsy. `body`
      is `scoped` in a self-evaluating function to support having a
      return value from the if statement.
arguments: [0;32m([0;32mcondition[0m[0;32m[0;32m [0m...[0;32mbody[0m[0m)[0m
examples: 
[0;32m([0;32munless[0m[0;32m[0;32m [0m([0;32m<[0m[0;32m[0;32m [0m3[0m[0;32m[0;32m [0mi[0m)[0m[0;32m[0;32m [0m([0;32mconsole.log[0m[0;32m[0;32m [0mi[0m)[0m[0;32m[0;32m [0m([0;32mget[0m[0;32m[0;32m [0marr[0m[0;32m[0;32m [0mi[0m)[0m)[0m
(function() {
  if (!(3 < i)) {
    console.log(i);
    return arr[i];
  }
}).call(this)


name: macro core/[0;32massign[0m
description: assigns alternating keys and values in `args`.  This works much
like `var`, but without the var keyword.  It is important to
understand variable scope in javascript in order to use this macro safely.
note that this macro does not currently support destructuring like `var` does
arguments: [0;32m([0;32m...[0;32margs[0m[0m)[0m
examples: 
[0;32m([0;32massign[0m[0;32m[0;32m [0ma[0m[0;32m[0;32m [0m1[0m)[0m
a = 1;

[0;32m([0;32massign[0m[0;32m[0;32m [0ma[0m[0;32m[0;32m [0m1[0m[0;32m[0;32m [0mb[0m[0;32m[0;32m [0m2[0m)[0m
a = 1;
b = 2;


name: macro core/[0;32mlog-pretty[0m
description: outputs debug information about `arg`.  If `label` is
omitted (only one argument is provided), the name of the variable or
expression of that first expression will be logged. Aliased as `pretty-log`
arguments: [0;32m([0;32mlabel[0m[0;32m[0;32m [0marg[0m)[0m
examples: 
[0;32m([0;32mlog-pretty[0m[0;32m[0;32m [0m'[0;32mmy-label[0m[0m[0;32m[0;32m [0mvalue[0m)[0m
console.log(("/Users/jbr/code/sibilant-clean/include/macros.sibilant:446" + " " + "myLabel" + " = " + prettify(value)))

[0;32m([0;32mlog-pretty[0m[0;32m[0;32m [0m([0;32m+[0m[0;32m[0;32m [0m1[0m[0;32m[0;32m [0m2[0m)[0m)[0m
console.log(("/Users/jbr/code/sibilant-clean/include/macros.sibilant:447" + " " + "(+ 1 2)" + " = " + prettify((1 + 2))))


name: macro core/[0;32meach[0m
description: iterates over `array`, evaluating `body` once for each value in
`array`.  If `item` is a literal name, that will be the variable into
which the `array` element is yielded (current value).  If `item` is an expression, it
can contain the current value, the index, and the `array`.
references:
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach
arguments: [0;32m([0;32mitem[0m[0;32m[0;32m [0marray[0m[0;32m[0;32m [0m...[0;32mbody[0m[0m)[0m
examples: 
[0;32m([0;32meach[0m[0;32m[0;32m [0mnumber[0m[0;32m[0;32m [0m[[0;32m[0;32m [0m1[0m[0;32m[0;32m [0m2[0m[0;32m[0;32m [0m3[0m[0;32m [0m][0m[0;32m[0;32m [0m([0;32mconsole.log[0m[0;32m[0;32m [0mnumber[0m)[0m)[0m
[ 1, 2, 3 ].forEach((function(number) {
  /* /Users/jbr/code/sibilant-clean/include/macros.sibilant:461:17 */

  return console.log(number);
}))

[0;32m([0;32meach[0m[0;32m[0;32m [0m([0;32mletter[0m[0;32m[0;32m [0mindex[0m)[0m[0;32m[0;32m [0m`[0;32m[[0;32m[0;32m [0ma[0m[0;32m[0;32m [0mb[0m[0;32m[0;32m [0mc[0m[0;32m[0;32m [0md[0m[0;32m [0m][0m[0m[0;32m[0;32m
[0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m([0;32mset[0m[0;32m[0;32m [0mletters[0m[0;32m[0;32m [0mletter[0m[0;32m[0;32m [0mindex[0m)[0m[0;32m[0;32m
[0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m([0;32mpipe[0m[0;32m[0;32m [0mletter[0m[0;32m[0;32m [0m([0;32m.[0;32mto-upper-case[0m[0m)[0m[0;32m[0;32m [0m([0;32mconsole.log[0m)[0m)[0m)[0m
[ "a", "b", "c", "d" ].forEach((function(letter, index) {
  /* /Users/jbr/code/sibilant-clean/include/macros.sibilant:462:17 */

  letters[letter] = index;
  return console.log(letter.toUpperCase());
}))


name: macro core/[0;32mthrow[0m
description: throws a new javascript error with arguments as the string
arguments: [0;32m([0;32merror[0m)[0m
examples: 
[0;32m([0;32mthrow[0m[0;32m[0;32m [0m([0;32mnew[0m[0;32m[0;32m [0mError[0m[0;32m[0;32m [0m"could not find matching socks"[0m)[0m)[0m
throw (new Error("could not find matching socks"))


name: macro core/[0;32mas-boolean[0m
description: double-negates `expr`, converting it to a boolean
arguments: [0;32m([0;32mexpr[0m)[0m
examples: 
[0;32m([0;32mas-boolean[0m[0;32m[0;32m [0m0[0m)[0m
(!!(0))

[0;32m([0;32mas-boolean[0m[0;32m[0;32m [0mtrue[0m)[0m
(!!(true))


name: macro core/[0;32mwhile[0m
description: evaluates the `body` as long as `condition` is truthy,
returning the value of the last expression in `block` when `condition`
ceases to be truthy. See also `until`
arguments: [0;32m([0;32mcondition[0m[0;32m[0;32m [0m...[0;32mbody[0m[0m)[0m
examples: 
[0;32m([0;32mwhile[0m[0;32m[0;32m [0m([0;32m>[0m[0;32m[0;32m [0m5[0m[0;32m[0;32m [0mi[0m)[0m[0;32m[0;32m [0m([0;32mconsole.log[0m[0;32m[0;32m [0mi[0m)[0m[0;32m[0;32m [0m([0;32mdecr[0m[0;32m[0;32m [0mi[0m)[0m)[0m
(function() {
  var $_symbol1_$ = undefined;
  while (5 > i) {
    $_symbol1_$ = (function() {
      console.log(i);
      return ((i)--);
    }).call(this);
  };
  return $_symbol1_$;
}).call(this)


name: macro core/[0;32muntil[0m
description: evaluates the `body` as long as `condition` is falsy,
returning the value of the last expression in `block` when `condition`
ceases to be falsy. See also `while`
arguments: [0;32m([0;32mcondition[0m[0;32m[0;32m [0m...[0;32mbody[0m[0m)[0m
examples: 
[0;32m([0;32muntil[0m[0;32m[0;32m [0m([0;32m<[0m[0;32m[0;32m [0m5[0m[0;32m[0;32m [0mi[0m)[0m[0;32m[0;32m [0m([0;32mconsole.log[0m[0;32m[0;32m [0mi[0m)[0m[0;32m[0;32m [0m([0;32mincr[0m[0;32m[0;32m [0mi[0m)[0m)[0m
(function() {
  var $_symbol2_$ = undefined;
  while (!(5 < i)) {
    $_symbol2_$ = (function() {
      console.log(i);
      return ((i)++);
    }).call(this);
  };
  return $_symbol2_$;
}).call(this)


name: macro core/[0;32mmatch?[0m
description: returns true if the `string` matches `regexp`.  Deprecated in
      preference to `.match` (`send` dot-invocation).
arguments: [0;32m([0;32mregexp[0m[0;32m[0;32m [0mstring[0m)[0m
examples: 
[0;32m([0;32mmatch?[0m[0;32m[0;32m [0m([0;32mregex[0m[0;32m[0;32m [0m"^[a-z]+$"[0m[0;32m[0;32m [0m'[0;32mi[0m[0m)[0m[0;32m[0;32m [0m'[0;32mword[0m[0m)[0m
"word".match((new RegExp("^[a-z]+$", "i")))


name: macro core/[0;32mmatch-regex?[0m
description: similar to `match?` but builds a regex out of the `pattern` and `flags`.
arguments: [0;32m([0;32mstring[0m[0;32m[0;32m [0mpattern[0m[0;32m[0;32m [0mflags[0m)[0m
examples: 
[0;32m([0;32mmatch-regex?[0m[0;32m[0;32m [0m'[0;32mword[0m[0m[0;32m[0;32m [0m"^[a-z]+$"[0m[0;32m[0;32m [0m'[0;32mi[0m[0m)[0m
"word".match((new RegExp("^[a-z]+$", "i")))


name: macro core/[0;32mreplace[0m
description: replaces the first occurance of `pattern` (as a regex) with `replacement`
arguments: [0;32m([0;32mstring[0m[0;32m[0;32m [0mpattern[0m[0;32m[0;32m [0mreplacement[0m)[0m
examples: 
[0;32m([0;32mreplace[0m[0;32m[0;32m [0m"hello world"[0m[0;32m[0;32m [0m"l+o"[0m[0;32m[0;32m [0m"y there,"[0m)[0m
"hello world".replace((new RegExp("l+o", undefined)), "y there,")


name: macro core/[0;32mreplace-all[0m
description: replaces all occurrances of `pattern` (as a regex) with `replacement`
arguments: [0;32m([0;32mstring[0m[0;32m[0;32m [0mpattern[0m[0;32m[0;32m [0mreplacement[0m)[0m
examples: 
[0;32m([0;32mreplace-all[0m[0;32m[0;32m [0m"503-555-1212"[0m[0;32m[0;32m [0m"[0-9]"[0m[0;32m[0;32m [0m"#"[0m)[0m
"503-555-1212".replace((new RegExp("[0-9]", "g")), "#")


name: macro core/[0;32mthunk[0m
description: most often called as its alias, `#>`, thunk creates a function
with no named arguments. To refer to arguments anonymously, use #n,
such as #0 for the first argument.
arguments: [0;32m([0;32m...[0;32mbody[0m[0m)[0m
examples: 
[0;32m([0;32m.[0;32mmap[0m[0m[0;32m[0;32m [0m[[0;32m[0;32m [0m1[0m[0;32m[0;32m [0m2[0m[0;32m[0;32m [0m3[0m[0;32m [0m][0m[0;32m[0;32m [0m([0;32m#>[0m[0;32m[0;32m [0m([0;32m+[0m[0;32m[0;32m [0m1[0m[0;32m[0;32m [0m#0[0m)[0m)[0m)[0m
[ 1, 2, 3 ].map((function() {
  /* /Users/jbr/code/sibilant-clean/include/macros.sibilant:603:34 */

  return (1 + arguments[0]);
}))

[0;32m([0;32mwindow.set-timeout[0m[0;32m[0;32m [0m([0;32m#>[0m[0;32m[0;32m [0m([0;32mconsole.log[0m[0;32m[0;32m [0m'[0;32mhere[0m[0m)[0m)[0m[0;32m[0;32m [0m10[0m)[0m
window.setTimeout((function() {
  /* /Users/jbr/code/sibilant-clean/include/macros.sibilant:604:38 */

  return console.log("here");
}), 10)


name: macro core/[0;32mpipe-thunk[0m
description: most often called as its alias, `#->`, pipe-thunk applies a pipe chain to the argument of a function and returns the result
arguments: [0;32m([0;32m...[0;32mcalls[0m[0m)[0m
examples: 
[0;32m([0;32m.[0;32mmap[0m[0m[0;32m[0;32m [0m`[0;32m[[0;32m[0;32m [0ma[0m[0;32m[0;32m [0mb[0m[0;32m[0;32m [0mc[0m[0;32m [0m][0m[0m[0;32m[0;32m [0m([0;32m#->[0m[0;32m[0;32m [0m([0;32m.[0;32mto-upper-case[0m[0m)[0m[0;32m[0;32m [0m([0;32mconcat[0m[0;32m[0;32m [0m" is a letter"[0m)[0m)[0m)[0m
[ "a", "b", "c" ].map((function() {
  /* /Users/jbr/code/sibilant/include/macros.sibilant:620:30 */

  return (arguments[0].toUpperCase() + " is a letter");
}))


name: macro core/[0;32mkeys[0m
description: returns the property names of `obj`.
references:
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/keys
arguments: [0;32m([0;32mobj[0m)[0m
examples: 
[0;32m([0;32mkeys[0m[0;32m[0;32m [0m{[0;32m[0;32m [0ma[0m[0;32m[0;32m [0m1[0m[0;32m[0;32m [0mb[0m[0;32m[0;32m [0m2[0m[0;32m [0m}[0m)[0m
Object.keys({
  a: 1,
  b: 2
})


name: macro core/[0;32mdelete[0m
description: uses the javascript delete keyword on any number of `objects`.
      Use in conjunction with `get` or dotted literal notation (a.b).
arguments: [0;32m([0;32m...[0;32mobjects[0m[0m)[0m
examples: 
[0;32m([0;32mdelete[0m[0;32m[0;32m [0mobject.a[0m[0;32m[0;32m [0mobject.b[0m)[0m
delete object.a;
delete object.b;

[0;32m([0;32mdelete[0m[0;32m[0;32m [0m([0;32mget[0m[0;32m[0;32m [0mobject[0m[0;32m[0;32m [0mattribute[0m)[0m[0;32m[0;32m [0m([0;32mget[0m[0;32m[0;32m [0mobject[0m[0;32m[0;32m [0m"other attribute"[0m)[0m)[0m
delete object[attribute];
delete object["other attribute"];


name: macro core/[0;32mdelete-macro[0m
description: deletes each macro name in `macro-names` from the current namespace. Use carefully
arguments: [0;32m([0;32m...[0;32mmacro-names[0m[0m)[0m
examples: 



name: macro core/[0;32mrename-macro[0m
description: moves macro from `current-macro-name` to `new-macro-name`. Use carefully
arguments: [0;32m([0;32mcurrent-macro-name[0m[0;32m[0;32m [0mnew-macro-name[0m)[0m
examples: 



name: macro core/[0;32marguments[0m
description: transforms function arguments into an array, using the Array prototype's slice
arguments: [0;32m()[0m
examples: 
[0;32m([0;32marguments[0m)[0m
(Array.prototype.slice.apply(arguments))


name: macro core/[0;32margument[0m
description: `get`s the argument at `index` in the current function context
arguments: [0;32m([0;32mindex[0m)[0m
examples: 
[0;32m([0;32margument[0m[0;32m[0;32m [0m3[0m)[0m
arguments[3]


name: macro core/[0;32meach-key[0m
description: iterates over each attribute in `obj`
arguments: [0;32m([0;32mas[0m[0;32m[0;32m [0mobj[0m[0;32m[0;32m [0m...[0;32mbody[0m[0m)[0m
examples: 
[0;32m([0;32meach-key[0m[0;32m[0;32m [0mkey[0m[0;32m[0;32m [0m{[0;32m[0;32m [0ma[0m[0;32m[0;32m [0m1[0m[0;32m[0;32m [0mb[0m[0;32m[0;32m [0m2[0m[0;32m [0m}[0m[0;32m[0;32m [0m([0;32mconsole.log[0m[0;32m[0;32m [0mkey[0m)[0m)[0m
Object.keys({
  a: 1,
  b: 2
}).forEach((function(key) {
  /* /Users/jbr/code/sibilant-clean/include/macros.sibilant:698:14 */

  return console.log(key);
}))


name: macro core/[0;32mswitch[0m
description: uses the javascript switch construction to test equality.  documentation todo: needs better description
arguments: [0;32m([0;32mobj[0m[0;32m[0;32m [0m...[0;32mcases[0m[0m)[0m
examples: 
[0;32m([0;32mswitch[0m[0;32m[0;32m [0mchar[0m[0;32m[0;32m
[0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m([0;32m'[0;32ma[0m[0m[0;32m[0;32m [0m"it was an a"[0m)[0m[0;32m[0;32m
[0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m([0;32m'[0;32mb[0m[0m[0;32m[0;32m [0m([0;32mconsole.log[0m[0;32m[0;32m [0m"found a b!"[0m)[0m[0;32m[0;32m
[0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m"it was a b"[0m)[0m[0;32m[0;32m
[0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m([0;32m[[0;32m1[0m[0;32m[0;32m [0m2[0m[0;32m[0;32m [0m3[0m[0;32m[0;32m [0m4[0m[0;32m[0;32m [0m5[0m][0m[0;32m[0;32m [0m"it was an integer from one to five"[0m)[0m[0;32m[0;32m
[0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m([0;32mdefault[0m[0;32m[0;32m [0m"not sure"[0m)[0m)[0m
(function() {
  switch(char) {
  case "a":
    return "it was an a";
  
  case "b":
    console.log("found a b!");
    return "it was a b";
  
  case 1:
  case 2:
  case 3:
  case 4:
  case 5:
    return "it was an integer from one to five";
  
  default:
    return "not sure";
  }
}).call(this)


name: macro core/[0;32mif[0m
description: tests any number of `alternating-conditions-and-branches`.  If
      an odd number of branches are supplied, the final branch is a
      default else clause.  To evaluate more than one expression as a
      branch, use the `do` macro, as shown in the examples:
arguments: [0;32m([0;32m...[0;32malternating-conditions-and-branches[0m[0m)[0m
examples: 
[0;32m([0;32mif[0m[0;32m[0;32m [0mtrue[0m[0;32m[0;32m [0m([0;32mconsole.log[0m[0;32m[0;32m [0m'[0;32mhere[0m[0m)[0m)[0m
(function() {
  if (true) {
    return console.log("here");
  }
}).call(this)

[0;32m([0;32mif[0m[0;32m[0;32m [0m([0;32m=[0m[0;32m[0;32m [0m1[0m[0;32m[0;32m [0marguments.length[0m)[0m[0;32m[0;32m [0m([0;32mconsole.log[0m[0;32m[0;32m [0m"one argument"[0m)[0m[0;32m[0;32m
[0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m([0;32m=[0m[0;32m[0;32m [0m'[0;32mblue[0m[0m[0;32m[0;32m [0mfavorite-color[0m)[0m[0;32m[0;32m [0m([0;32mconsole.log[0m[0;32m[0;32m [0m"blue"[0m)[0m[0;32m[0;32m
[0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m([0;32massign[0m[0;32m[0;32m [0mexamples[0m[0;32m[0;32m [0m'[0;32mdifficult[0m[0m)[0m)[0m
(function() {
  if (1 === arguments.length) {
    return console.log("one argument");
  } else if ("blue" === favoriteColor) {
    return console.log("blue");
  } else {
    return examples = "difficult";
  }
}).call(this)

[0;32m([0;32mif[0m[0;32m[0;32m [0m([0;32mfoo?[0m)[0m[0;32m[0;32m [0m([0;32mdo[0m[0;32m[0;32m [0m([0;32ma[0m[0;32m[0;32m [0mb[0m)[0m[0;32m[0;32m
[0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m([0;32mc[0m)[0m)[0m[0;32m[0;32m
[0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m([0;32mbar?[0m)[0m[0;32m[0;32m [0m([0;32mdo[0m[0;32m[0;32m [0m([0;32mbaz[0m)[0m[0;32m[0;32m
[0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m([0;32mwibble[0m)[0m)[0m[0;32m[0;32m
[0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m([0;32mdo[0m[0;32m[0;32m [0m([0;32md[0m[0;32m[0;32m [0me[0m)[0m[0;32m[0;32m
[0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m([0;32mconsole.log[0m[0;32m[0;32m [0m'[0;32mdefault[0m[0m)[0m)[0m)[0m
(function() {
  if (foo__QUERY()) {
    a(b);
    return c();
  } else if (bar__QUERY()) {
    baz();
    return wibble();
  } else {
    d(e);
    return console.log("default");
  }
}).call(this)


name: macro core/[0;32mchain[0m
description: similar to `pipe`, this macro allows function calls to be applied
in sequence, as is common in fluent interfaces. deprecated in preference to `pipe`
arguments: [0;32m([0;32mobject[0m[0;32m[0;32m [0m...[0;32mcalls[0m[0m)[0m
examples: 
[0;32m([0;32mchain[0m[0;32m[0;32m [0ma[0m[0;32m[0;32m [0m([0;32mb[0m[0;32m[0;32m [0mc[0m[0;32m[0;32m [0md[0m)[0m[0;32m[0;32m [0m([0;32me[0m)[0m[0;32m[0;32m [0m([0;32mf[0m[0;32m[0;32m [0mg[0m)[0m)[0m
a.b(c, d)
  .e()
  .f(g)


name: macro core/[0;32minstance-of?[0m
description: uses the javascript `instanceof` operator to check if `item` is of `type`.
arguments: [0;32m([0;32mitem[0m[0;32m[0;32m [0mtype[0m)[0m
examples: 
[0;32m([0;32minstance-of?[0m[0;32m[0;32m [0m([0;32mnew[0m[0;32m[0;32m [0mDate[0m)[0m[0;32m[0;32m [0mDate[0m)[0m
((new Date()) instanceof Date)


name: macro core/[0;32mincludes?[0m
description: returns true if `haystack` includes `needle`.  `haystack` can be a string or array/list.
arguments: [0;32m([0;32mhaystack[0m[0;32m[0;32m [0mneedle[0m)[0m
examples: 
[0;32m([0;32mincludes?[0m[0;32m[0;32m [0m'[0;32mhello[0m[0m[0;32m[0;32m [0m'[0;32mh[0m[0m)[0m
"hello".indexOf("h") !== -1

[0;32m([0;32mincludes?[0m[0;32m[0;32m [0m`[0;32m[[0;32m[0;32m [0mVeni[0m[0;32m[0;32m [0mvidi[0m[0;32m[0;32m [0mvici[0m][0m[0m[0;32m[0;32m [0m'[0;32mvidi[0m[0m)[0m
[ "Veni", "vidi", "vici" ].indexOf("vidi") !== -1


name: macro core/[0;32mexcludes?[0m
description: returns true if `haystack` does NOT include `needle`.
`haystack` can be a string or array/list
arguments: [0;32m([0;32mhaystack[0m[0;32m[0;32m [0mneedle[0m)[0m
examples: 
[0;32m([0;32mexcludes?[0m[0;32m[0;32m [0m'[0;32mhello[0m[0m[0;32m[0;32m [0m10[0m)[0m
"hello".indexOf(10) === -1

[0;32m([0;32mexcludes?[0m[0;32m[0;32m [0m`[0;32m[[0;32m[0;32m [0mVeni[0m[0;32m[0;32m [0mvidi[0m[0;32m[0;32m [0mvici[0m][0m[0m[0;32m[0;32m [0m'[0;32mattenti[0m[0m)[0m
[ "Veni", "vidi", "vici" ].indexOf("attenti") === -1


name: macro core/[0;32mexists?[0m
description: similar to the javascript truthiness predicate `as-boolean`, returns true unless the `thing` is undefined or null
arguments: [0;32m([0;32mthing[0m)[0m
examples: 
[0;32m([0;32mexists?[0m[0;32m[0;32m [0mwindow[0m)[0m
(typeof window !== "undefined" && window !== null)


name: macro core/[0;32mjoin[0m
description: combines elements of array `arr` into a string, inserting
`glue` string between each element.  if `glue` is omitted (only one
argument provided), the elements of `arr` are joined with an empty
string
arguments: [0;32m([0;32marr[0m[0;32m[0;32m [0mglue[0m)[0m
examples: 
[0;32m([0;32mjoin[0m[0;32m[0;32m [0m`[0;32m[[0;32m[0;32m [0ma[0m[0;32m[0;32m [0mfew[0m[0;32m[0;32m [0mwords[0m[0;32m [0m][0m[0m[0;32m[0;32m [0m[0;32m [0m", "[0m[0;32m [0m)[0m
[ "a", "few", "words" ].join(", ")

[0;32m([0;32mjoin[0m[0;32m[0;32m [0m`[0;32m[[0;32m[0;32m [0mseveral[0m[0;32m[0;32m [0mmore[0m[0;32m[0;32m [0mwords[0m[0;32m [0m][0m[0m)[0m
[ "several", "more", "words" ].join("")


name: macro core/[0;32mvar[0m
description: registers variables in `pairs` inside of the current scope using the javascript var keyword.
destructuring from arrays and objects is also supported, as shown in the examples
arguments: [0;32m([0;32m...[0;32mpairs[0m[0m)[0m
examples: 
[0;32m([0;32mvar[0m[0;32m[0;32m [0ma[0m[0;32m[0;32m [0m1[0m[0;32m[0;32m [0mb[0m[0;32m[0;32m [0m2[0m)[0m
var a = 1,
    b = 2;

[0;32m([0;32mvar[0m[0;32m[0;32m [0ma[0m[0;32m[0;32m [0m1[0m)[0m
var a = 1;

[0;32m([0;32mvar[0m[0;32m[0;32m [0ma[0m)[0m
var a = undefined;

[0;32m([0;32mvar[0m[0;32m[0;32m [0m{[0;32ma[0m}[0m[0;32m[0;32m [0m{[0;32ma[0m[0;32m[0;32m [0m1[0m[0;32m[0;32m [0mb[0m[0;32m[0;32m [0m2[0m}[0m[0;32m[0;32m [0mc[0m[0;32m[0;32m [0m3[0m)[0m
var $_symbol3_$ = {
  a: 1,
  b: 2
},
    a = $_symbol3_$.a,
    $_symbol3_$ = undefined,
    c = 3;

[0;32m([0;32mvar[0m[0;32m[0;32m [0ma[0m[0;32m[0;32m [0m1[0m[0;32m[0;32m [0m[[0;32mb[0m[0;32m[0;32m [0mc[0m][0m[0;32m[0;32m [0m[[0;32m2[0m[0;32m[0;32m [0m3[0m][0m)[0m
var a = 1,
    $_symbol4_$ = [ 2, 3 ],
    b = $_symbol4_$[0],
    c = $_symbol4_$[1],
    $_symbol4_$ = undefined;


name: macro core/[0;32mdefault[0m
description: sets default values for variables in current scope. `pairs` are
alternating variable names and default values
arguments: [0;32m([0;32m...[0;32mpairs[0m[0m)[0m
examples: 
[0;32m([0;32mdefault[0m[0;32m[0;32m [0ma[0m[0;32m[0;32m [0m10[0m[0;32m[0;32m [0mb[0m[0;32m[0;32m [0m20[0m)[0m
a = (typeof a !== "undefined") ? a : 10;
b = (typeof b !== "undefined") ? b : 20;


name: macro core/[0;32mhas-key?[0m
description: checks if `object` has property `key`.  returns true or false.
arguments: [0;32m([0;32mobject[0m[0;32m[0;32m [0mkey[0m)[0m
examples: 
[0;32m([0;32mhas-key?[0m[0;32m[0;32m [0mobject[0m[0;32m[0;32m [0m'[0;32ma[0m[0m)[0m
object.hasOwnProperty("a")


name: macro core/[0;32mget[0m
description: retreives object properties, potentially deeply. If more than one `keys` are provided,
`get` fetches deeply into nested objects or arrays.
When javascript dot notation can be used (`a.b = 3`), it is.
Otherwise, bracket notation is used.
arguments: [0;32m([0;32mobj[0m[0;32m[0;32m [0m...[0;32mkeys[0m[0m)[0m
examples: 
[0;32m([0;32mget[0m[0;32m[0;32m [0man-object[0m[0;32m[0;32m [0m'[0;32mstatic-attribute-name[0m[0m)[0m
anObject.staticAttributeName

[0;32m([0;32mget[0m[0;32m[0;32m [0mobject[0m[0;32m[0;32m [0mdynamic-attribute-name[0m)[0m
object[dynamicAttributeName]

[0;32m([0;32mget[0m[0;32m[0;32m [0mobject[0m[0;32m[0;32m [0m"these attributes"[0m[0;32m[0;32m [0m"can't be dotted"[0m)[0m
object["these attributes"]["can't be dotted"]

[0;32m([0;32mget[0m[0;32m[0;32m [0marray[0m[0;32m[0;32m [0m0[0m)[0m
array[0]

[0;32m([0;32mget[0m[0;32m[0;32m [0mobject[0m[0;32m[0;32m [0m'[0;32ma[0m[0m[0;32m[0;32m [0m'[0;32mb[0m[0m[0;32m[0;32m [0mc[0m)[0m
object.a.b[c]

[0;32m([0;32mget[0m[0;32m[0;32m [0marray[0m[0;32m[0;32m [0m0[0m[0;32m[0;32m [0m1[0m[0;32m[0;32m [0m2[0m)[0m
array[0][1][2]


name: macro core/[0;32mset[0m
description: assigns object properties to `arr` in pairs, alternating between keys and values.
When javascript dot notation can be used (`a.b = 3`), it is.  Otherwise, bracket notation is used
arguments: [0;32m([0;32marr[0m[0;32m[0;32m [0m...[0;32mkv-pairs[0m[0m)[0m
examples: 
[0;32m([0;32mset[0m[0;32m[0;32m [0man-object[0m[0;32m[0;32m [0m'[0;32mstatic-attribute-name[0m[0m[0;32m[0;32m [0m'[0;32mvalue[0m[0m)[0m
anObject.staticAttributeName = "value";

[0;32m([0;32mset[0m[0;32m[0;32m [0mobject[0m[0;32m[0;32m [0mdynamic-attribute-name[0m[0;32m[0;32m [0m"key name determined at runtime"[0m)[0m
object[dynamicAttributeName] = "key name determined at runtime";

[0;32m([0;32mset[0m[0;32m[0;32m [0marray[0m[0;32m[0;32m [0m0[0m[0;32m[0;32m [0m"first element of array"[0m)[0m
array[0] = "first element of array";

[0;32m([0;32mset[0m[0;32m[0;32m [0mobject[0m[0;32m[0;32m [0m"can't be dotted"[0m[0;32m[0;32m [0m'[0;32mvalue[0m[0m)[0m
object["can't be dotted"] = "value";

[0;32m([0;32mset[0m[0;32m[0;32m [0mobject[0m[0;32m[0;32m [0m'[0;32mfirst-attribute[0m[0m[0;32m[0;32m [0m'[0;32mfirst-value[0m[0m[0;32m[0;32m
[0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m'[0;32msecond-attribute[0m[0m[0;32m[0;32m [0m'[0;32msecond-value[0m[0m)[0m
object.firstAttribute = "firstValue";
object.secondAttribute = "secondValue";


name: macro core/[0;32mlower-case?[0m
description: checks if a string is identical to the lower-cased version of itself
arguments: [0;32m([0;32mstr[0m)[0m
examples: 
[0;32m([0;32mlower-case?[0m[0;32m[0;32m [0m"abc"[0m)[0m
"abc".toLowerCase() === "abc"


name: macro core/[0;32mupper-case?[0m
description: checks if a string is identical to the upper-cased version of itself
arguments: [0;32m([0;32mstr[0m)[0m
examples: 
[0;32m([0;32mlower-case?[0m[0;32m[0;32m [0m"abc"[0m)[0m
"abc".toLowerCase() === "abc"


name: macro core/[0;32mternary[0m
description: the simplest way to conditionally execute code.
arguments: [0;32m([0;32mcond[0m[0;32m[0;32m [0mif-true[0m[0;32m[0;32m [0mif-false[0m)[0m
examples: 
[0;32m([0;32mternary[0m[0;32m[0;32m [0m([0;32m<[0m[0;32m[0;32m [0m50[0m[0;32m[0;32m [0m100[0m)[0m[0;32m[0;32m
[0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m"fifty is less than 100"[0m[0;32m[0;32m
[0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m"fifty is more than 100"[0m)[0m
(50 < 100) ? "fifty is less than 100" : "fifty is more than 100"


name: macro core/[0;32malias-macro[0m
description: stores a duplicate copy of `current-macro-name` as
`new-macro-name` in current namespace.  No output.
arguments: [0;32m([0;32mcurrent-macro-name[0m[0;32m[0;32m [0mnew-macro-name[0m)[0m
examples: 



name: macro core/[0;32msend[0m
description: calls the `method` on `object` as a function with `args` as the arguments
arguments: [0;32m([0;32mobject[0m[0;32m[0;32m [0mmethod[0m[0;32m[0;32m [0m...[0;32margs[0m[0m)[0m
examples: 
[0;32m([0;32msend[0m[0;32m[0;32m [0mobject[0m[0;32m[0;32m [0mmethod[0m[0;32m[0;32m [0mfirst-argument[0m[0;32m[0;32m [0msecond-argument[0m[0;32m[0;32m [0mthird-argument[0m)[0m
object.method(firstArgument, secondArgument, thirdArgument)


name: macro core/[0;32mapply[0m
description: calls the function `fn` with arguments passed as an array in `arglist`
arguments: [0;32m([0;32mfn[0m[0;32m[0;32m [0marglist[0m)[0m
examples: 
[0;32m([0;32mapply[0m[0;32m[0;32m [0mmy-function[0m[0;32m[0;32m [0m[[0;32m[0;32m [0mfirst-arg[0m[0;32m[0;32m [0msecond-arg[0m[0;32m[0;32m [0mthird-arg[0m[0;32m [0m][0m)[0m
myFunction.apply(this, [ firstArg, secondArg, thirdArg ])


name: macro core/[0;32mcons[0m
description: builds an array with `first` as the zeroth index and the
elements provided by array `rest` as the subsequent elements, as
siblings with `first`.  deprecated
arguments: [0;32m([0;32mfirst[0m[0;32m[0;32m [0mrest[0m)[0m
examples: 
[0;32m([0;32mcons[0m[0;32m[0;32m [0m1[0m[0;32m[0;32m [0m[[0;32m[0;32m [0m2[0m[0;32m[0;32m [0m3[0m[0;32m[0;32m [0m4[0m[0;32m [0m][0m)[0m
[ 1 ].concat([ 2, 3, 4 ])


name: macro core/[0;32mappend[0m
description: adds `additional` elements onto the right-side (tail) of `list`. deprecated
arguments: [0;32m([0;32mlist[0m[0;32m[0;32m [0m...[0;32madditional[0m[0m)[0m
examples: 
[0;32m([0;32mappend[0m[0;32m[0;32m [0m[[0;32m[0;32m [0m1[0m[0;32m[0;32m [0m2[0m[0;32m[0;32m [0m3[0m[0;32m [0m][0m[0;32m[0;32m [0m4[0m[0;32m[0;32m [0m5[0m[0;32m[0;32m [0m6[0m)[0m
[ 1, 2, 3 ].concat([ 4, 5, 6 ])


name: macro core/[0;32mlength[0m
description: fetches length attribute from `arr`
arguments: [0;32m([0;32marr[0m)[0m
examples: 
[0;32m([0;32mlength[0m[0;32m[0;32m [0m[[0;32m[0;32m [0m1[0m[0;32m[0;32m [0m2[0m[0;32m[0;32m [0m3[0m[0;32m [0m][0m)[0m
[ 1, 2, 3 ].length


name: macro core/[0;32mscoped[0m
description: executes the `body` inside of a self-executing function. The
last statement/expression of the body is returned.
arguments: [0;32m([0;32m...[0;32mbody[0m[0m)[0m
examples: 
[0;32m([0;32mscoped[0m[0;32m[0;32m [0mtrue[0m)[0m
(function() {
  /* /Users/jbr/code/sibilant/include/macros.sibilant:100:16 */

  return true;
}).call(this)

[0;32m([0;32mscoped[0m[0;32m[0;32m [0m([0;32mvar[0m[0;32m[0;32m [0ma[0m[0;32m[0;32m [0m1[0m)[0m[0;32m[0;32m [0m([0;32m+[0m[0;32m[0;32m [0ma[0m[0;32m[0;32m [0m2[0m)[0m)[0m
(function() {
  /* /Users/jbr/code/sibilant/include/macros.sibilant:100:30 */

  var a = 1;
  return (a + 2);
}).call(this)


name: macro core/[0;32mfirst[0m
description: fetches the first element from `arr`
arguments: [0;32m([0;32marr[0m)[0m
examples: 
[0;32m([0;32m[0;32m [0mfirst[0m[0;32m[0;32m [0mmy-array[0m)[0m
myArray[0]


name: macro core/[0;32msecond[0m
description: fetches the second element from `arr`
arguments: [0;32m([0;32marr[0m)[0m
examples: 
[0;32m([0;32m[0;32m [0msecond[0m[0;32m[0;32m [0mmy-array[0m)[0m
myArray[1]


name: macro core/[0;32mthird[0m
description: fetches the third element from `arr`
arguments: [0;32m([0;32marr[0m)[0m
examples: 
[0;32m([0;32m[0;32m [0mthird[0m[0;32m[0;32m [0mmy-array[0m)[0m
myArray[2]


name: macro core/[0;32mfourth[0m
description: fetches the fourth element from `arr`
arguments: [0;32m([0;32marr[0m)[0m
examples: 
[0;32m([0;32m[0;32m [0mfourth[0m[0;32m[0;32m [0mmy-array[0m)[0m
myArray[3]


name: macro core/[0;32mfifth[0m
description: fetches the fifth element from `arr`
arguments: [0;32m([0;32marr[0m)[0m
examples: 
[0;32m([0;32m[0;32m [0mfifth[0m[0;32m[0;32m [0mmy-array[0m)[0m
myArray[4]


name: macro core/[0;32msixth[0m
description: fetches the sixth element from `arr`
arguments: [0;32m([0;32marr[0m)[0m
examples: 
[0;32m([0;32m[0;32m [0msixth[0m[0;32m[0;32m [0mmy-array[0m)[0m
myArray[5]


name: macro core/[0;32mseventh[0m
description: fetches the seventh element from `arr`
arguments: [0;32m([0;32marr[0m)[0m
examples: 
[0;32m([0;32m[0;32m [0mseventh[0m[0;32m[0;32m [0mmy-array[0m)[0m
myArray[6]


name: macro core/[0;32meighth[0m
description: fetches the eighth element from `arr`
arguments: [0;32m([0;32marr[0m)[0m
examples: 
[0;32m([0;32m[0;32m [0meighth[0m[0;32m[0;32m [0mmy-array[0m)[0m
myArray[7]


name: macro core/[0;32mninth[0m
description: fetches the ninth element from `arr`
arguments: [0;32m([0;32marr[0m)[0m
examples: 
[0;32m([0;32m[0;32m [0mninth[0m[0;32m[0;32m [0mmy-array[0m)[0m
myArray[8]


name: macro core/[0;32mrest[0m
description: fetches all but the first item of `arr`
arguments: [0;32m([0;32marr[0m)[0m
examples: 
[0;32m([0;32mrest[0m[0;32m[0;32m [0m[[0;32m[0;32m [0m1[0m[0;32m[0;32m [0m2[0m[0;32m[0;32m [0m3[0m[0;32m [0m][0m)[0m
[ 1, 2, 3 ].slice(1)


name: macro core/[0;32mlast[0m
description: fetches just the last element of `arr` by slicing.
arguments: [0;32m([0;32marr[0m)[0m
examples: 
[0;32m([0;32mlast[0m[0;32m[0;32m [0m[[0;32m[0;32m [0m1[0m[0;32m[0;32m [0m2[0m[0;32m[0;32m [0m3[0m[0;32m [0m][0m)[0m
[ 1, 2, 3 ].slice(-1)[0]


name: macro core/[0;32m+[0m
description: adds `args` using the javascript `+` operator. Since javascript
overloads this for string concatenation, this macro can be used for
this as well.
arguments: [0;32m([0;32m...[0;32margs[0m[0m)[0m
examples: 
[0;32m([0;32m+[0m[0;32m[0;32m [0m1[0m[0;32m[0;32m [0m2[0m[0;32m[0;32m [0m3[0m)[0m
(1 + 2 + 3)

[0;32m([0;32m+[0m[0;32m[0;32m [0m'[0;32mhello[0m[0m[0;32m[0;32m [0m'[0;32mworld[0m[0m)[0m
("hello" + "world")


name: macro core/[0;32m-[0m
description: subtracts each subsequent element of `args`
arguments: [0;32m([0;32m...[0;32margs[0m[0m)[0m
examples: 
[0;32m([0;32m-[0m[0;32m[0;32m [0m2[0m[0;32m[0;32m [0m1[0m)[0m
(2 - 1)

[0;32m([0;32m-[0m[0;32m[0;32m [0m10[0m[0;32m[0;32m [0m5[0m[0;32m[0;32m [0m1[0m)[0m
(10 - 5 - 1)


name: macro core/[0;32m*[0m
description: multiplies elements of `args`
arguments: [0;32m([0;32m...[0;32margs[0m[0m)[0m
examples: 
[0;32m([0;32m*[0m[0;32m[0;32m [0m3[0m[0;32m[0;32m [0m4[0m[0;32m[0;32m [0m5[0m)[0m
(3 * 4 * 5)


name: macro core/[0;32m/[0m
description: divides each subsequent element of `args`
arguments: [0;32m([0;32m...[0;32margs[0m[0m)[0m
examples: 
[0;32m([0;32m/[0m[0;32m[0;32m [0m1[0m[0;32m[0;32m [0m2[0m)[0m
(1 / 2)

[0;32m([0;32m/[0m[0;32m[0;32m [0m1[0m[0;32m[0;32m [0m2[0m[0;32m[0;32m [0m3[0m)[0m
(1 / 2 / 3)


name: macro core/[0;32mor[0m
description: short circuiting operator returns the first element of `args` that evaluates to be truthy
arguments: [0;32m([0;32m...[0;32margs[0m[0m)[0m
examples: 
[0;32m([0;32mor[0m[0;32m[0;32m [0m([0;32m=[0m[0;32m[0;32m [0m1[0m[0;32m[0;32m [0m2[0m)[0m[0;32m[0;32m [0m([0;32mstring?[0m[0;32m[0;32m [0m[][0m)[0m[0;32m[0;32m [0m"one is not two and an array is not a string"[0m)[0m
(1 === 2 || typeof [] === "string" || "one is not two and an array is not a string")


name: macro core/[0;32mand[0m
description: returns the last element if all elements of `args` are truthy, or the
first non-truthy element if it exists
arguments: [0;32m([0;32m...[0;32margs[0m[0m)[0m
examples: 
[0;32m([0;32mand[0m[0;32m[0;32m [0m([0;32mstring?[0m[0;32m[0;32m [0m"string"[0m)[0m[0;32m[0;32m [0m([0;32mnumber?[0m[0;32m[0;32m [0m10[0m)[0m[0;32m[0;32m [0m([0;32m=[0m[0;32m[0;32m [0m1[0m[0;32m[0;32m [0m1[0m)[0m)[0m
(typeof "string" === "string" && typeof 10 === "number" && 1 === 1)


name: macro core/[0;32mmod[0m
description: modulus operator
arguments: [0;32m([0;32m...[0;32margs[0m[0m)[0m
examples: 
[0;32m([0;32mmod[0m[0;32m[0;32m [0m10[0m[0;32m[0;32m [0m2[0m)[0m
(10 % 2)


name: macro core/[0;32m>[0m
description: compares `args` from left to right, returning true if each element is greater than than the next
arguments: [0;32m([0;32m...[0;32margs[0m[0m)[0m
examples: 
[0;32m([0;32m[0;32m [0m>[0m[0;32m[0;32m [0ma[0m[0;32m[0;32m [0mb[0m[0;32m[0;32m [0mc[0m)[0m
(a > b && b > c)

[0;32m([1;33m[0;32m [0m>[0m[0;32m[0;32m [0ma[0m[0;32m[0;32m [0mb[0m)[0m
a > b


name: macro core/[0;32m<[0m
description: compares `args` from left to right, returning true if each element is less than than the next
arguments: [0;32m([0;32m...[0;32margs[0m[0m)[0m
examples: 
[0;32m([0;32m[0;32m [0m<[0m[0;32m[0;32m [0ma[0m[0;32m[0;32m [0mb[0m[0;32m[0;32m [0mc[0m)[0m
(a < b && b < c)

[0;32m([1;33m[0;32m [0m<[0m[0;32m[0;32m [0ma[0m[0;32m[0;32m [0mb[0m)[0m
a < b


name: macro core/[0;32m<=[0m
description: compares `args` from left to right, returning true if each element is less than or equal than the next
arguments: [0;32m([0;32m...[0;32margs[0m[0m)[0m
examples: 
[0;32m([0;32m[0;32m [0m<=[0m[0;32m[0;32m [0ma[0m[0;32m[0;32m [0mb[0m[0;32m[0;32m [0mc[0m)[0m
(a <= b && b <= c)

[0;32m([1;33m[0;32m [0m<=[0m[0;32m[0;32m [0ma[0m[0;32m[0;32m [0mb[0m)[0m
a <= b


name: macro core/[0;32m>=[0m
description: compares `args` from left to right, returning true if each element is greater than or equal than the next
arguments: [0;32m([0;32m...[0;32margs[0m[0m)[0m
examples: 
[0;32m([0;32m[0;32m [0m>=[0m[0;32m[0;32m [0ma[0m[0;32m[0;32m [0mb[0m[0;32m[0;32m [0mc[0m)[0m
(a >= b && b >= c)

[0;32m([1;33m[0;32m [0m>=[0m[0;32m[0;32m [0ma[0m[0;32m[0;32m [0mb[0m)[0m
a >= b


name: macro core/[0;32m!=[0m
description: compares `args` from left to right, returning true if each element is not equal (using threequals) than the next
arguments: [0;32m([0;32m...[0;32margs[0m[0m)[0m
examples: 
[0;32m([0;32m[0;32m [0m!=[0m[0;32m[0;32m [0ma[0m[0;32m[0;32m [0mb[0m[0;32m[0;32m [0mc[0m)[0m
(a !== b && b !== c)

[0;32m([1;33m[0;32m [0m!=[0m[0;32m[0;32m [0ma[0m[0;32m[0;32m [0mb[0m)[0m
a !== b


name: macro core/[0;32m=[0m
description: compares `args` from left to right, returning true if each element is equal (using threequals) than the next
arguments: [0;32m([0;32m...[0;32margs[0m[0m)[0m
examples: 
[0;32m([0;32m[0;32m [0m=[0m[0;32m[0;32m [0ma[0m[0;32m[0;32m [0mb[0m[0;32m[0;32m [0mc[0m)[0m
(a === b && b === c)

[0;32m([1;33m[0;32m [0m=[0m[0;32m[0;32m [0ma[0m[0;32m[0;32m [0mb[0m)[0m
a === b


name: macro core/[0;32mincr-by[0m
description: increments `item` by `increment`
arguments: [0;32m([0;32mitem[0m[0;32m[0;32m [0mincrement[0m)[0m
examples: 
[0;32m([0;32mincr-by[0m[0;32m[0;32m [0mn[0m[0;32m[0;32m [0m5[0m)[0m
n += 5


name: macro core/[0;32mincr[0m
description: increments item by 1
arguments: [0;32m([0;32mitem[0m)[0m
examples: 
[0;32m([0;32mincr[0m[0;32m[0;32m [0mi[0m)[0m
((i)++)


name: macro core/[0;32mdecr[0m
description: decrements item by 1
arguments: [0;32m([0;32mitem[0m)[0m
examples: 
[0;32m([0;32mdecr[0m[0;32m[0;32m [0mi[0m)[0m
((i)--)


name: macro core/[0;32mnew[0m
description: uses the javascript new keyword to construct an object using
      `constructor`, with `args` passed as arguments to the constructor.
arguments: [0;32m([0;32mconstructor[0m[0;32m[0;32m [0m...[0;32margs[0m[0m)[0m
examples: 
[0;32m([0;32mnew[0m[0;32m[0;32m [0mRegExp[0m[0;32m[0;32m [0m"hello"[0m[0;32m[0;32m [0m'[0;32mg[0m[0m)[0m
(new RegExp("hello", "g"))


name: macro core/[0;32mregex[0m
description: builds a regex using `pattern` and `flags` as arguments to the RegExp constructor
arguments: [0;32m([0;32mpattern[0m[0;32m[0;32m [0mflags[0m)[0m
examples: 
[0;32m([0;32mregex[0m[0;32m[0;32m [0m"[0-9]+"[0m)[0m
(new RegExp("[0-9]+", undefined))

[0;32m([0;32mregex[0m[0;32m[0;32m [0m"0x[0-9a-f]+"[0m[0;32m[0;32m [0m'[0;32mi[0m[0m)[0m
(new RegExp("0x[0-9a-f]+", "i"))


name: macro core/[0;32mtimestamp[0m
description: inserts compilation timestamp as a string. deprecated.
arguments: [0;32m()[0m
examples: 
[0;32m([0;32mtimestamp[0m)[0m
"Mon Dec 21 2015 19:42:10 GMT-0800 (PST)"


name: macro core/[0;32mzero?[0m
description: predicate to test for equality with zero
arguments: [0;32m([0;32mitem[0m)[0m
examples: 
[0;32m([0;32mzero?[0m[0;32m[0;32m [0mn[0m)[0m
n === 0


name: macro core/[0;32mempty?[0m
description: returns true if the array `arr` has a length of zero
arguments: [0;32m([0;32marr[0m)[0m
examples: 
[0;32m([0;32mempty?[0m[0;32m[0;32m [0m[][0m)[0m
0 === [].length


name: macro core/[0;32modd?[0m
description: returns true if `number` is not divisible by 2
arguments: [0;32m([0;32mnumber[0m)[0m
examples: 
[0;32m([0;32modd?[0m[0;32m[0;32m [0m5[0m)[0m
1 === (5 % 2)


name: macro core/[0;32meven?[0m
description: returns true if `number` is divisible by 2 with no remainder
arguments: [0;32m([0;32mnumber[0m)[0m
examples: 
[0;32m([0;32meven?[0m[0;32m[0;32m [0m10[0m)[0m
0 === (10 % 2)


name: macro core/[0;32mtypeof[0m
description: exposes the javascript typeof operator. most often, predicates
such as `string?`, `function?`, `number?`, etc are preferred.
arguments: [0;32m([0;32mthing[0m)[0m
examples: 
[0;32m([0;32mtypeof[0m[0;32m[0;32m [0m5[0m)[0m
typeof 5


name: macro core/[0;32mstring?[0m
description: returns true if all of the `things` are javascript strings
arguments: [0;32m([0;32m...[0;32mthings[0m[0m)[0m
examples: 
[0;32m([0;32mstring?[0m[0;32m[0;32m [0mtest-object[0m)[0m
typeof testObject === "string"

[0;32m([0;32mstring?[0m[0;32m[0;32m [0m'[0;32myes[0m[0m[0;32m[0;32m [0m'[0;32myes[0m[0m[0;32m[0;32m [0m'[0;32myes[0m[0m)[0m
(typeof "yes" === "string" && typeof "yes" === "string" && typeof "yes" === "string")


name: macro core/[0;32mfunction?[0m
description: returns true if all of the `things` are functions
arguments: [0;32m([0;32m...[0;32mthings[0m[0m)[0m
examples: 
[0;32m([0;32mfunction?[0m[0;32m[0;32m [0mfn[0m)[0m
typeof fn === "function"

[0;32m([0;32mfunction?[0m[0;32m[0;32m [0merr[0m[0;32m[0;32m [0mcb[0m)[0m
(typeof err === "function" && typeof cb === "function")


name: macro core/[0;32mundefined?[0m
description: returns true if all of the `things` are undefined, as tested
with `typeof`, not equality with literal undefined. This is the
inverse of `defined?`
arguments: [0;32m([0;32m...[0;32mthings[0m[0m)[0m
examples: 
[0;32m([0;32mundefined?[0m[0;32m[0;32m [0margument[0m)[0m
typeof argument === "undefined"

[0;32m([0;32mundefined?[0m[0;32m[0;32m [0m1[0m[0;32m[0;32m [0m2[0m[0;32m[0;32m [0mundefined[0m)[0m
(typeof 1 === "undefined" && typeof 2 === "undefined" && typeof undefined === "undefined")


name: macro core/[0;32mdefined?[0m
description: returns true if none of the `things` are undefined, as tested
with `typeof`. This is the inverse of `defined?`
arguments: [0;32m([0;32m...[0;32mthings[0m[0m)[0m
examples: 
[0;32m([0;32mdefined?[0m[0;32m[0;32m [0mvariable[0m)[0m
typeof variable !== "undefined"

[0;32m([0;32mdefined?[0m[0;32m[0;32m [0mvar1[0m[0;32m[0;32m [0mvar2[0m[0;32m[0;32m [0mvar3[0m)[0m
(typeof var1 !== "undefined" && typeof var2 !== "undefined" && typeof var3 !== "undefined")


name: macro core/[0;32mnumber?[0m
description: returns true if all of the `things` are numbers, as tested
with `typeof`
arguments: [0;32m([0;32m...[0;32mthings[0m[0m)[0m
examples: 
[0;32m([0;32mnumber?[0m[0;32m[0;32m [0m1[0m)[0m
typeof 1 === "number"

[0;32m([0;32mnumber?[0m[0;32m[0;32m [0m1[0m[0;32m[0;32m [0m2[0m[0;32m[0;32m [0m3[0m)[0m
(typeof 1 === "number" && typeof 2 === "number" && typeof 3 === "number")


name: macro core/[0;32mpipe[0m
description: inserts the result of each subsequent call in `calls` as the
second argument to the next macro. This is very much akin to clojure's thread-first arrow or elixir's pipe operator
references:
https://clojuredocs.org/clojure.core/-%3E
http://elixir-lang.org/docs/v1.0/elixir/Kernel.html#|>/2
arguments: [0;32m([0;32m...[0;32mcalls[0m[0m)[0m
examples: 
[0;32m([0;32mpipe[0m[0;32m[0;32m [0m"a b c d"[0m[0;32m[0;32m
[0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m.[0;32mto-upper-case[0m[0m[0;32m[0;32m
[0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m([0;32m.[0;32mreplace[0m[0m[0;32m[0;32m [0m"A"[0m[0;32m[0;32m [0m"X"[0m)[0m[0;32m[0;32m
[0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m([0;32m.[0;32msplit[0m[0m[0;32m[0;32m [0m" "[0m)[0m[0;32m[0;32m
[0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0mfirst[0m[0;32m[0;32m
[0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m([0;32mconcat[0m[0;32m[0;32m [0m" marks the spot"[0m)[0m)[0m
("a b c d".toUpperCase().replace("A", "X").split(" ")[0] + " marks the spot")

[0;32m([0;32mpipe[0m[0;32m[0;32m [0m"{\"a\": {\"b\": [ 1, 2, 3 ]}}"[0m[0;32m[0;32m
[0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0mJSON.parse[0m[0;32m[0;32m
[0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m([0;32mget[0m[0;32m[0;32m [0m'[0;32ma[0m[0m)[0m[0;32m[0;32m
[0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0mJSON.stringify[0m)[0m
JSON.stringify(JSON.parse("{\"a\": {\"b\": [ 1, 2, 3 ]}}").a)


name: macro core/[0;32mcomment[0m
description: inserts `contents` transpiled to javascript as a comment in the
output file, removing it from execution.
arguments: [0;32m([0;32m...[0;32mcontents[0m[0m)[0m
examples: 
[0;32m([0;32mcomment[0m[0;32m[0;32m [0m([0;32mscoped[0m[0;32m[0;32m [0m1[0m)[0m)[0m
// (function() {
//   /* /Users/jbr/code/sibilant/include/macros.sibilant:362:23 */
// 
//   return 1;
// }).call(this)


name: macro core/[0;32marray?[0m
description: returns true if `thing` is an array in javascript. aliased as
`list?`.
arguments: [0;32m([0;32mthing[0m)[0m
examples: 
[0;32m([0;32marray?[0m[0;32m[0;32m [0marr[0m)[0m
((arr) && typeof (arr) === "object" && (arr).constructor.name === "Array")


name: macro core/[0;32mwhen[0m
description: evaluates statements in `body` if `condition` is true. `body`
      is `scoped` in a self-evaluating function to support having a
      return value from the if statement.
arguments: [0;32m([0;32mcondition[0m[0;32m[0;32m [0m...[0;32mbody[0m[0m)[0m
examples: 
[0;32m([0;32mwhen[0m[0;32m[0;32m [0m([0;32m<[0m[0;32m[0;32m [0m3[0m[0;32m[0;32m [0mi[0m)[0m[0;32m[0;32m [0m([0;32mconsole.log[0m[0;32m[0;32m [0mi[0m)[0m[0;32m[0;32m [0m([0;32mget[0m[0;32m[0;32m [0marr[0m[0;32m[0;32m [0mi[0m)[0m)[0m
(function() {
  if (3 < i) {
    console.log(i);
    return arr[i];
  }
}).call(this)


name: macro core/[0;32mnot[0m
description: boolean negation, as determined by javascript truthiness
references:
https://developer.mozilla.org/en-US/docs/Glossary/Truthy
https://developer.mozilla.org/en-US/docs/Glossary/Falsy
arguments: [0;32m([0;32mexp[0m)[0m
examples: 
[0;32m([0;32mnot[0m[0;32m[0;32m [0m([0;32mstring?[0m[0;32m[0;32m [0m1[0m)[0m)[0m
!(typeof 1 === "string")


name: macro core/[0;32munless[0m
description: evaluates statements in `body` if `condition` is falsy. `body`
      is `scoped` in a self-evaluating function to support having a
      return value from the if statement.
arguments: [0;32m([0;32mcondition[0m[0;32m[0;32m [0m...[0;32mbody[0m[0m)[0m
examples: 
[0;32m([0;32munless[0m[0;32m[0;32m [0m([0;32m<[0m[0;32m[0;32m [0m3[0m[0;32m[0;32m [0mi[0m)[0m[0;32m[0;32m [0m([0;32mconsole.log[0m[0;32m[0;32m [0mi[0m)[0m[0;32m[0;32m [0m([0;32mget[0m[0;32m[0;32m [0marr[0m[0;32m[0;32m [0mi[0m)[0m)[0m
(function() {
  if (!(3 < i)) {
    console.log(i);
    return arr[i];
  }
}).call(this)


name: macro core/[0;32massign[0m
description: assigns alternating keys and values in `args`.  This works much
like `var`, but without the var keyword.  It is important to
understand variable scope in javascript in order to use this macro safely.
note that this macro does not currently support destructuring like `var` does
arguments: [0;32m([0;32m...[0;32margs[0m[0m)[0m
examples: 
[0;32m([0;32massign[0m[0;32m[0;32m [0ma[0m[0;32m[0;32m [0m1[0m)[0m
a = 1;

[0;32m([0;32massign[0m[0;32m[0;32m [0ma[0m[0;32m[0;32m [0m1[0m[0;32m[0;32m [0mb[0m[0;32m[0;32m [0m2[0m)[0m
a = 1;
b = 2;


name: macro core/[0;32mlog-pretty[0m
description: outputs debug information about `arg`.  If `label` is
omitted (only one argument is provided), the name of the variable or
expression of that first expression will be logged. Aliased as `pretty-log`
arguments: [0;32m([0;32mlabel[0m[0;32m[0;32m [0marg[0m)[0m
examples: 
[0;32m([0;32mlog-pretty[0m[0;32m[0;32m [0m'[0;32mmy-label[0m[0m[0;32m[0;32m [0mvalue[0m)[0m
console.log(("/Users/jbr/code/sibilant/include/macros.sibilant:446" + " " + "myLabel" + " = " + prettify(value)))

[0;32m([0;32mlog-pretty[0m[0;32m[0;32m [0m([0;32m+[0m[0;32m[0;32m [0m1[0m[0;32m[0;32m [0m2[0m)[0m)[0m
console.log(("/Users/jbr/code/sibilant/include/macros.sibilant:447" + " " + "(+ 1 2)" + " = " + prettify((1 + 2))))


name: macro core/[0;32meach[0m
description: iterates over `array`, evaluating `body` once for each value in
`array`.  If `item` is a literal name, that will be the variable into
which the `array` element is yielded (current value).  If `item` is an expression, it
can contain the current value, the index, and the `array`.
references:
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach
arguments: [0;32m([0;32mitem[0m[0;32m[0;32m [0marray[0m[0;32m[0;32m [0m...[0;32mbody[0m[0m)[0m
examples: 
[0;32m([0;32meach[0m[0;32m[0;32m [0mnumber[0m[0;32m[0;32m [0m[[0;32m[0;32m [0m1[0m[0;32m[0;32m [0m2[0m[0;32m[0;32m [0m3[0m[0;32m [0m][0m[0;32m[0;32m [0m([0;32mconsole.log[0m[0;32m[0;32m [0mnumber[0m)[0m)[0m
[ 1, 2, 3 ].forEach((function(number) {
  /* /Users/jbr/code/sibilant/include/macros.sibilant:461:17 */

  return console.log(number);
}))

[0;32m([0;32meach[0m[0;32m[0;32m [0m([0;32mletter[0m[0;32m[0;32m [0mindex[0m)[0m[0;32m[0;32m [0m`[0;32m[[0;32m[0;32m [0ma[0m[0;32m[0;32m [0mb[0m[0;32m[0;32m [0mc[0m[0;32m[0;32m [0md[0m[0;32m [0m][0m[0m[0;32m[0;32m
[0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m([0;32mset[0m[0;32m[0;32m [0mletters[0m[0;32m[0;32m [0mletter[0m[0;32m[0;32m [0mindex[0m)[0m[0;32m[0;32m
[0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m([0;32mpipe[0m[0;32m[0;32m [0mletter[0m[0;32m[0;32m [0m([0;32m.[0;32mto-upper-case[0m[0m)[0m[0;32m[0;32m [0m([0;32mconsole.log[0m)[0m)[0m)[0m
[ "a", "b", "c", "d" ].forEach((function(letter, index) {
  /* /Users/jbr/code/sibilant/include/macros.sibilant:462:17 */

  letters[letter] = index;
  return console.log(letter.toUpperCase());
}))


name: macro core/[0;32mthrow[0m
description: throws a new javascript error with arguments as the string
arguments: [0;32m([0;32merror[0m)[0m
examples: 
[0;32m([0;32mthrow[0m[0;32m[0;32m [0m([0;32mnew[0m[0;32m[0;32m [0mError[0m[0;32m[0;32m [0m"could not find matching socks"[0m)[0m)[0m
throw (new Error("could not find matching socks"))


name: macro core/[0;32mas-boolean[0m
description: double-negates `expr`, converting it to a boolean
arguments: [0;32m([0;32mexpr[0m)[0m
examples: 
[0;32m([0;32mas-boolean[0m[0;32m[0;32m [0m0[0m)[0m
(!!(0))

[0;32m([0;32mas-boolean[0m[0;32m[0;32m [0mtrue[0m)[0m
(!!(true))


name: macro core/[0;32mwhile[0m
description: evaluates the `body` as long as `condition` is truthy,
returning the value of the last expression in `block` when `condition`
ceases to be truthy. See also `until`
arguments: [0;32m([0;32mcondition[0m[0;32m[0;32m [0m...[0;32mbody[0m[0m)[0m
examples: 
[0;32m([0;32mwhile[0m[0;32m[0;32m [0m([0;32m>[0m[0;32m[0;32m [0m5[0m[0;32m[0;32m [0mi[0m)[0m[0;32m[0;32m [0m([0;32mconsole.log[0m[0;32m[0;32m [0mi[0m)[0m[0;32m[0;32m [0m([0;32mdecr[0m[0;32m[0;32m [0mi[0m)[0m)[0m
(function() {
  var $_symbol5_$ = undefined;
  while (5 > i) {
    $_symbol5_$ = (function() {
      console.log(i);
      return ((i)--);
    }).call(this);
  };
  return $_symbol5_$;
}).call(this)


name: macro core/[0;32muntil[0m
description: evaluates the `body` as long as `condition` is falsy,
returning the value of the last expression in `block` when `condition`
ceases to be falsy. See also `while`
arguments: [0;32m([0;32mcondition[0m[0;32m[0;32m [0m...[0;32mbody[0m[0m)[0m
examples: 
[0;32m([0;32muntil[0m[0;32m[0;32m [0m([0;32m<[0m[0;32m[0;32m [0m5[0m[0;32m[0;32m [0mi[0m)[0m[0;32m[0;32m [0m([0;32mconsole.log[0m[0;32m[0;32m [0mi[0m)[0m[0;32m[0;32m [0m([0;32mincr[0m[0;32m[0;32m [0mi[0m)[0m)[0m
(function() {
  var $_symbol6_$ = undefined;
  while (!(5 < i)) {
    $_symbol6_$ = (function() {
      console.log(i);
      return ((i)++);
    }).call(this);
  };
  return $_symbol6_$;
}).call(this)


name: macro core/[0;32mmatch?[0m
description: returns true if the `string` matches `regexp`.  Deprecated in
      preference to `.match` (`send` dot-invocation).
arguments: [0;32m([0;32mregexp[0m[0;32m[0;32m [0mstring[0m)[0m
examples: 
[0;32m([0;32mmatch?[0m[0;32m[0;32m [0m([0;32mregex[0m[0;32m[0;32m [0m"^[a-z]+$"[0m[0;32m[0;32m [0m'[0;32mi[0m[0m)[0m[0;32m[0;32m [0m'[0;32mword[0m[0m)[0m
"word".match((new RegExp("^[a-z]+$", "i")))


name: macro core/[0;32mmatch-regex?[0m
description: similar to `match?` but builds a regex out of the `pattern` and `flags`.
arguments: [0;32m([0;32mstring[0m[0;32m[0;32m [0mpattern[0m[0;32m[0;32m [0mflags[0m)[0m
examples: 
[0;32m([0;32mmatch-regex?[0m[0;32m[0;32m [0m'[0;32mword[0m[0m[0;32m[0;32m [0m"^[a-z]+$"[0m[0;32m[0;32m [0m'[0;32mi[0m[0m)[0m
"word".match((new RegExp("^[a-z]+$", "i")))


name: macro core/[0;32mreplace[0m
description: replaces the first occurance of `pattern` (as a regex) with `replacement`
arguments: [0;32m([0;32mstring[0m[0;32m[0;32m [0mpattern[0m[0;32m[0;32m [0mreplacement[0m)[0m
examples: 
[0;32m([0;32mreplace[0m[0;32m[0;32m [0m"hello world"[0m[0;32m[0;32m [0m"l+o"[0m[0;32m[0;32m [0m"y there,"[0m)[0m
"hello world".replace((new RegExp("l+o", undefined)), "y there,")


name: macro core/[0;32mreplace-all[0m
description: replaces all occurrances of `pattern` (as a regex) with `replacement`
arguments: [0;32m([0;32mstring[0m[0;32m[0;32m [0mpattern[0m[0;32m[0;32m [0mreplacement[0m)[0m
examples: 
[0;32m([0;32mreplace-all[0m[0;32m[0;32m [0m"503-555-1212"[0m[0;32m[0;32m [0m"[0-9]"[0m[0;32m[0;32m [0m"#"[0m)[0m
"503-555-1212".replace((new RegExp("[0-9]", "g")), "#")


name: macro core/[0;32mthunk[0m
description: most often called as its alias, `#>`, thunk creates a function
with no named arguments. To refer to arguments anonymously, use #n,
such as #0 for the first argument.
arguments: [0;32m([0;32m...[0;32mbody[0m[0m)[0m
examples: 
[0;32m([0;32m.[0;32mmap[0m[0m[0;32m[0;32m [0m[[0;32m[0;32m [0m1[0m[0;32m[0;32m [0m2[0m[0;32m[0;32m [0m3[0m[0;32m [0m][0m[0;32m[0;32m [0m([0;32m#>[0m[0;32m[0;32m [0m([0;32m+[0m[0;32m[0;32m [0m1[0m[0;32m[0;32m [0m#0[0m)[0m)[0m)[0m
[ 1, 2, 3 ].map((function() {
  /* /Users/jbr/code/sibilant/include/macros.sibilant:603:34 */

  return (1 + arguments[0]);
}))

[0;32m([0;32mwindow.set-timeout[0m[0;32m[0;32m [0m([0;32m#>[0m[0;32m[0;32m [0m([0;32mconsole.log[0m[0;32m[0;32m [0m'[0;32mhere[0m[0m)[0m)[0m[0;32m[0;32m [0m10[0m)[0m
window.setTimeout((function() {
  /* /Users/jbr/code/sibilant/include/macros.sibilant:604:38 */

  return console.log("here");
}), 10)


name: macro core/[0;32mpipe-thunk[0m
description: most often called as its alias, `#->`, pipe-thunk applies a pipe chain to the argument of a function and returns the result
arguments: [0;32m([0;32m...[0;32mcalls[0m[0m)[0m
examples: 
[0;32m([0;32m.[0;32mmap[0m[0m[0;32m[0;32m [0m`[0;32m[[0;32m[0;32m [0ma[0m[0;32m[0;32m [0mb[0m[0;32m[0;32m [0mc[0m[0;32m [0m][0m[0m[0;32m[0;32m [0m([0;32m#->[0m[0;32m[0;32m [0m([0;32m.[0;32mto-upper-case[0m[0m)[0m[0;32m[0;32m [0m([0;32mconcat[0m[0;32m[0;32m [0m" is a letter"[0m)[0m)[0m)[0m
[ "a", "b", "c" ].map((function() {
  /* /Users/jbr/code/sibilant/include/macros.sibilant:620:30 */

  return (arguments[0].toUpperCase() + " is a letter");
}))


name: macro core/[0;32mkeys[0m
description: returns the property names of `obj`.
references:
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/keys
arguments: [0;32m([0;32mobj[0m)[0m
examples: 
[0;32m([0;32mkeys[0m[0;32m[0;32m [0m{[0;32m[0;32m [0ma[0m[0;32m[0;32m [0m1[0m[0;32m[0;32m [0mb[0m[0;32m[0;32m [0m2[0m[0;32m [0m}[0m)[0m
Object.keys({
  a: 1,
  b: 2
})


name: macro core/[0;32mdelete[0m
description: uses the javascript delete keyword on any number of `objects`.
      Use in conjunction with `get` or dotted literal notation (a.b).
arguments: [0;32m([0;32m...[0;32mobjects[0m[0m)[0m
examples: 
[0;32m([0;32mdelete[0m[0;32m[0;32m [0mobject.a[0m[0;32m[0;32m [0mobject.b[0m)[0m
delete object.a;
delete object.b;

[0;32m([0;32mdelete[0m[0;32m[0;32m [0m([0;32mget[0m[0;32m[0;32m [0mobject[0m[0;32m[0;32m [0mattribute[0m)[0m[0;32m[0;32m [0m([0;32mget[0m[0;32m[0;32m [0mobject[0m[0;32m[0;32m [0m"other attribute"[0m)[0m)[0m
delete object[attribute];
delete object["other attribute"];


name: macro core/[0;32mdelete-macro[0m
description: deletes each macro name in `macro-names` from the current namespace. Use carefully
arguments: [0;32m([0;32m...[0;32mmacro-names[0m[0m)[0m
examples: 



name: macro core/[0;32mrename-macro[0m
description: moves macro from `current-macro-name` to `new-macro-name`. Use carefully
arguments: [0;32m([0;32mcurrent-macro-name[0m[0;32m[0;32m [0mnew-macro-name[0m)[0m
examples: 



name: macro core/[0;32marguments[0m
description: transforms function arguments into an array, using the Array prototype's slice
arguments: [0;32m()[0m
examples: 
[0;32m([0;32marguments[0m)[0m
(Array.prototype.slice.apply(arguments))


name: macro core/[0;32margument[0m
description: `get`s the argument at `index` in the current function context
arguments: [0;32m([0;32mindex[0m)[0m
examples: 
[0;32m([0;32margument[0m[0;32m[0;32m [0m3[0m)[0m
arguments[3]


name: macro core/[0;32meach-key[0m
description: iterates over each attribute in `obj`
arguments: [0;32m([0;32mas[0m[0;32m[0;32m [0mobj[0m[0;32m[0;32m [0m...[0;32mbody[0m[0m)[0m
examples: 
[0;32m([0;32meach-key[0m[0;32m[0;32m [0mkey[0m[0;32m[0;32m [0m{[0;32m[0;32m [0ma[0m[0;32m[0;32m [0m1[0m[0;32m[0;32m [0mb[0m[0;32m[0;32m [0m2[0m[0;32m [0m}[0m[0;32m[0;32m [0m([0;32mconsole.log[0m[0;32m[0;32m [0mkey[0m)[0m)[0m
Object.keys({
  a: 1,
  b: 2
}).forEach((function(key) {
  /* /Users/jbr/code/sibilant/include/macros.sibilant:698:14 */

  return console.log(key);
}))


name: macro core/[0;32mswitch[0m
description: uses the javascript switch construction to test equality.  documentation todo: needs better description
arguments: [0;32m([0;32mobj[0m[0;32m[0;32m [0m...[0;32mcases[0m[0m)[0m
examples: 
[0;32m([0;32mswitch[0m[0;32m[0;32m [0mchar[0m[0;32m[0;32m
[0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m([0;32m'[0;32ma[0m[0m[0;32m[0;32m [0m"it was an a"[0m)[0m[0;32m[0;32m
[0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m([0;32m'[0;32mb[0m[0m[0;32m[0;32m [0m([0;32mconsole.log[0m[0;32m[0;32m [0m"found a b!"[0m)[0m[0;32m[0;32m
[0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m"it was a b"[0m)[0m[0;32m[0;32m
[0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m([0;32m[[0;32m1[0m[0;32m[0;32m [0m2[0m[0;32m[0;32m [0m3[0m[0;32m[0;32m [0m4[0m[0;32m[0;32m [0m5[0m][0m[0;32m[0;32m [0m"it was an integer from one to five"[0m)[0m[0;32m[0;32m
[0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m([0;32mdefault[0m[0;32m[0;32m [0m"not sure"[0m)[0m)[0m
(function() {
  switch(char) {
  case "a":
    return "it was an a";
  
  case "b":
    console.log("found a b!");
    return "it was a b";
  
  case 1:
  case 2:
  case 3:
  case 4:
  case 5:
    return "it was an integer from one to five";
  
  default:
    return "not sure";
  }
}).call(this)


name: macro core/[0;32mif[0m
description: tests any number of `alternating-conditions-and-branches`.  If
      an odd number of branches are supplied, the final branch is a
      default else clause.  To evaluate more than one expression as a
      branch, use the `do` macro, as shown in the examples:
arguments: [0;32m([0;32m...[0;32malternating-conditions-and-branches[0m[0m)[0m
examples: 
[0;32m([0;32mif[0m[0;32m[0;32m [0mtrue[0m[0;32m[0;32m [0m([0;32mconsole.log[0m[0;32m[0;32m [0m'[0;32mhere[0m[0m)[0m)[0m
(function() {
  if (true) {
    return console.log("here");
  }
}).call(this)

[0;32m([0;32mif[0m[0;32m[0;32m [0m([0;32m=[0m[0;32m[0;32m [0m1[0m[0;32m[0;32m [0marguments.length[0m)[0m[0;32m[0;32m [0m([0;32mconsole.log[0m[0;32m[0;32m [0m"one argument"[0m)[0m[0;32m[0;32m
[0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m([0;32m=[0m[0;32m[0;32m [0m'[0;32mblue[0m[0m[0;32m[0;32m [0mfavorite-color[0m)[0m[0;32m[0;32m [0m([0;32mconsole.log[0m[0;32m[0;32m [0m"blue"[0m)[0m[0;32m[0;32m
[0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m([0;32massign[0m[0;32m[0;32m [0mexamples[0m[0;32m[0;32m [0m'[0;32mdifficult[0m[0m)[0m)[0m
(function() {
  if (1 === arguments.length) {
    return console.log("one argument");
  } else if ("blue" === favoriteColor) {
    return console.log("blue");
  } else {
    return examples = "difficult";
  }
}).call(this)

[0;32m([0;32mif[0m[0;32m[0;32m [0m([0;32mfoo?[0m)[0m[0;32m[0;32m [0m([0;32mdo[0m[0;32m[0;32m [0m([0;32ma[0m[0;32m[0;32m [0mb[0m)[0m[0;32m[0;32m
[0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m([0;32mc[0m)[0m)[0m[0;32m[0;32m
[0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m([0;32mbar?[0m)[0m[0;32m[0;32m [0m([0;32mdo[0m[0;32m[0;32m [0m([0;32mbaz[0m)[0m[0;32m[0;32m
[0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m([0;32mwibble[0m)[0m)[0m[0;32m[0;32m
[0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m([0;32mdo[0m[0;32m[0;32m [0m([0;32md[0m[0;32m[0;32m [0me[0m)[0m[0;32m[0;32m
[0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m([0;32mconsole.log[0m[0;32m[0;32m [0m'[0;32mdefault[0m[0m)[0m)[0m)[0m
(function() {
  if (foo__QUERY()) {
    a(b);
    return c();
  } else if (bar__QUERY()) {
    baz();
    return wibble();
  } else {
    d(e);
    return console.log("default");
  }
}).call(this)


name: macro core/[0;32mchain[0m
description: similar to `pipe`, this macro allows function calls to be applied
in sequence, as is common in fluent interfaces. deprecated in preference to `pipe`
arguments: [0;32m([0;32mobject[0m[0;32m[0;32m [0m...[0;32mcalls[0m[0m)[0m
examples: 
[0;32m([0;32mchain[0m[0;32m[0;32m [0ma[0m[0;32m[0;32m [0m([0;32mb[0m[0;32m[0;32m [0mc[0m[0;32m[0;32m [0md[0m)[0m[0;32m[0;32m [0m([0;32me[0m)[0m[0;32m[0;32m [0m([0;32mf[0m[0;32m[0;32m [0mg[0m)[0m)[0m
a.b(c, d)
  .e()
  .f(g)


name: macro core/[0;32minstance-of?[0m
description: uses the javascript `instanceof` operator to check if `item` is of `type`.
arguments: [0;32m([0;32mitem[0m[0;32m[0;32m [0mtype[0m)[0m
examples: 
[0;32m([0;32minstance-of?[0m[0;32m[0;32m [0m([0;32mnew[0m[0;32m[0;32m [0mDate[0m)[0m[0;32m[0;32m [0mDate[0m)[0m
((new Date()) instanceof Date)


name: macro core/[0;32mincludes?[0m
description: returns true if `haystack` includes `needle`.  `haystack` can be a string or array/list.
arguments: [0;32m([0;32mhaystack[0m[0;32m[0;32m [0mneedle[0m)[0m
examples: 
[0;32m([0;32mincludes?[0m[0;32m[0;32m [0m'[0;32mhello[0m[0m[0;32m[0;32m [0m'[0;32mh[0m[0m)[0m
"hello".indexOf("h") !== -1

[0;32m([0;32mincludes?[0m[0;32m[0;32m [0m`[0;32m[[0;32m[0;32m [0mVeni[0m[0;32m[0;32m [0mvidi[0m[0;32m[0;32m [0mvici[0m][0m[0m[0;32m[0;32m [0m'[0;32mvidi[0m[0m)[0m
[ "Veni", "vidi", "vici" ].indexOf("vidi") !== -1


name: macro core/[0;32mexcludes?[0m
description: returns true if `haystack` does NOT include `needle`.
`haystack` can be a string or array/list
arguments: [0;32m([0;32mhaystack[0m[0;32m[0;32m [0mneedle[0m)[0m
examples: 
[0;32m([0;32mexcludes?[0m[0;32m[0;32m [0m'[0;32mhello[0m[0m[0;32m[0;32m [0m10[0m)[0m
"hello".indexOf(10) === -1

[0;32m([0;32mexcludes?[0m[0;32m[0;32m [0m`[0;32m[[0;32m[0;32m [0mVeni[0m[0;32m[0;32m [0mvidi[0m[0;32m[0;32m [0mvici[0m][0m[0m[0;32m[0;32m [0m'[0;32mattenti[0m[0m)[0m
[ "Veni", "vidi", "vici" ].indexOf("attenti") === -1


name: macro core/[0;32mexists?[0m
description: similar to the javascript truthiness predicate `as-boolean`, returns true unless the `thing` is undefined or null
arguments: [0;32m([0;32mthing[0m)[0m
examples: 
[0;32m([0;32mexists?[0m[0;32m[0;32m [0mwindow[0m)[0m
(typeof window !== "undefined" && window !== null)


name: macro core/[0;32mjoin[0m
description: combines elements of array `arr` into a string, inserting
`glue` string between each element.  if `glue` is omitted (only one
argument provided), the elements of `arr` are joined with an empty
string
arguments: [0;32m([0;32marr[0m[0;32m[0;32m [0mglue[0m)[0m
examples: 
[0;32m([0;32mjoin[0m[0;32m[0;32m [0m`[0;32m[[0;32m[0;32m [0ma[0m[0;32m[0;32m [0mfew[0m[0;32m[0;32m [0mwords[0m[0;32m [0m][0m[0m[0;32m[0;32m [0m[0;32m [0m", "[0m[0;32m [0m)[0m
[ "a", "few", "words" ].join(", ")

[0;32m([0;32mjoin[0m[0;32m[0;32m [0m`[0;32m[[0;32m[0;32m [0mseveral[0m[0;32m[0;32m [0mmore[0m[0;32m[0;32m [0mwords[0m[0;32m [0m][0m[0m)[0m
[ "several", "more", "words" ].join("")


name: macro core/[0;32mvar[0m
description: registers variables in `pairs` inside of the current scope using the javascript var keyword.
destructuring from arrays and objects is also supported, as shown in the examples
arguments: [0;32m([0;32m...[0;32mpairs[0m[0m)[0m
examples: 
[0;32m([0;32mvar[0m[0;32m[0;32m [0ma[0m[0;32m[0;32m [0m1[0m[0;32m[0;32m [0mb[0m[0;32m[0;32m [0m2[0m)[0m
var a = 1,
    b = 2;

[0;32m([0;32mvar[0m[0;32m[0;32m [0ma[0m[0;32m[0;32m [0m1[0m)[0m
var a = 1;

[0;32m([0;32mvar[0m[0;32m[0;32m [0ma[0m)[0m
var a = undefined;

[0;32m([0;32mvar[0m[0;32m[0;32m [0m{[0;32ma[0m}[0m[0;32m[0;32m [0m{[0;32ma[0m[0;32m[0;32m [0m1[0m[0;32m[0;32m [0mb[0m[0;32m[0;32m [0m2[0m}[0m[0;32m[0;32m [0mc[0m[0;32m[0;32m [0m3[0m)[0m
var $_symbol7_$ = {
  a: 1,
  b: 2
},
    a = $_symbol7_$.a,
    $_symbol7_$ = undefined,
    c = 3;

[0;32m([0;32mvar[0m[0;32m[0;32m [0ma[0m[0;32m[0;32m [0m1[0m[0;32m[0;32m [0m[[0;32mb[0m[0;32m[0;32m [0mc[0m][0m[0;32m[0;32m [0m[[0;32m2[0m[0;32m[0;32m [0m3[0m][0m)[0m
var a = 1,
    $_symbol8_$ = [ 2, 3 ],
    b = $_symbol8_$[0],
    c = $_symbol8_$[1],
    $_symbol8_$ = undefined;


name: macro core/[0;32mdefault[0m
description: sets default values for variables in current scope. `pairs` are
alternating variable names and default values
arguments: [0;32m([0;32m...[0;32mpairs[0m[0m)[0m
examples: 
[0;32m([0;32mdefault[0m[0;32m[0;32m [0ma[0m[0;32m[0;32m [0m10[0m[0;32m[0;32m [0mb[0m[0;32m[0;32m [0m20[0m)[0m
a = (typeof a !== "undefined") ? a : 10;
b = (typeof b !== "undefined") ? b : 20;


name: macro core/[0;32mhas-key?[0m
description: checks if `object` has property `key`.  returns true or false.
arguments: [0;32m([0;32mobject[0m[0;32m[0;32m [0mkey[0m)[0m
examples: 
[0;32m([0;32mhas-key?[0m[0;32m[0;32m [0mobject[0m[0;32m[0;32m [0m'[0;32ma[0m[0m)[0m
object.hasOwnProperty("a")


name: macro core/[0;32mget[0m
description: retreives object properties, potentially deeply. If more than one `keys` are provided,
`get` fetches deeply into nested objects or arrays.
When javascript dot notation can be used (`a.b = 3`), it is.
Otherwise, bracket notation is used.
arguments: [0;32m([0;32mobj[0m[0;32m[0;32m [0m...[0;32mkeys[0m[0m)[0m
examples: 
[0;32m([0;32mget[0m[0;32m[0;32m [0man-object[0m[0;32m[0;32m [0m'[0;32mstatic-attribute-name[0m[0m)[0m
anObject.staticAttributeName

[0;32m([0;32mget[0m[0;32m[0;32m [0mobject[0m[0;32m[0;32m [0mdynamic-attribute-name[0m)[0m
object[dynamicAttributeName]

[0;32m([0;32mget[0m[0;32m[0;32m [0mobject[0m[0;32m[0;32m [0m"these attributes"[0m[0;32m[0;32m [0m"can't be dotted"[0m)[0m
object["these attributes"]["can't be dotted"]

[0;32m([0;32mget[0m[0;32m[0;32m [0marray[0m[0;32m[0;32m [0m0[0m)[0m
array[0]

[0;32m([0;32mget[0m[0;32m[0;32m [0mobject[0m[0;32m[0;32m [0m'[0;32ma[0m[0m[0;32m[0;32m [0m'[0;32mb[0m[0m[0;32m[0;32m [0mc[0m)[0m
object.a.b[c]

[0;32m([0;32mget[0m[0;32m[0;32m [0marray[0m[0;32m[0;32m [0m0[0m[0;32m[0;32m [0m1[0m[0;32m[0;32m [0m2[0m)[0m
array[0][1][2]


name: macro core/[0;32mset[0m
description: assigns object properties to `arr` in pairs, alternating between keys and values.
When javascript dot notation can be used (`a.b = 3`), it is.  Otherwise, bracket notation is used
arguments: [0;32m([0;32marr[0m[0;32m[0;32m [0m...[0;32mkv-pairs[0m[0m)[0m
examples: 
[0;32m([0;32mset[0m[0;32m[0;32m [0man-object[0m[0;32m[0;32m [0m'[0;32mstatic-attribute-name[0m[0m[0;32m[0;32m [0m'[0;32mvalue[0m[0m)[0m
anObject.staticAttributeName = "value";

[0;32m([0;32mset[0m[0;32m[0;32m [0mobject[0m[0;32m[0;32m [0mdynamic-attribute-name[0m[0;32m[0;32m [0m"key name determined at runtime"[0m)[0m
object[dynamicAttributeName] = "key name determined at runtime";

[0;32m([0;32mset[0m[0;32m[0;32m [0marray[0m[0;32m[0;32m [0m0[0m[0;32m[0;32m [0m"first element of array"[0m)[0m
array[0] = "first element of array";

[0;32m([0;32mset[0m[0;32m[0;32m [0mobject[0m[0;32m[0;32m [0m"can't be dotted"[0m[0;32m[0;32m [0m'[0;32mvalue[0m[0m)[0m
object["can't be dotted"] = "value";

[0;32m([0;32mset[0m[0;32m[0;32m [0mobject[0m[0;32m[0;32m [0m'[0;32mfirst-attribute[0m[0m[0;32m[0;32m [0m'[0;32mfirst-value[0m[0m[0;32m[0;32m
[0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m[0;32m [0m'[0;32msecond-attribute[0m[0m[0;32m[0;32m [0m'[0;32msecond-value[0m[0m)[0m
object.firstAttribute = "firstValue";
object.secondAttribute = "secondValue";


name: macro core/[0;32mlower-case?[0m
description: checks if a string is identical to the lower-cased version of itself
arguments: [0;32m([0;32mstr[0m)[0m
examples: 
[0;32m([0;32mlower-case?[0m[0;32m[0;32m [0m"abc"[0m)[0m
"abc".toLowerCase() === "abc"


name: macro core/[0;32mupper-case?[0m
description: checks if a string is identical to the upper-cased version of itself
arguments: [0;32m([0;32mstr[0m)[0m
examples: 
[0;32m([0;32mlower-case?[0m[0;32m[0;32m [0m"abc"[0m)[0m
"abc".toLowerCase() === "abc"


undocumented (11):

macro core/[0;32m*scoped-without-source[0m
macro core/[0;32m*number-words[0m
macro core/[0;32m*def-infix[0m
macro core/[0;32mmacro-expand[0m
macro core/[0;32mtry[0m
macro core/[0;32mstate[0m
macro core/[0;32msymbol[0m
macro core/[0;32mchainable[0m
macro core/[0;32mwith-state[0m
macro core/[0;32mimport-namespace[0m
macro core/[0;32mnamespace[0m

